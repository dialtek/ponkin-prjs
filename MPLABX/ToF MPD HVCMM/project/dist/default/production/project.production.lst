

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Jul 27 17:18:04 2020

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  001D96                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for _com_dev_id
    52  001D96  F7                 	db	247
    53                           
    54                           ;initializer for _dev_id
    55  001D97  01                 	db	1
    56                           
    57                           	psect	smallconst
    58  000F00                     __psmallconst:
    59                           	opt stack 0
    60  000F00  00                 	db	0
    61  000F01                     _device_family:
    62                           	opt stack 0
    63  000F01  00                 	db	0
    64  000F02                     __end_of_device_family:
    65                           	opt stack 0
    66  000F02                     _firmware_ver:
    67                           	opt stack 0
    68  000F02  0A                 	db	10
    69  000F03                     __end_of_firmware_ver:
    70                           	opt stack 0
    71  000F03                     _modbus_ver:
    72                           	opt stack 0
    73  000F03  33                 	db	51
    74  000F04                     __end_of_modbus_ver:
    75                           	opt stack 0
    76  0000                     _ADCON0bits	set	4034
    77  0000                     _ADCON1bits	set	4033
    78  0000                     _ADCON2bits	set	4032
    79  0000                     _ADRESH	set	4036
    80  0000                     _ADRESL	set	4035
    81  0000                     _ANCON0bits	set	3933
    82  0000                     _BAUDCON1bits	set	4007
    83  0000                     _INTCONbits	set	4082
    84  0000                     _LATBbits	set	3978
    85  0000                     _LATCbits	set	3979
    86  0000                     _PIE1bits	set	3997
    87  0000                     _PIR1bits	set	3998
    88  0000                     _RCONbits	set	4048
    89  0000                     _RCREG1	set	4014
    90  0000                     _RCSTA1bits	set	4011
    91  0000                     _SPBRG1	set	4015
    92  0000                     _TRISAbits	set	3986
    93  0000                     _TRISBbits	set	3987
    94  0000                     _TRISCbits	set	3988
    95  0000                     _TXREG1bits	set	4013
    96  0000                     _TXSTA1bits	set	4012
    97  0000                     _GO_nDONE	set	32273
    98                           
    99                           ; #config settings
   100  000F04  00                 	db	0	; dummy byte at the end
   101  0000                     
   102                           	psect	cinit
   103  001ADC                     __pcinit:
   104                           	opt stack 0
   105  001ADC                     start_initialization:
   106                           	opt stack 0
   107  001ADC                     __initialization:
   108                           	opt stack 0
   109                           
   110                           ; Clear objects allocated to BIGRAM (300 bytes)
   111  001ADC  EE02  F0FA         	lfsr	0,__pbssBIGRAM
   112  001AE0  EE11 F02C          	lfsr	1,300
   113  001AE4                     clear_0:
   114  001AE4  6AEE               	clrf	postinc0,c
   115  001AE6  50E5               	movf	postdec1,w,c
   116  001AE8  50E1               	movf	fsr1l,w,c
   117  001AEA  E1FC               	bnz	clear_0
   118  001AEC  50E2               	movf	fsr1h,w,c
   119  001AEE  E1FA               	bnz	clear_0
   120                           
   121                           ; Clear objects allocated to BANK2 (250 bytes)
   122  001AF0  EE02  F000         	lfsr	0,__pbssBANK2
   123  001AF4  0EFA               	movlw	250
   124  001AF6                     clear_1:
   125  001AF6  6AEE               	clrf	postinc0,c
   126  001AF8  06E8               	decf	wreg,f,c
   127  001AFA  E1FD               	bnz	clear_1
   128                           
   129                           ; Clear objects allocated to BANK1 (250 bytes)
   130  001AFC  EE01  F000         	lfsr	0,__pbssBANK1
   131  001B00  0EFA               	movlw	250
   132  001B02                     clear_2:
   133  001B02  6AEE               	clrf	postinc0,c
   134  001B04  06E8               	decf	wreg,f,c
   135  001B06  E1FD               	bnz	clear_2
   136                           
   137                           ; Clear objects allocated to BANK0 (128 bytes)
   138  001B08  EE00  F060         	lfsr	0,__pbssBANK0
   139  001B0C  0E80               	movlw	128
   140  001B0E                     clear_3:
   141  001B0E  6AEE               	clrf	postinc0,c
   142  001B10  06E8               	decf	wreg,f,c
   143  001B12  E1FD               	bnz	clear_3
   144                           
   145                           ; Clear objects allocated to COMRAM (45 bytes)
   146  001B14  EE00  F001         	lfsr	0,__pbssCOMRAM
   147  001B18  0E2D               	movlw	45
   148  001B1A                     clear_4:
   149  001B1A  6AEE               	clrf	postinc0,c
   150  001B1C  06E8               	decf	wreg,f,c
   151  001B1E  E1FD               	bnz	clear_4
   152                           
   153                           ; Initialize objects allocated to COMRAM (2 bytes)
   154                           ; load TBLPTR registers with __pidataCOMRAM
   155  001B20  0E96               	movlw	low __pidataCOMRAM
   156  001B22  6EF6               	movwf	tblptrl,c
   157  001B24  0E1D               	movlw	high __pidataCOMRAM
   158  001B26  6EF7               	movwf	tblptrh,c
   159  001B28  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   160  001B2A  6EF8               	movwf	tblptru,c
   161  001B2C  0009               	tblrd		*+	;fetch initializer
   162  001B2E  CFF5 F04F          	movff	tablat,__pdataCOMRAM
   163  001B32  0009               	tblrd		*+	;fetch initializer
   164  001B34  CFF5 F050          	movff	tablat,__pdataCOMRAM+1
   165  001B38                     end_of_initialization:
   166                           	opt stack 0
   167  001B38                     __end_of__initialization:
   168                           	opt stack 0
   169  001B38  0E00               	movlw	low (__Lmediumconst shr (0+16))
   170  001B3A  6EF8               	movwf	tblptru,c
   171  001B3C  0100               	movlb	0
   172  001B3E  EF64  F00E         	goto	_main	;jump to C main() function
   173                           tblptru	equ	0xFF8
   174                           tblptrh	equ	0xFF7
   175                           tblptrl	equ	0xFF6
   176                           tablat	equ	0xFF5
   177                           postinc0	equ	0xFEE
   178                           wreg	equ	0xFE8
   179                           postdec1	equ	0xFE5
   180                           fsr1h	equ	0xFE2
   181                           fsr1l	equ	0xFE1
   182                           
   183                           	psect	bssCOMRAM
   184  000001                     __pbssCOMRAM:
   185                           	opt stack 0
   186  000001                     _I_Mx_Ch:
   187                           	opt stack 0
   188  000001                     	ds	10
   189  00000B                     _V_Mx_Ch:
   190                           	opt stack 0
   191  00000B                     	ds	10
   192  000015                     _CRC16:
   193                           	opt stack 0
   194  000015                     	ds	2
   195  000017                     _I_total:
   196                           	opt stack 0
   197  000017                     	ds	2
   198  000019                     _RegisterValue:
   199                           	opt stack 0
   200  000019                     	ds	2
   201  00001B                     _addr_buf_1:
   202                           	opt stack 0
   203  00001B                     	ds	2
   204  00001D                     _addr_buf_2:
   205                           	opt stack 0
   206  00001D                     	ds	2
   207  00001F                     _modbus_reg_addr:
   208                           	opt stack 0
   209  00001F                     	ds	2
   210  000021                     _reg_wr_data:
   211                           	opt stack 0
   212  000021                     	ds	2
   213  000023                     _regs2read:
   214                           	opt stack 0
   215  000023                     	ds	2
   216  000025                     _rx_buf_ptr:
   217                           	opt stack 0
   218  000025                     	ds	2
   219  000027                     _wr_reg_addr:
   220                           	opt stack 0
   221  000027                     	ds	2
   222  000029                     _zero_lvl:
   223                           	opt stack 0
   224  000029                     	ds	2
   225  00002B                     _answer:
   226                           	opt stack 0
   227  00002B                     	ds	1
   228  00002C                     _modbus_id:
   229                           	opt stack 0
   230  00002C                     	ds	1
   231  00002D                     _rx_flag:
   232                           	opt stack 0
   233  00002D                     	ds	1
   234                           tblptru	equ	0xFF8
   235                           tblptrh	equ	0xFF7
   236                           tblptrl	equ	0xFF6
   237                           tablat	equ	0xFF5
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           postdec1	equ	0xFE5
   241                           fsr1h	equ	0xFE2
   242                           fsr1l	equ	0xFE1
   243                           
   244                           	psect	dataCOMRAM
   245  00004F                     __pdataCOMRAM:
   246                           	opt stack 0
   247  00004F                     _com_dev_id:
   248                           	opt stack 0
   249  00004F                     	ds	1
   250  000050                     _dev_id:
   251                           	opt stack 0
   252  000050                     	ds	1
   253                           tblptru	equ	0xFF8
   254                           tblptrh	equ	0xFF7
   255                           tblptrl	equ	0xFF6
   256                           tablat	equ	0xFF5
   257                           postinc0	equ	0xFEE
   258                           wreg	equ	0xFE8
   259                           postdec1	equ	0xFE5
   260                           fsr1h	equ	0xFE2
   261                           fsr1l	equ	0xFE1
   262                           
   263                           	psect	bssBANK0
   264  000060                     __pbssBANK0:
   265                           	opt stack 0
   266  000060                     _rx_buf:
   267                           	opt stack 0
   268  000060                     	ds	128
   269                           tblptru	equ	0xFF8
   270                           tblptrh	equ	0xFF7
   271                           tblptrl	equ	0xFF6
   272                           tablat	equ	0xFF5
   273                           postinc0	equ	0xFEE
   274                           wreg	equ	0xFE8
   275                           postdec1	equ	0xFE5
   276                           fsr1h	equ	0xFE2
   277                           fsr1l	equ	0xFE1
   278                           
   279                           	psect	bssBANK1
   280  000100                     __pbssBANK1:
   281                           	opt stack 0
   282  000100                     _holding_register:
   283                           	opt stack 0
   284  000100                     	ds	250
   285                           tblptru	equ	0xFF8
   286                           tblptrh	equ	0xFF7
   287                           tblptrl	equ	0xFF6
   288                           tablat	equ	0xFF5
   289                           postinc0	equ	0xFEE
   290                           wreg	equ	0xFE8
   291                           postdec1	equ	0xFE5
   292                           fsr1h	equ	0xFE2
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	bssBANK2
   296  000200                     __pbssBANK2:
   297                           	opt stack 0
   298  000200                     _input_register:
   299                           	opt stack 0
   300  000200                     	ds	250
   301                           tblptru	equ	0xFF8
   302                           tblptrh	equ	0xFF7
   303                           tblptrl	equ	0xFF6
   304                           tablat	equ	0xFF5
   305                           postinc0	equ	0xFEE
   306                           wreg	equ	0xFE8
   307                           postdec1	equ	0xFE5
   308                           fsr1h	equ	0xFE2
   309                           fsr1l	equ	0xFE1
   310                           
   311                           	psect	bssBIGRAM
   312  0002FA                     __pbssBIGRAM:
   313                           	opt stack 0
   314  0002FA                     _crc_buf:
   315                           	opt stack 0
   316  0002FA                     	ds	300
   317                           tblptru	equ	0xFF8
   318                           tblptrh	equ	0xFF7
   319                           tblptrl	equ	0xFF6
   320                           tablat	equ	0xFF5
   321                           postinc0	equ	0xFEE
   322                           wreg	equ	0xFE8
   323                           postdec1	equ	0xFE5
   324                           fsr1h	equ	0xFE2
   325                           fsr1l	equ	0xFE1
   326                           
   327                           	psect	cstackBANK0
   328  0000E0                     __pcstackBANK0:
   329                           	opt stack 0
   330  0000E0                     ??_ADC_read_aver:
   331  0000E0                     ??_modbus_rhr_answer:
   332  0000E0                     ??_modbus_wsr_answer:
   333  0000E0                     ??_modbus_rir_answer:
   334  0000E0                     ??_modbus_rx_CRC_check:
   335                           
   336                           ; 0 bytes @ 0x0
   337  0000E0                     	ds	3
   338  0000E3                     _modbus_wsr_answer$1207:
   339                           	opt stack 0
   340  0000E3                     modbus_rx_CRC_check@CRC16_calc:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x3
   344  0000E3                     	ds	1
   345  0000E4                     _modbus_rhr_answer$1212:
   346                           	opt stack 0
   347  0000E4                     _modbus_rir_answer$1218:
   348                           	opt stack 0
   349  0000E4                     ADC_read_aver@ADC_aver:
   350                           	opt stack 0
   351                           
   352                           ; 4 bytes @ 0x4
   353  0000E4                     	ds	1
   354  0000E5                     _modbus_wsr_answer$1210:
   355                           	opt stack 0
   356  0000E5                     _modbus_rx_CRC_check$1227:
   357                           	opt stack 0
   358                           
   359                           ; 2 bytes @ 0x5
   360  0000E5                     	ds	1
   361  0000E6                     _modbus_rhr_answer$1215:
   362                           	opt stack 0
   363  0000E6                     _modbus_rir_answer$1221:
   364                           	opt stack 0
   365                           
   366                           ; 2 bytes @ 0x6
   367  0000E6                     	ds	1
   368  0000E7                     modbus_rx_CRC_check@ans:
   369                           	opt stack 0
   370                           
   371                           ; 1 bytes @ 0x7
   372  0000E7                     	ds	1
   373  0000E8                     modbus_rhr_answer@j:
   374                           	opt stack 0
   375  0000E8                     modbus_rir_answer@i:
   376                           	opt stack 0
   377  0000E8                     modbus_rx_CRC_check@modbus_cmd:
   378                           	opt stack 0
   379  0000E8                     ADC_read_aver@i:
   380                           	opt stack 0
   381                           
   382                           ; 2 bytes @ 0x8
   383  0000E8                     	ds	1
   384  0000E9                     modbus_rhr_answer@i:
   385                           	opt stack 0
   386  0000E9                     modbus_rir_answer@i_1222:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x9
   390  0000E9                     	ds	1
   391  0000EA                     ??_Meas_perform:
   392  0000EA                     modbus_rhr_answer@cnt:
   393                           	opt stack 0
   394  0000EA                     modbus_rir_answer@cnt:
   395                           	opt stack 0
   396                           
   397                           ; 1 bytes @ 0xA
   398  0000EA                     	ds	1
   399  0000EB                     ??_modbus_poll:
   400                           
   401                           ; 0 bytes @ 0xB
   402  0000EB                     	ds	2
   403                           tblptru	equ	0xFF8
   404                           tblptrh	equ	0xFF7
   405                           tblptrl	equ	0xFF6
   406                           tablat	equ	0xFF5
   407                           postinc0	equ	0xFEE
   408                           wreg	equ	0xFE8
   409                           postdec1	equ	0xFE5
   410                           fsr1h	equ	0xFE2
   411                           fsr1l	equ	0xFE1
   412                           
   413                           	psect	cstackCOMRAM
   414  00002E                     __pcstackCOMRAM:
   415                           	opt stack 0
   416  00002E                     modbus_get_byte@byte:
   417                           	opt stack 0
   418                           
   419                           ; 1 bytes @ 0x0
   420  00002E                     	ds	1
   421  00002F                     ??_ISR:
   422                           
   423                           ; 0 bytes @ 0x1
   424  00002F                     	ds	14
   425  00003D                     ?_get_wr_reg_addr:
   426                           	opt stack 0
   427  00003D                     ?_get_wr_reg_val:
   428                           	opt stack 0
   429  00003D                     ?_ADC_read:
   430                           	opt stack 0
   431  00003D                     ?_modbus_CRC16:
   432                           	opt stack 0
   433  00003D                     ?___lwdiv:
   434                           	opt stack 0
   435  00003D                     ?___lldiv:
   436                           	opt stack 0
   437  00003D                     MX_set_ch@ch:
   438                           	opt stack 0
   439  00003D                     UART_init@bd_rate_code:
   440                           	opt stack 0
   441  00003D                     UART_send_byte@byte:
   442                           	opt stack 0
   443  00003D                     delay_ms@ms:
   444                           	opt stack 0
   445  00003D                     modbus_CRC16@buf:
   446                           	opt stack 0
   447  00003D                     modbus_reset@i:
   448                           	opt stack 0
   449  00003D                     holding_reg_write@red_addr:
   450                           	opt stack 0
   451  00003D                     ___lwdiv@dividend:
   452                           	opt stack 0
   453  00003D                     ___lldiv@dividend:
   454                           	opt stack 0
   455                           
   456                           ; 4 bytes @ 0xF
   457  00003D                     	ds	2
   458  00003F                     ??_delay_ms:
   459  00003F                     ??_ADC_read:
   460  00003F                     set_modbus_id@newID:
   461                           	opt stack 0
   462  00003F                     modbus_CRC16@len:
   463                           	opt stack 0
   464  00003F                     holding_reg_write@value:
   465                           	opt stack 0
   466  00003F                     ___lwdiv@divisor:
   467                           	opt stack 0
   468                           
   469                           ; 2 bytes @ 0x11
   470  00003F                     	ds	2
   471  000041                     ??_holding_reg_write:
   472  000041                     ??_modbus_CRC16:
   473  000041                     ADC_read@ADC_result:
   474                           	opt stack 0
   475  000041                     ___lwdiv@quotient:
   476                           	opt stack 0
   477  000041                     ___lldiv@divisor:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x13
   481  000041                     	ds	2
   482  000043                     ___lwdiv@counter:
   483                           	opt stack 0
   484                           
   485                           ; 1 bytes @ 0x15
   486  000043                     	ds	2
   487  000045                     ___lldiv@quotient:
   488                           	opt stack 0
   489                           
   490                           ; 4 bytes @ 0x17
   491  000045                     	ds	3
   492  000048                     modbus_CRC16@pos:
   493                           	opt stack 0
   494                           
   495                           ; 2 bytes @ 0x1A
   496  000048                     	ds	1
   497  000049                     ___lldiv@counter:
   498                           	opt stack 0
   499                           
   500                           ; 1 bytes @ 0x1B
   501  000049                     	ds	1
   502  00004A                     ?_ADC_read_aver:
   503                           	opt stack 0
   504  00004A                     modbus_CRC16@i:
   505                           	opt stack 0
   506  00004A                     ADC_read_aver@aver_size:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x1C
   510  00004A                     	ds	2
   511  00004C                     modbus_CRC16@crc:
   512                           	opt stack 0
   513                           
   514                           ; 2 bytes @ 0x1E
   515  00004C                     	ds	2
   516  00004E                     Meas_perform@i:
   517                           	opt stack 0
   518  00004E                     modbus_get_poll@rx_cmd_code:
   519                           	opt stack 0
   520                           
   521                           ; 1 bytes @ 0x20
   522  00004E                     	ds	1
   523  00004F                     tblptru	equ	0xFF8
   524                           tblptrh	equ	0xFF7
   525                           tblptrl	equ	0xFF6
   526                           tablat	equ	0xFF5
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           postdec1	equ	0xFE5
   530                           fsr1h	equ	0xFE2
   531                           fsr1l	equ	0xFE1
   532                           
   533                           ; 0 bytes @ 0x21
   534 ;;
   535 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   536 ;;
   537 ;; *************** function _main *****************
   538 ;; Defined at:
   539 ;;		line 228 in file "src/ToF MPD HVCMM.c"
   540 ;; Parameters:    Size  Location     Type
   541 ;;		None
   542 ;; Auto vars:     Size  Location     Type
   543 ;;		None
   544 ;; Return value:  Size  Location     Type
   545 ;;		None               void
   546 ;; Registers used:
   547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   548 ;; Tracked objects:
   549 ;;		On entry : 0/0
   550 ;;		On exit  : 0/0
   551 ;;		Unchanged: 0/0
   552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   557 ;;Total ram usage:        0 bytes
   558 ;; Hardware stack levels required when called:    6
   559 ;; This function calls:
   560 ;;		_ADC_Init
   561 ;;		_GPIO_init
   562 ;;		_Interrupt_init
   563 ;;		_Meas_perform
   564 ;;		_modbus_init
   565 ;;		_modbus_poll
   566 ;;		_set_modbus_id
   567 ;; This function is called by:
   568 ;;		Startup code after reset
   569 ;; This function uses a non-reentrant model
   570 ;;
   571                           
   572                           	psect	text0
   573  001CC8                     __ptext0:
   574                           	opt stack 0
   575  001CC8                     _main:
   576                           	opt stack 25
   577                           
   578                           ;ToF MPD HVCMM.c: 230: GPIO_init();
   579                           
   580                           ; BSR set to: 0
   581                           ;incstack = 0
   582  001CC8  EC85  F00E         	call	_GPIO_init	;wreg free
   583                           
   584                           ;ToF MPD HVCMM.c: 231: ADC_Init();
   585  001CCC  EC38  F00E         	call	_ADC_Init	;wreg free
   586                           
   587                           ;ToF MPD HVCMM.c: 233: modbus_init();
   588  001CD0  ECBB  F00E         	call	_modbus_init	;wreg free
   589                           
   590                           ;ToF MPD HVCMM.c: 234: set_modbus_id(10);
   591  001CD4  0E0A               	movlw	10
   592  001CD6  ECB5  F00E         	call	_set_modbus_id
   593                           
   594                           ;ToF MPD HVCMM.c: 236: Interrupt_init();
   595  001CDA  ECAE  F00E         	call	_Interrupt_init	;wreg free
   596                           
   597                           ;ToF MPD HVCMM.c: 238: LATBbits.LATB4 = 1;
   598  001CDE  888A               	bsf	3978,4,c	;volatile
   599  001CE0                     l2090:
   600                           
   601                           ;ToF MPD HVCMM.c: 241: {
   602                           ;ToF MPD HVCMM.c: 242: Meas_perform();
   603  001CE0  EC01  F00B         	call	_Meas_perform	;wreg free
   604                           
   605                           ;ToF MPD HVCMM.c: 243: modbus_poll();
   606  001CE4  EC4A  F00A         	call	_modbus_poll	;wreg free
   607  001CE8  D7FB               	goto	l2090
   608  001CEA                     __end_of_main:
   609                           	opt stack 0
   610                           tblptru	equ	0xFF8
   611                           tblptrh	equ	0xFF7
   612                           tblptrl	equ	0xFF6
   613                           tablat	equ	0xFF5
   614                           postinc0	equ	0xFEE
   615                           wreg	equ	0xFE8
   616                           postdec1	equ	0xFE5
   617                           fsr1h	equ	0xFE2
   618                           fsr1l	equ	0xFE1
   619                           
   620 ;; *************** function _set_modbus_id *****************
   621 ;; Defined at:
   622 ;;		line 472 in file "src/c/dialtek_modbus.c"
   623 ;; Parameters:    Size  Location     Type
   624 ;;  newID           1    wreg     unsigned char 
   625 ;; Auto vars:     Size  Location     Type
   626 ;;  newID           1   17[COMRAM] unsigned char 
   627 ;; Return value:  Size  Location     Type
   628 ;;		None               void
   629 ;; Registers used:
   630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   631 ;; Tracked objects:
   632 ;;		On entry : 0/0
   633 ;;		On exit  : 0/0
   634 ;;		Unchanged: 0/0
   635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   637 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   639 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   640 ;;Total ram usage:        1 bytes
   641 ;; Hardware stack levels used:    1
   642 ;; Hardware stack levels required when called:    3
   643 ;; This function calls:
   644 ;;		_modbus_reset
   645 ;; This function is called by:
   646 ;;		_main
   647 ;; This function uses a non-reentrant model
   648 ;;
   649                           
   650                           	psect	text1
   651  001D6A                     __ptext1:
   652                           	opt stack 0
   653  001D6A                     _set_modbus_id:
   654                           	opt stack 27
   655                           
   656                           ;incstack = 0
   657                           ;set_modbus_id@newID stored from wreg
   658  001D6A  6E3F               	movwf	set_modbus_id@newID,c
   659                           
   660                           ;dialtek_modbus.c: 474: dev_id = newID;
   661  001D6C  C03F  F050         	movff	set_modbus_id@newID,_dev_id
   662                           
   663                           ;dialtek_modbus.c: 475: modbus_reset();
   664  001D70  ECF8  F00D         	call	_modbus_reset	;wreg free
   665  001D74  0012               	return	
   666  001D76                     __end_of_set_modbus_id:
   667                           	opt stack 0
   668                           tblptru	equ	0xFF8
   669                           tblptrh	equ	0xFF7
   670                           tblptrl	equ	0xFF6
   671                           tablat	equ	0xFF5
   672                           postinc0	equ	0xFEE
   673                           wreg	equ	0xFE8
   674                           postdec1	equ	0xFE5
   675                           fsr1h	equ	0xFE2
   676                           fsr1l	equ	0xFE1
   677                           
   678 ;; *************** function _modbus_poll *****************
   679 ;; Defined at:
   680 ;;		line 140 in file "src/ToF MPD HVCMM.c"
   681 ;; Parameters:    Size  Location     Type
   682 ;;		None
   683 ;; Auto vars:     Size  Location     Type
   684 ;;		None
   685 ;; Return value:  Size  Location     Type
   686 ;;		None               void
   687 ;; Registers used:
   688 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : 0/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   696 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   697 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   698 ;;Total ram usage:        2 bytes
   699 ;; Hardware stack levels used:    1
   700 ;; Hardware stack levels required when called:    5
   701 ;; This function calls:
   702 ;;		_MX_set_ch
   703 ;;		_delay_ms
   704 ;;		_get_wr_reg_addr
   705 ;;		_get_wr_reg_val
   706 ;;		_holding_reg_write
   707 ;;		_modbus_get_poll
   708 ;;		_modbus_rhr_answer
   709 ;;		_modbus_rir_answer
   710 ;;		_modbus_wsr_answer
   711 ;; This function is called by:
   712 ;;		_main
   713 ;; This function uses a non-reentrant model
   714 ;;
   715                           
   716                           	psect	text2
   717  001494                     __ptext2:
   718                           	opt stack 0
   719  001494                     _modbus_poll:
   720                           	opt stack 25
   721                           
   722                           ;ToF MPD HVCMM.c: 144: switch( modbus_get_poll() )
   723                           
   724                           ;incstack = 0
   725  001494  D0AA               	goto	l2072
   726  001496                     l98:
   727                           
   728                           ;ToF MPD HVCMM.c: 150: LATBbits.LATB4 = 1;
   729  001496  888A               	bsf	3978,4,c	;volatile
   730                           
   731                           ;ToF MPD HVCMM.c: 161: holding_reg_write(0, V_Mx_Ch[0]);
   732  001498  0E00               	movlw	0
   733  00149A  6E3E               	movwf	holding_reg_write@red_addr+1,c
   734  00149C  0E00               	movlw	0
   735  00149E  6E3D               	movwf	holding_reg_write@red_addr,c
   736  0014A0  C00B  F03F         	movff	_V_Mx_Ch,holding_reg_write@value
   737  0014A4  C00C  F040         	movff	_V_Mx_Ch+1,holding_reg_write@value+1
   738  0014A8  EC52  F00E         	call	_holding_reg_write	;wreg free
   739                           
   740                           ;ToF MPD HVCMM.c: 162: holding_reg_write(1, V_Mx_Ch[1]);
   741  0014AC  0E00               	movlw	0
   742  0014AE  6E3E               	movwf	holding_reg_write@red_addr+1,c
   743  0014B0  0E01               	movlw	1
   744  0014B2  6E3D               	movwf	holding_reg_write@red_addr,c
   745  0014B4  C00D  F03F         	movff	_V_Mx_Ch+2,holding_reg_write@value
   746  0014B8  C00E  F040         	movff	_V_Mx_Ch+3,holding_reg_write@value+1
   747  0014BC  EC52  F00E         	call	_holding_reg_write	;wreg free
   748                           
   749                           ;ToF MPD HVCMM.c: 163: holding_reg_write(2, V_Mx_Ch[2]);
   750  0014C0  0E00               	movlw	0
   751  0014C2  6E3E               	movwf	holding_reg_write@red_addr+1,c
   752  0014C4  0E02               	movlw	2
   753  0014C6  6E3D               	movwf	holding_reg_write@red_addr,c
   754  0014C8  C00F  F03F         	movff	_V_Mx_Ch+4,holding_reg_write@value
   755  0014CC  C010  F040         	movff	_V_Mx_Ch+5,holding_reg_write@value+1
   756  0014D0  EC52  F00E         	call	_holding_reg_write	;wreg free
   757                           
   758                           ;ToF MPD HVCMM.c: 164: holding_reg_write(3, V_Mx_Ch[3]);
   759  0014D4  0E00               	movlw	0
   760  0014D6  6E3E               	movwf	holding_reg_write@red_addr+1,c
   761  0014D8  0E03               	movlw	3
   762  0014DA  6E3D               	movwf	holding_reg_write@red_addr,c
   763  0014DC  C011  F03F         	movff	_V_Mx_Ch+6,holding_reg_write@value
   764  0014E0  C012  F040         	movff	_V_Mx_Ch+7,holding_reg_write@value+1
   765  0014E4  EC52  F00E         	call	_holding_reg_write	;wreg free
   766                           
   767                           ;ToF MPD HVCMM.c: 165: holding_reg_write(4, V_Mx_Ch[4]);
   768  0014E8  0E00               	movlw	0
   769  0014EA  6E3E               	movwf	holding_reg_write@red_addr+1,c
   770  0014EC  0E04               	movlw	4
   771  0014EE  6E3D               	movwf	holding_reg_write@red_addr,c
   772  0014F0  C013  F03F         	movff	_V_Mx_Ch+8,holding_reg_write@value
   773  0014F4  C014  F040         	movff	_V_Mx_Ch+9,holding_reg_write@value+1
   774  0014F8  EC52  F00E         	call	_holding_reg_write	;wreg free
   775                           
   776                           ;ToF MPD HVCMM.c: 167: holding_reg_write(5, I_Mx_Ch[0]);
   777  0014FC  0E00               	movlw	0
   778  0014FE  6E3E               	movwf	holding_reg_write@red_addr+1,c
   779  001500  0E05               	movlw	5
   780  001502  6E3D               	movwf	holding_reg_write@red_addr,c
   781  001504  C001  F03F         	movff	_I_Mx_Ch,holding_reg_write@value
   782  001508  C002  F040         	movff	_I_Mx_Ch+1,holding_reg_write@value+1
   783  00150C  EC52  F00E         	call	_holding_reg_write	;wreg free
   784                           
   785                           ;ToF MPD HVCMM.c: 168: holding_reg_write(6, I_Mx_Ch[1]);
   786  001510  0E00               	movlw	0
   787  001512  6E3E               	movwf	holding_reg_write@red_addr+1,c
   788  001514  0E06               	movlw	6
   789  001516  6E3D               	movwf	holding_reg_write@red_addr,c
   790  001518  C003  F03F         	movff	_I_Mx_Ch+2,holding_reg_write@value
   791  00151C  C004  F040         	movff	_I_Mx_Ch+3,holding_reg_write@value+1
   792  001520  EC52  F00E         	call	_holding_reg_write	;wreg free
   793                           
   794                           ;ToF MPD HVCMM.c: 169: holding_reg_write(7, I_Mx_Ch[2]);
   795  001524  0E00               	movlw	0
   796  001526  6E3E               	movwf	holding_reg_write@red_addr+1,c
   797  001528  0E07               	movlw	7
   798  00152A  6E3D               	movwf	holding_reg_write@red_addr,c
   799  00152C  C005  F03F         	movff	_I_Mx_Ch+4,holding_reg_write@value
   800  001530  C006  F040         	movff	_I_Mx_Ch+5,holding_reg_write@value+1
   801  001534  EC52  F00E         	call	_holding_reg_write	;wreg free
   802                           
   803                           ;ToF MPD HVCMM.c: 170: holding_reg_write(8, I_Mx_Ch[3]);
   804  001538  0E00               	movlw	0
   805  00153A  6E3E               	movwf	holding_reg_write@red_addr+1,c
   806  00153C  0E08               	movlw	8
   807  00153E  6E3D               	movwf	holding_reg_write@red_addr,c
   808  001540  C007  F03F         	movff	_I_Mx_Ch+6,holding_reg_write@value
   809  001544  C008  F040         	movff	_I_Mx_Ch+7,holding_reg_write@value+1
   810  001548  EC52  F00E         	call	_holding_reg_write	;wreg free
   811                           
   812                           ;ToF MPD HVCMM.c: 171: holding_reg_write(9, I_Mx_Ch[4]);
   813  00154C  0E00               	movlw	0
   814  00154E  6E3E               	movwf	holding_reg_write@red_addr+1,c
   815  001550  0E09               	movlw	9
   816  001552  6E3D               	movwf	holding_reg_write@red_addr,c
   817  001554  C009  F03F         	movff	_I_Mx_Ch+8,holding_reg_write@value
   818  001558  C00A  F040         	movff	_I_Mx_Ch+9,holding_reg_write@value+1
   819  00155C  EC52  F00E         	call	_holding_reg_write	;wreg free
   820                           
   821                           ;ToF MPD HVCMM.c: 172: holding_reg_write(10, I_total);
   822  001560  0E00               	movlw	0
   823  001562  6E3E               	movwf	holding_reg_write@red_addr+1,c
   824  001564  0E0A               	movlw	10
   825  001566  6E3D               	movwf	holding_reg_write@red_addr,c
   826  001568  C017  F03F         	movff	_I_total,holding_reg_write@value
   827  00156C  C018  F040         	movff	_I_total+1,holding_reg_write@value+1
   828  001570  EC52  F00E         	call	_holding_reg_write	;wreg free
   829                           
   830                           ;ToF MPD HVCMM.c: 173: holding_reg_write(11, zero_lvl);
   831  001574  0E00               	movlw	0
   832  001576  6E3E               	movwf	holding_reg_write@red_addr+1,c
   833  001578  0E0B               	movlw	11
   834  00157A  6E3D               	movwf	holding_reg_write@red_addr,c
   835  00157C  C029  F03F         	movff	_zero_lvl,holding_reg_write@value
   836  001580  C02A  F040         	movff	_zero_lvl+1,holding_reg_write@value+1
   837  001584  EC52  F00E         	call	_holding_reg_write	;wreg free
   838                           
   839                           ;ToF MPD HVCMM.c: 178: modbus_rhr_answer();
   840  001588  EC84  F008         	call	_modbus_rhr_answer	;wreg free
   841                           
   842                           ;ToF MPD HVCMM.c: 180: delay_ms(10);
   843  00158C  0E00               	movlw	0
   844  00158E  6E3E               	movwf	delay_ms@ms+1,c
   845  001590  0E0A               	movlw	10
   846  001592  6E3D               	movwf	delay_ms@ms,c
   847  001594  EC75  F00E         	call	_delay_ms	;wreg free
   848                           
   849                           ;ToF MPD HVCMM.c: 181: LATBbits.LATB4 = 0;
   850  001598  988A               	bcf	3978,4,c	;volatile
   851                           
   852                           ;ToF MPD HVCMM.c: 183: break;
   853  00159A  0012               	return	
   854  00159C                     l2054:
   855                           
   856                           ;ToF MPD HVCMM.c: 186: modbus_wsr_answer();
   857  00159C  EC9D  F00B         	call	_modbus_wsr_answer	;wreg free
   858                           
   859                           ;ToF MPD HVCMM.c: 191: LATBbits.LATB4 = 1;
   860  0015A0  888A               	bsf	3978,4,c	;volatile
   861                           
   862                           ;ToF MPD HVCMM.c: 193: wr_reg_addr = get_wr_reg_addr();
   863  0015A2  ECC6  F00E         	call	_get_wr_reg_addr	;wreg free
   864  0015A6  C03D  F027         	movff	?_get_wr_reg_addr,_wr_reg_addr
   865  0015AA  C03E  F028         	movff	?_get_wr_reg_addr+1,_wr_reg_addr+1
   866                           
   867                           ;ToF MPD HVCMM.c: 194: RegisterValue = get_wr_reg_val();
   868  0015AE  ECC1  F00E         	call	_get_wr_reg_val	;wreg free
   869  0015B2  C03D  F019         	movff	?_get_wr_reg_val,_RegisterValue
   870  0015B6  C03E  F01A         	movff	?_get_wr_reg_val+1,_RegisterValue+1
   871                           
   872                           ;ToF MPD HVCMM.c: 196: switch(wr_reg_addr)
   873  0015BA  D004               	goto	l2066
   874  0015BC                     l2062:
   875                           
   876                           ;ToF MPD HVCMM.c: 199: MX_set_ch((unsigned char)RegisterValue);
   877  0015BC  5019               	movf	_RegisterValue,w,c
   878  0015BE  ECA1  F00D         	call	_MX_set_ch
   879                           
   880                           ;ToF MPD HVCMM.c: 200: break;
   881  0015C2  D00E               	goto	l103
   882  0015C4                     l2066:
   883  0015C4  C027  F0EB         	movff	_wr_reg_addr,??_modbus_poll
   884  0015C8  C028  F0EC         	movff	_wr_reg_addr+1,??_modbus_poll+1
   885                           
   886                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   887                           ; Switch size 1, requested type "space"
   888                           ; Number of cases is 1, Range of values is 0 to 0
   889                           ; switch strategies available:
   890                           ; Name         Instructions Cycles
   891                           ; simple_byte            4     3 (average)
   892                           ;	Chosen strategy is simple_byte
   893  0015CC  0100               	movlb	0	; () banked
   894  0015CE  51EC               	movf	(??_modbus_poll+1)& (0+255),w,b
   895  0015D0  0A00               	xorlw	0	; case 0
   896  0015D2  A4D8               	btfss	status,2,c
   897  0015D4  D005               	goto	l103
   898                           
   899                           ; BSR set to: 0
   900                           ; Switch size 1, requested type "space"
   901                           ; Number of cases is 1, Range of values is 3 to 3
   902                           ; switch strategies available:
   903                           ; Name         Instructions Cycles
   904                           ; simple_byte            4     3 (average)
   905                           ;	Chosen strategy is simple_byte
   906  0015D6  0100               	movlb	0	; () banked
   907  0015D8  51EB               	movf	??_modbus_poll& (0+255),w,b
   908  0015DA  0A03               	xorlw	3	; case 3
   909  0015DC  B4D8               	btfsc	status,2,c
   910  0015DE  D7EE               	goto	l2062
   911  0015E0                     l103:
   912                           
   913                           ;ToF MPD HVCMM.c: 208: LATBbits.LATB4 = 0;
   914  0015E0  988A               	bcf	3978,4,c	;volatile
   915                           
   916                           ;ToF MPD HVCMM.c: 209: break;
   917  0015E2  0012               	return	
   918  0015E4                     l2068:
   919                           
   920                           ;ToF MPD HVCMM.c: 220: modbus_rir_answer();
   921  0015E4  EC83  F007         	call	_modbus_rir_answer	;wreg free
   922                           
   923                           ;ToF MPD HVCMM.c: 222: break;
   924  0015E8  0012               	return	
   925  0015EA                     l2072:
   926  0015EA  ECFC  F00C         	call	_modbus_get_poll	;wreg free
   927                           
   928                           ; Switch size 1, requested type "space"
   929                           ; Number of cases is 3, Range of values is 3 to 6
   930                           ; switch strategies available:
   931                           ; Name         Instructions Cycles
   932                           ; simple_byte           10     6 (average)
   933                           ;	Chosen strategy is simple_byte
   934  0015EE  0A03               	xorlw	3	; case 3
   935  0015F0  B4D8               	btfsc	status,2,c
   936  0015F2  D751               	goto	l98
   937  0015F4  0A07               	xorlw	7	; case 4
   938  0015F6  B4D8               	btfsc	status,2,c
   939  0015F8  D7F5               	goto	l2068
   940  0015FA  0A02               	xorlw	2	; case 6
   941  0015FC  A4D8               	btfss	status,2,c
   942  0015FE  0012               	return	
   943  001600  D7CD               	goto	l2054
   944  001602                     __end_of_modbus_poll:
   945                           	opt stack 0
   946                           tblptru	equ	0xFF8
   947                           tblptrh	equ	0xFF7
   948                           tblptrl	equ	0xFF6
   949                           tablat	equ	0xFF5
   950                           postinc0	equ	0xFEE
   951                           wreg	equ	0xFE8
   952                           postdec1	equ	0xFE5
   953                           fsr1h	equ	0xFE2
   954                           fsr1l	equ	0xFE1
   955                           status	equ	0xFD8
   956                           
   957 ;; *************** function _modbus_wsr_answer *****************
   958 ;; Defined at:
   959 ;;		line 69 in file "src/c/dialtek_modbus.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;		None
   962 ;; Auto vars:     Size  Location     Type
   963 ;;		None
   964 ;; Return value:  Size  Location     Type
   965 ;;		None               void
   966 ;; Registers used:
   967 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   968 ;; Tracked objects:
   969 ;;		On entry : 0/0
   970 ;;		On exit  : 0/0
   971 ;;		Unchanged: 0/0
   972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   974 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   975 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   976 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   977 ;;Total ram usage:        7 bytes
   978 ;; Hardware stack levels used:    1
   979 ;; Hardware stack levels required when called:    3
   980 ;; This function calls:
   981 ;;		_UART_send_byte
   982 ;;		_modbus_CRC16
   983 ;; This function is called by:
   984 ;;		_modbus_poll
   985 ;; This function uses a non-reentrant model
   986 ;;
   987                           
   988                           	psect	text3
   989  00173A                     __ptext3:
   990                           	opt stack 0
   991  00173A                     _modbus_wsr_answer:
   992                           	opt stack 26
   993                           
   994                           ;dialtek_modbus.c: 74: crc_buf[0] = (modbus_id == dev_id) ? dev_id : com_dev_id;
   995                           
   996                           ;incstack = 0
   997  00173A  502C               	movf	_modbus_id,w,c
   998  00173C  1850               	xorwf	_dev_id,w,c
   999  00173E  B4D8               	btfsc	status,2,c
  1000  001740  D004               	goto	l236
  1001  001742  0100               	movlb	0	; () banked
  1002  001744  C04F  F0E3         	movff	_com_dev_id,_modbus_wsr_answer$1207
  1003  001748  D003               	goto	L1
  1004  00174A                     l236:
  1005  00174A  0100               	movlb	0	; () banked
  1006  00174C  C050  F0E3         	movff	_dev_id,_modbus_wsr_answer$1207
  1007  001750                     L1:
  1008  001750  0100               	movlb	0	; () banked
  1009  001752  6BE4               	clrf	(_modbus_wsr_answer$1207+1)& (0+255),b
  1010                           
  1011                           ; BSR set to: 0
  1012  001754  0100               	movlb	0	; () banked
  1013  001756  C0E3  F2FA         	movff	_modbus_wsr_answer$1207,_crc_buf
  1014                           
  1015                           ;dialtek_modbus.c: 75: crc_buf[1] = (unsigned char) (unsigned char)0x06;
  1016  00175A  0E06               	movlw	6
  1017  00175C  CFE8 F2FB          	movff	wreg,_crc_buf+1
  1018                           
  1019                           ; BSR set to: 0
  1020                           ;dialtek_modbus.c: 76: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  1021  001760  C020  F0E0         	movff	_modbus_reg_addr+1,??_modbus_wsr_answer
  1022  001764  C0E0  F0E1         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1023  001768  0100               	movlb	0	; () banked
  1024  00176A  6BE2               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1025  00176C  C0E1  F2FC         	movff	??_modbus_wsr_answer+1,_crc_buf+2
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;dialtek_modbus.c: 77: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  1029  001770  EE22  F0FD         	lfsr	2,_crc_buf+3
  1030  001774  C01F  FFDF         	movff	_modbus_reg_addr,indf2
  1031                           
  1032                           ; BSR set to: 0
  1033                           ;dialtek_modbus.c: 78: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  1034  001778  C022  F0E0         	movff	_reg_wr_data+1,??_modbus_wsr_answer
  1035  00177C  C0E0  F0E1         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1036  001780  0100               	movlb	0	; () banked
  1037  001782  6BE2               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1038  001784  C0E1  F2FE         	movff	??_modbus_wsr_answer+1,_crc_buf+4
  1039                           
  1040                           ;dialtek_modbus.c: 79: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  1041  001788  EE22  F0FF         	lfsr	2,_crc_buf+5
  1042  00178C  C021  FFDF         	movff	_reg_wr_data,indf2
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;dialtek_modbus.c: 80: CRC16 = modbus_CRC16(crc_buf, 6);
  1046  001790  0E02               	movlw	high _crc_buf
  1047  001792  6E3E               	movwf	modbus_CRC16@buf+1,c
  1048  001794  0EFA               	movlw	low _crc_buf
  1049  001796  6E3D               	movwf	modbus_CRC16@buf,c
  1050  001798  0E00               	movlw	0
  1051  00179A  6E40               	movwf	modbus_CRC16@len+1,c
  1052  00179C  0E06               	movlw	6
  1053  00179E  6E3F               	movwf	modbus_CRC16@len,c
  1054  0017A0  EC6F  F00C         	call	_modbus_CRC16	;wreg free
  1055  0017A4  C03D  F015         	movff	?_modbus_CRC16,_CRC16
  1056  0017A8  C03E  F016         	movff	?_modbus_CRC16+1,_CRC16+1
  1057                           
  1058                           ;dialtek_modbus.c: 85: UART_send_byte((modbus_id == dev_id) ? dev_id : com_dev_id);
  1059  0017AC  502C               	movf	_modbus_id,w,c
  1060  0017AE  1850               	xorwf	_dev_id,w,c
  1061  0017B0  B4D8               	btfsc	status,2,c
  1062  0017B2  D004               	goto	l240
  1063  0017B4  0100               	movlb	0	; () banked
  1064  0017B6  C04F  F0E5         	movff	_com_dev_id,_modbus_wsr_answer$1210
  1065  0017BA  D003               	goto	L2
  1066  0017BC                     l240:
  1067  0017BC  0100               	movlb	0	; () banked
  1068  0017BE  C050  F0E5         	movff	_dev_id,_modbus_wsr_answer$1210
  1069  0017C2                     L2:
  1070  0017C2  0100               	movlb	0	; () banked
  1071  0017C4  6BE6               	clrf	(_modbus_wsr_answer$1210+1)& (0+255),b
  1072                           
  1073                           ; BSR set to: 0
  1074                           
  1075                           ; BSR set to: 0
  1076  0017C6  0100               	movlb	0	; () banked
  1077  0017C8  51E5               	movf	_modbus_wsr_answer$1210& (0+255),w,b
  1078  0017CA  ECA1  F00E         	call	_UART_send_byte
  1079                           
  1080                           ;dialtek_modbus.c: 86: UART_send_byte((unsigned char)(unsigned char)0x06);
  1081  0017CE  0E06               	movlw	6
  1082  0017D0  ECA1  F00E         	call	_UART_send_byte
  1083                           
  1084                           ;dialtek_modbus.c: 87: UART_send_byte((unsigned char)(modbus_reg_addr >> 8));
  1085  0017D4  C020  F0E0         	movff	_modbus_reg_addr+1,??_modbus_wsr_answer
  1086  0017D8  C0E0  F0E1         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1087  0017DC  0100               	movlb	0	; () banked
  1088  0017DE  6BE2               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1089  0017E0  0100               	movlb	0	; () banked
  1090  0017E2  51E1               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1091  0017E4  ECA1  F00E         	call	_UART_send_byte
  1092                           
  1093                           ;dialtek_modbus.c: 88: UART_send_byte((unsigned char)(modbus_reg_addr & 0x00ff));
  1094  0017E8  501F               	movf	_modbus_reg_addr,w,c
  1095  0017EA  ECA1  F00E         	call	_UART_send_byte
  1096                           
  1097                           ;dialtek_modbus.c: 89: UART_send_byte((unsigned char)(reg_wr_data >> 8));
  1098  0017EE  C022  F0E0         	movff	_reg_wr_data+1,??_modbus_wsr_answer
  1099  0017F2  C0E0  F0E1         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1100  0017F6  0100               	movlb	0	; () banked
  1101  0017F8  6BE2               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1102  0017FA  0100               	movlb	0	; () banked
  1103  0017FC  51E1               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1104  0017FE  ECA1  F00E         	call	_UART_send_byte
  1105                           
  1106                           ;dialtek_modbus.c: 90: UART_send_byte((unsigned char)(reg_wr_data & 0x00ff));
  1107  001802  5021               	movf	_reg_wr_data,w,c
  1108  001804  ECA1  F00E         	call	_UART_send_byte
  1109                           
  1110                           ;dialtek_modbus.c: 92: UART_send_byte((unsigned char)(CRC16 >> 8));
  1111  001808  C016  F0E0         	movff	_CRC16+1,??_modbus_wsr_answer
  1112  00180C  C0E0  F0E1         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1113  001810  0100               	movlb	0	; () banked
  1114  001812  6BE2               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1115  001814  0100               	movlb	0	; () banked
  1116  001816  51E1               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1117  001818  ECA1  F00E         	call	_UART_send_byte
  1118                           
  1119                           ;dialtek_modbus.c: 93: UART_send_byte((unsigned char)(CRC16 & 0x00ff));
  1120  00181C  5015               	movf	_CRC16,w,c
  1121  00181E  ECA1  F00E         	call	_UART_send_byte
  1122  001822  0012               	return	
  1123  001824                     __end_of_modbus_wsr_answer:
  1124                           	opt stack 0
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           postdec1	equ	0xFE5
  1132                           fsr1h	equ	0xFE2
  1133                           fsr1l	equ	0xFE1
  1134                           indf2	equ	0xFDF
  1135                           status	equ	0xFD8
  1136                           
  1137 ;; *************** function _modbus_rir_answer *****************
  1138 ;; Defined at:
  1139 ;;		line 142 in file "src/c/dialtek_modbus.c"
  1140 ;; Parameters:    Size  Location     Type
  1141 ;;		None
  1142 ;; Auto vars:     Size  Location     Type
  1143 ;;  i               1    9[BANK0 ] unsigned char 
  1144 ;;  i               1    8[BANK0 ] unsigned char 
  1145 ;;  cnt             1   10[BANK0 ] unsigned char 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;		None               void
  1148 ;; Registers used:
  1149 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1156 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1157 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1158 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1159 ;;Total ram usage:       11 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    3
  1162 ;; This function calls:
  1163 ;;		_UART_send_byte
  1164 ;;		_modbus_CRC16
  1165 ;; This function is called by:
  1166 ;;		_modbus_poll
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           	psect	text4
  1171  000F06                     __ptext4:
  1172                           	opt stack 0
  1173  000F06                     _modbus_rir_answer:
  1174                           	opt stack 26
  1175                           
  1176                           ;dialtek_modbus.c: 147: addr_buf_1 = modbus_reg_addr;
  1177                           
  1178                           ;incstack = 0
  1179  000F06  C01F  F01B         	movff	_modbus_reg_addr,_addr_buf_1
  1180  000F0A  C020  F01C         	movff	_modbus_reg_addr+1,_addr_buf_1+1
  1181                           
  1182                           ;dialtek_modbus.c: 148: addr_buf_2 = addr_buf_1;
  1183  000F0E  C01B  F01D         	movff	_addr_buf_1,_addr_buf_2
  1184  000F12  C01C  F01E         	movff	_addr_buf_1+1,_addr_buf_2+1
  1185                           
  1186                           ;dialtek_modbus.c: 150: crc_buf[0] = (modbus_id == dev_id) ? dev_id : com_dev_id;
  1187  000F16  502C               	movf	_modbus_id,w,c
  1188  000F18  1850               	xorwf	_dev_id,w,c
  1189  000F1A  B4D8               	btfsc	status,2,c
  1190  000F1C  D004               	goto	l264
  1191  000F1E  0100               	movlb	0	; () banked
  1192  000F20  C04F  F0E4         	movff	_com_dev_id,_modbus_rir_answer$1218
  1193  000F24  D003               	goto	L3
  1194  000F26                     l264:
  1195  000F26  0100               	movlb	0	; () banked
  1196  000F28  C050  F0E4         	movff	_dev_id,_modbus_rir_answer$1218
  1197  000F2C                     L3:
  1198  000F2C  0100               	movlb	0	; () banked
  1199  000F2E  6BE5               	clrf	(_modbus_rir_answer$1218+1)& (0+255),b
  1200                           
  1201                           ; BSR set to: 0
  1202  000F30  0100               	movlb	0	; () banked
  1203  000F32  C0E4  F2FA         	movff	_modbus_rir_answer$1218,_crc_buf
  1204                           
  1205                           ;dialtek_modbus.c: 151: crc_buf[1] = (unsigned char)0x04;
  1206  000F36  0E04               	movlw	4
  1207  000F38  CFE8 F2FB          	movff	wreg,_crc_buf+1
  1208                           
  1209                           ; BSR set to: 0
  1210                           ;dialtek_modbus.c: 152: crc_buf[2] = regs2read*2;
  1211  000F3C  90D8               	bcf	status,0,c
  1212  000F3E  3423               	rlcf	_regs2read,w,c
  1213  000F40  0100               	movlb	0	; () banked
  1214  000F42  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1215  000F44  C0E0  F2FC         	movff	??_modbus_rir_answer,_crc_buf+2
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;dialtek_modbus.c: 154: unsigned char cnt = 3;
  1219  000F48  0E03               	movlw	3
  1220  000F4A  0100               	movlb	0	; () banked
  1221  000F4C  6FEA               	movwf	modbus_rir_answer@cnt& (0+255),b
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;dialtek_modbus.c: 156: for(unsigned char i = 0; i < regs2read; i++)
  1225  000F4E  0E00               	movlw	0
  1226  000F50  0100               	movlb	0	; () banked
  1227  000F52  6FE8               	movwf	modbus_rir_answer@i& (0+255),b
  1228  000F54  D047               	goto	l1956
  1229  000F56                     l1950:
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;dialtek_modbus.c: 157: {
  1233                           ;dialtek_modbus.c: 158: crc_buf[cnt++] = (unsigned char)(input_register[addr_buf_1] >> 8
      +                          );
  1234  000F56  0100               	movlb	0	; () banked
  1235  000F58  51EA               	movf	modbus_rir_answer@cnt& (0+255),w,b
  1236  000F5A  0D01               	mullw	1
  1237  000F5C  0EFA               	movlw	low _crc_buf
  1238  000F5E  24F3               	addwf	prodl,w,c
  1239  000F60  6ED9               	movwf	fsr2l,c
  1240  000F62  0E02               	movlw	high _crc_buf
  1241  000F64  20F4               	addwfc	prodh,w,c
  1242  000F66  6EDA               	movwf	fsr2h,c
  1243  000F68  0E00               	movlw	low _input_register
  1244  000F6A  0100               	movlb	0	; () banked
  1245  000F6C  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1246  000F6E  0E02               	movlw	high _input_register
  1247  000F70  6FE1               	movwf	(??_modbus_rir_answer+1)& (0+255),b
  1248  000F72  90D8               	bcf	status,0,c
  1249  000F74  341B               	rlcf	_addr_buf_1,w,c
  1250  000F76  6EE1               	movwf	fsr1l,c
  1251  000F78  341C               	rlcf	_addr_buf_1+1,w,c
  1252  000F7A  6EE2               	movwf	fsr1h,c
  1253  000F7C  0100               	movlb	0	; () banked
  1254  000F7E  51E0               	movf	??_modbus_rir_answer& (0+255),w,b
  1255  000F80  26E1               	addwf	fsr1l,f,c
  1256  000F82  0100               	movlb	0	; () banked
  1257  000F84  51E1               	movf	(??_modbus_rir_answer+1)& (0+255),w,b
  1258  000F86  22E2               	addwfc	fsr1h,f,c
  1259  000F88  CFE6 F0E2          	movff	postinc1,??_modbus_rir_answer+2
  1260  000F8C  CFE5 F0E3          	movff	postdec1,??_modbus_rir_answer+3
  1261  000F90  C0E3  F0E2         	movff	??_modbus_rir_answer+3,??_modbus_rir_answer+2
  1262  000F94  0100               	movlb	0	; () banked
  1263  000F96  6BE3               	clrf	(??_modbus_rir_answer+3)& (0+255),b
  1264  000F98  0100               	movlb	0	; () banked
  1265  000F9A  51E2               	movf	(??_modbus_rir_answer+2)& (0+255),w,b
  1266  000F9C  6EDF               	movwf	indf2,c
  1267                           
  1268                           ; BSR set to: 0
  1269  000F9E  0100               	movlb	0	; () banked
  1270  000FA0  2BEA               	incf	modbus_rir_answer@cnt& (0+255),f,b
  1271                           
  1272                           ; BSR set to: 0
  1273                           ;dialtek_modbus.c: 159: crc_buf[cnt++] = (unsigned char)(input_register[addr_buf_1] & 0x
      +                          00ff);
  1274  000FA2  0E00               	movlw	low _input_register
  1275  000FA4  0100               	movlb	0	; () banked
  1276  000FA6  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1277  000FA8  0E02               	movlw	high _input_register
  1278  000FAA  6FE1               	movwf	(??_modbus_rir_answer+1)& (0+255),b
  1279  000FAC  90D8               	bcf	status,0,c
  1280  000FAE  341B               	rlcf	_addr_buf_1,w,c
  1281  000FB0  6ED9               	movwf	fsr2l,c
  1282  000FB2  341C               	rlcf	_addr_buf_1+1,w,c
  1283  000FB4  6EDA               	movwf	fsr2h,c
  1284  000FB6  0100               	movlb	0	; () banked
  1285  000FB8  51E0               	movf	??_modbus_rir_answer& (0+255),w,b
  1286  000FBA  26D9               	addwf	fsr2l,f,c
  1287  000FBC  0100               	movlb	0	; () banked
  1288  000FBE  51E1               	movf	(??_modbus_rir_answer+1)& (0+255),w,b
  1289  000FC0  22DA               	addwfc	fsr2h,f,c
  1290  000FC2  0100               	movlb	0	; () banked
  1291  000FC4  51EA               	movf	modbus_rir_answer@cnt& (0+255),w,b
  1292  000FC6  0D01               	mullw	1
  1293  000FC8  0EFA               	movlw	low _crc_buf
  1294  000FCA  24F3               	addwf	prodl,w,c
  1295  000FCC  6EE1               	movwf	fsr1l,c
  1296  000FCE  0E02               	movlw	high _crc_buf
  1297  000FD0  20F4               	addwfc	prodh,w,c
  1298  000FD2  6EE2               	movwf	fsr1h,c
  1299  000FD4  CFDF FFE7          	movff	indf2,indf1
  1300  000FD8  0100               	movlb	0	; () banked
  1301  000FDA  2BEA               	incf	modbus_rir_answer@cnt& (0+255),f,b
  1302                           
  1303                           ;dialtek_modbus.c: 160: ++addr_buf_1;
  1304  000FDC  4A1B               	infsnz	_addr_buf_1,f,c
  1305  000FDE  2A1C               	incf	_addr_buf_1+1,f,c
  1306  000FE0  0100               	movlb	0	; () banked
  1307  000FE2  2BE8               	incf	modbus_rir_answer@i& (0+255),f,b
  1308  000FE4                     l1956:
  1309                           
  1310                           ; BSR set to: 0
  1311  000FE4  0100               	movlb	0	; () banked
  1312  000FE6  51E8               	movf	modbus_rir_answer@i& (0+255),w,b
  1313  000FE8  0100               	movlb	0	; () banked
  1314  000FEA  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1315  000FEC  6BE1               	clrf	(??_modbus_rir_answer+1)& (0+255),b
  1316  000FEE  5023               	movf	_regs2read,w,c
  1317  000FF0  0100               	movlb	0	; () banked
  1318  000FF2  5DE0               	subwf	??_modbus_rir_answer& (0+255),w,b
  1319  000FF4  5024               	movf	_regs2read+1,w,c
  1320  000FF6  0100               	movlb	0	; () banked
  1321  000FF8  59E1               	subwfb	(??_modbus_rir_answer+1)& (0+255),w,b
  1322  000FFA  A0D8               	btfss	status,0,c
  1323  000FFC  D7AC               	goto	l1950
  1324                           
  1325                           ; BSR set to: 0
  1326                           ;dialtek_modbus.c: 161: }
  1327                           ;dialtek_modbus.c: 163: CRC16 = modbus_CRC16(crc_buf,(regs2read*2)+3);
  1328                           
  1329                           ; BSR set to: 0
  1330  000FFE  0E02               	movlw	high _crc_buf
  1331  001000  6E3E               	movwf	modbus_CRC16@buf+1,c
  1332  001002  0EFA               	movlw	low _crc_buf
  1333  001004  6E3D               	movwf	modbus_CRC16@buf,c
  1334  001006  C023  F0E0         	movff	_regs2read,??_modbus_rir_answer
  1335  00100A  C024  F0E1         	movff	_regs2read+1,??_modbus_rir_answer+1
  1336  00100E  90D8               	bcf	status,0,c
  1337  001010  0100               	movlb	0	; () banked
  1338  001012  37E0               	rlcf	??_modbus_rir_answer& (0+255),f,b
  1339  001014  37E1               	rlcf	(??_modbus_rir_answer+1)& (0+255),f,b
  1340  001016  0E03               	movlw	3
  1341  001018  0100               	movlb	0	; () banked
  1342  00101A  25E0               	addwf	??_modbus_rir_answer& (0+255),w,b
  1343  00101C  6E3F               	movwf	modbus_CRC16@len,c
  1344  00101E  0E00               	movlw	0
  1345  001020  0100               	movlb	0	; () banked
  1346  001022  21E1               	addwfc	(??_modbus_rir_answer+1)& (0+255),w,b
  1347  001024  6E40               	movwf	modbus_CRC16@len+1,c
  1348  001026  EC6F  F00C         	call	_modbus_CRC16	;wreg free
  1349  00102A  C03D  F015         	movff	?_modbus_CRC16,_CRC16
  1350  00102E  C03E  F016         	movff	?_modbus_CRC16+1,_CRC16+1
  1351                           
  1352                           ;dialtek_modbus.c: 167: UART_send_byte((modbus_id == dev_id) ? dev_id : com_dev_id);
  1353  001032  502C               	movf	_modbus_id,w,c
  1354  001034  1850               	xorwf	_dev_id,w,c
  1355  001036  B4D8               	btfsc	status,2,c
  1356  001038  D004               	goto	l271
  1357  00103A  0100               	movlb	0	; () banked
  1358  00103C  C04F  F0E6         	movff	_com_dev_id,_modbus_rir_answer$1221
  1359  001040  D003               	goto	L4
  1360  001042                     l271:
  1361  001042  0100               	movlb	0	; () banked
  1362  001044  C050  F0E6         	movff	_dev_id,_modbus_rir_answer$1221
  1363  001048                     L4:
  1364  001048  0100               	movlb	0	; () banked
  1365  00104A  6BE7               	clrf	(_modbus_rir_answer$1221+1)& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368                           
  1369                           ; BSR set to: 0
  1370  00104C  0100               	movlb	0	; () banked
  1371  00104E  51E6               	movf	_modbus_rir_answer$1221& (0+255),w,b
  1372  001050  ECA1  F00E         	call	_UART_send_byte
  1373                           
  1374                           ;dialtek_modbus.c: 168: UART_send_byte((unsigned char)(unsigned char)0x04);
  1375  001054  0E04               	movlw	4
  1376  001056  ECA1  F00E         	call	_UART_send_byte
  1377                           
  1378                           ;dialtek_modbus.c: 169: UART_send_byte((unsigned char)regs2read*2);
  1379  00105A  5023               	movf	_regs2read,w,c
  1380  00105C  0D02               	mullw	2
  1381  00105E  50F3               	movf	prodl,w,c
  1382  001060  ECA1  F00E         	call	_UART_send_byte
  1383                           
  1384                           ;dialtek_modbus.c: 171: for(unsigned char i = 0; i < regs2read; i++)
  1385  001064  0E00               	movlw	0
  1386  001066  0100               	movlb	0	; () banked
  1387  001068  6FE9               	movwf	modbus_rir_answer@i_1222& (0+255),b
  1388  00106A  D033               	goto	l1976
  1389  00106C                     l1970:
  1390                           
  1391                           ; BSR set to: 0
  1392                           ;dialtek_modbus.c: 172: {
  1393                           ;dialtek_modbus.c: 173: UART_send_byte((unsigned char)(input_register[addr_buf_2] >> 8))
      +                          ;
  1394  00106C  0E00               	movlw	low _input_register
  1395  00106E  0100               	movlb	0	; () banked
  1396  001070  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1397  001072  0E02               	movlw	high _input_register
  1398  001074  6FE1               	movwf	(??_modbus_rir_answer+1)& (0+255),b
  1399  001076  90D8               	bcf	status,0,c
  1400  001078  341D               	rlcf	_addr_buf_2,w,c
  1401  00107A  6ED9               	movwf	fsr2l,c
  1402  00107C  341E               	rlcf	_addr_buf_2+1,w,c
  1403  00107E  6EDA               	movwf	fsr2h,c
  1404  001080  0100               	movlb	0	; () banked
  1405  001082  51E0               	movf	??_modbus_rir_answer& (0+255),w,b
  1406  001084  26D9               	addwf	fsr2l,f,c
  1407  001086  0100               	movlb	0	; () banked
  1408  001088  51E1               	movf	(??_modbus_rir_answer+1)& (0+255),w,b
  1409  00108A  22DA               	addwfc	fsr2h,f,c
  1410  00108C  CFDE F0E2          	movff	postinc2,??_modbus_rir_answer+2
  1411  001090  CFDD F0E3          	movff	postdec2,??_modbus_rir_answer+3
  1412  001094  C0E3  F0E2         	movff	??_modbus_rir_answer+3,??_modbus_rir_answer+2
  1413  001098  0100               	movlb	0	; () banked
  1414  00109A  6BE3               	clrf	(??_modbus_rir_answer+3)& (0+255),b
  1415  00109C  0100               	movlb	0	; () banked
  1416  00109E  51E2               	movf	(??_modbus_rir_answer+2)& (0+255),w,b
  1417  0010A0  ECA1  F00E         	call	_UART_send_byte
  1418                           
  1419                           ;dialtek_modbus.c: 174: UART_send_byte((unsigned char)(input_register[addr_buf_2] & 0x00
      +                          ff));
  1420  0010A4  0E00               	movlw	low _input_register
  1421  0010A6  0100               	movlb	0	; () banked
  1422  0010A8  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1423  0010AA  0E02               	movlw	high _input_register
  1424  0010AC  6FE1               	movwf	(??_modbus_rir_answer+1)& (0+255),b
  1425  0010AE  90D8               	bcf	status,0,c
  1426  0010B0  341D               	rlcf	_addr_buf_2,w,c
  1427  0010B2  6ED9               	movwf	fsr2l,c
  1428  0010B4  341E               	rlcf	_addr_buf_2+1,w,c
  1429  0010B6  6EDA               	movwf	fsr2h,c
  1430  0010B8  0100               	movlb	0	; () banked
  1431  0010BA  51E0               	movf	??_modbus_rir_answer& (0+255),w,b
  1432  0010BC  26D9               	addwf	fsr2l,f,c
  1433  0010BE  0100               	movlb	0	; () banked
  1434  0010C0  51E1               	movf	(??_modbus_rir_answer+1)& (0+255),w,b
  1435  0010C2  22DA               	addwfc	fsr2h,f,c
  1436  0010C4  50DF               	movf	indf2,w,c
  1437  0010C6  ECA1  F00E         	call	_UART_send_byte
  1438                           
  1439                           ;dialtek_modbus.c: 175: ++addr_buf_2;
  1440  0010CA  4A1D               	infsnz	_addr_buf_2,f,c
  1441  0010CC  2A1E               	incf	_addr_buf_2+1,f,c
  1442  0010CE  0100               	movlb	0	; () banked
  1443  0010D0  2BE9               	incf	modbus_rir_answer@i_1222& (0+255),f,b
  1444  0010D2                     l1976:
  1445                           
  1446                           ; BSR set to: 0
  1447  0010D2  0100               	movlb	0	; () banked
  1448  0010D4  51E9               	movf	modbus_rir_answer@i_1222& (0+255),w,b
  1449  0010D6  0100               	movlb	0	; () banked
  1450  0010D8  6FE0               	movwf	??_modbus_rir_answer& (0+255),b
  1451  0010DA  6BE1               	clrf	(??_modbus_rir_answer+1)& (0+255),b
  1452  0010DC  5023               	movf	_regs2read,w,c
  1453  0010DE  0100               	movlb	0	; () banked
  1454  0010E0  5DE0               	subwf	??_modbus_rir_answer& (0+255),w,b
  1455  0010E2  5024               	movf	_regs2read+1,w,c
  1456  0010E4  0100               	movlb	0	; () banked
  1457  0010E6  59E1               	subwfb	(??_modbus_rir_answer+1)& (0+255),w,b
  1458  0010E8  A0D8               	btfss	status,0,c
  1459  0010EA  D7C0               	goto	l1970
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;dialtek_modbus.c: 176: }
  1463                           ;dialtek_modbus.c: 178: UART_send_byte((unsigned char)(CRC16 >> 8));
  1464                           
  1465                           ; BSR set to: 0
  1466  0010EC  C016  F0E0         	movff	_CRC16+1,??_modbus_rir_answer
  1467  0010F0  C0E0  F0E1         	movff	??_modbus_rir_answer,??_modbus_rir_answer+1
  1468  0010F4  0100               	movlb	0	; () banked
  1469  0010F6  6BE2               	clrf	(??_modbus_rir_answer+2)& (0+255),b
  1470  0010F8  0100               	movlb	0	; () banked
  1471  0010FA  51E1               	movf	(??_modbus_rir_answer+1)& (0+255),w,b
  1472  0010FC  ECA1  F00E         	call	_UART_send_byte
  1473                           
  1474                           ;dialtek_modbus.c: 179: UART_send_byte((unsigned char)(CRC16 & 0x00ff));
  1475  001100  5015               	movf	_CRC16,w,c
  1476  001102  ECA1  F00E         	call	_UART_send_byte
  1477  001106  0012               	return	
  1478  001108                     __end_of_modbus_rir_answer:
  1479                           	opt stack 0
  1480                           tblptru	equ	0xFF8
  1481                           tblptrh	equ	0xFF7
  1482                           tblptrl	equ	0xFF6
  1483                           tablat	equ	0xFF5
  1484                           prodh	equ	0xFF4
  1485                           prodl	equ	0xFF3
  1486                           postinc0	equ	0xFEE
  1487                           wreg	equ	0xFE8
  1488                           indf1	equ	0xFE7
  1489                           postinc1	equ	0xFE6
  1490                           postdec1	equ	0xFE5
  1491                           fsr1h	equ	0xFE2
  1492                           fsr1l	equ	0xFE1
  1493                           indf2	equ	0xFDF
  1494                           postinc2	equ	0xFDE
  1495                           postdec2	equ	0xFDD
  1496                           fsr2h	equ	0xFDA
  1497                           fsr2l	equ	0xFD9
  1498                           status	equ	0xFD8
  1499                           
  1500 ;; *************** function _modbus_rhr_answer *****************
  1501 ;; Defined at:
  1502 ;;		line 99 in file "src/c/dialtek_modbus.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;		None
  1505 ;; Auto vars:     Size  Location     Type
  1506 ;;  i               1    9[BANK0 ] unsigned char 
  1507 ;;  j               1    8[BANK0 ] unsigned char 
  1508 ;;  cnt             1   10[BANK0 ] unsigned char 
  1509 ;; Return value:  Size  Location     Type
  1510 ;;		None               void
  1511 ;; Registers used:
  1512 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1513 ;; Tracked objects:
  1514 ;;		On entry : 0/0
  1515 ;;		On exit  : 0/0
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1519 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1520 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1521 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1522 ;;Total ram usage:       11 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    3
  1525 ;; This function calls:
  1526 ;;		_UART_send_byte
  1527 ;;		_modbus_CRC16
  1528 ;; This function is called by:
  1529 ;;		_modbus_poll
  1530 ;; This function uses a non-reentrant model
  1531 ;;
  1532                           
  1533                           	psect	text5
  1534  001108                     __ptext5:
  1535                           	opt stack 0
  1536  001108                     _modbus_rhr_answer:
  1537                           	opt stack 26
  1538                           
  1539                           ;dialtek_modbus.c: 103: addr_buf_1 = modbus_reg_addr;
  1540                           
  1541                           ;incstack = 0
  1542  001108  C01F  F01B         	movff	_modbus_reg_addr,_addr_buf_1
  1543  00110C  C020  F01C         	movff	_modbus_reg_addr+1,_addr_buf_1+1
  1544                           
  1545                           ;dialtek_modbus.c: 104: addr_buf_2 = addr_buf_1;
  1546  001110  C01B  F01D         	movff	_addr_buf_1,_addr_buf_2
  1547  001114  C01C  F01E         	movff	_addr_buf_1+1,_addr_buf_2+1
  1548                           
  1549                           ;dialtek_modbus.c: 106: crc_buf[0] = (modbus_id == dev_id) ? dev_id : com_dev_id;
  1550  001118  502C               	movf	_modbus_id,w,c
  1551  00111A  1850               	xorwf	_dev_id,w,c
  1552  00111C  B4D8               	btfsc	status,2,c
  1553  00111E  D004               	goto	l247
  1554  001120  0100               	movlb	0	; () banked
  1555  001122  C04F  F0E4         	movff	_com_dev_id,_modbus_rhr_answer$1212
  1556  001126  D003               	goto	L5
  1557  001128                     l247:
  1558  001128  0100               	movlb	0	; () banked
  1559  00112A  C050  F0E4         	movff	_dev_id,_modbus_rhr_answer$1212
  1560  00112E                     L5:
  1561  00112E  0100               	movlb	0	; () banked
  1562  001130  6BE5               	clrf	(_modbus_rhr_answer$1212+1)& (0+255),b
  1563                           
  1564                           ; BSR set to: 0
  1565  001132  0100               	movlb	0	; () banked
  1566  001134  C0E4  F2FA         	movff	_modbus_rhr_answer$1212,_crc_buf
  1567                           
  1568                           ;dialtek_modbus.c: 107: crc_buf[1] = (unsigned char)0x03;
  1569  001138  0E03               	movlw	3
  1570  00113A  CFE8 F2FB          	movff	wreg,_crc_buf+1
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;dialtek_modbus.c: 108: crc_buf[2] = regs2read*2;
  1574  00113E  90D8               	bcf	status,0,c
  1575  001140  3423               	rlcf	_regs2read,w,c
  1576  001142  0100               	movlb	0	; () banked
  1577  001144  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1578  001146  C0E0  F2FC         	movff	??_modbus_rhr_answer,_crc_buf+2
  1579                           
  1580                           ; BSR set to: 0
  1581                           ;dialtek_modbus.c: 110: unsigned char cnt = 3;
  1582  00114A  0E03               	movlw	3
  1583  00114C  0100               	movlb	0	; () banked
  1584  00114E  6FEA               	movwf	modbus_rhr_answer@cnt& (0+255),b
  1585                           
  1586                           ; BSR set to: 0
  1587                           ;dialtek_modbus.c: 112: for(unsigned char j = 0; j < regs2read;j++)
  1588  001150  0E00               	movlw	0
  1589  001152  0100               	movlb	0	; () banked
  1590  001154  6FE8               	movwf	modbus_rhr_answer@j& (0+255),b
  1591  001156  D047               	goto	l1896
  1592  001158                     l1890:
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;dialtek_modbus.c: 113: {
  1596                           ;dialtek_modbus.c: 114: crc_buf[cnt++] = (unsigned char)(holding_register[addr_buf_1] >>
      +                           8);
  1597  001158  0100               	movlb	0	; () banked
  1598  00115A  51EA               	movf	modbus_rhr_answer@cnt& (0+255),w,b
  1599  00115C  0D01               	mullw	1
  1600  00115E  0EFA               	movlw	low _crc_buf
  1601  001160  24F3               	addwf	prodl,w,c
  1602  001162  6ED9               	movwf	fsr2l,c
  1603  001164  0E02               	movlw	high _crc_buf
  1604  001166  20F4               	addwfc	prodh,w,c
  1605  001168  6EDA               	movwf	fsr2h,c
  1606  00116A  0E00               	movlw	low _holding_register
  1607  00116C  0100               	movlb	0	; () banked
  1608  00116E  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1609  001170  0E01               	movlw	high _holding_register
  1610  001172  6FE1               	movwf	(??_modbus_rhr_answer+1)& (0+255),b
  1611  001174  90D8               	bcf	status,0,c
  1612  001176  341B               	rlcf	_addr_buf_1,w,c
  1613  001178  6EE1               	movwf	fsr1l,c
  1614  00117A  341C               	rlcf	_addr_buf_1+1,w,c
  1615  00117C  6EE2               	movwf	fsr1h,c
  1616  00117E  0100               	movlb	0	; () banked
  1617  001180  51E0               	movf	??_modbus_rhr_answer& (0+255),w,b
  1618  001182  26E1               	addwf	fsr1l,f,c
  1619  001184  0100               	movlb	0	; () banked
  1620  001186  51E1               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1621  001188  22E2               	addwfc	fsr1h,f,c
  1622  00118A  CFE6 F0E2          	movff	postinc1,??_modbus_rhr_answer+2
  1623  00118E  CFE5 F0E3          	movff	postdec1,??_modbus_rhr_answer+3
  1624  001192  C0E3  F0E2         	movff	??_modbus_rhr_answer+3,??_modbus_rhr_answer+2
  1625  001196  0100               	movlb	0	; () banked
  1626  001198  6BE3               	clrf	(??_modbus_rhr_answer+3)& (0+255),b
  1627  00119A  0100               	movlb	0	; () banked
  1628  00119C  51E2               	movf	(??_modbus_rhr_answer+2)& (0+255),w,b
  1629  00119E  6EDF               	movwf	indf2,c
  1630                           
  1631                           ; BSR set to: 0
  1632  0011A0  0100               	movlb	0	; () banked
  1633  0011A2  2BEA               	incf	modbus_rhr_answer@cnt& (0+255),f,b
  1634                           
  1635                           ; BSR set to: 0
  1636                           ;dialtek_modbus.c: 115: crc_buf[cnt++] = (unsigned char)(holding_register[addr_buf_1] & 
      +                          0x00ff);
  1637  0011A4  0E00               	movlw	low _holding_register
  1638  0011A6  0100               	movlb	0	; () banked
  1639  0011A8  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1640  0011AA  0E01               	movlw	high _holding_register
  1641  0011AC  6FE1               	movwf	(??_modbus_rhr_answer+1)& (0+255),b
  1642  0011AE  90D8               	bcf	status,0,c
  1643  0011B0  341B               	rlcf	_addr_buf_1,w,c
  1644  0011B2  6ED9               	movwf	fsr2l,c
  1645  0011B4  341C               	rlcf	_addr_buf_1+1,w,c
  1646  0011B6  6EDA               	movwf	fsr2h,c
  1647  0011B8  0100               	movlb	0	; () banked
  1648  0011BA  51E0               	movf	??_modbus_rhr_answer& (0+255),w,b
  1649  0011BC  26D9               	addwf	fsr2l,f,c
  1650  0011BE  0100               	movlb	0	; () banked
  1651  0011C0  51E1               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1652  0011C2  22DA               	addwfc	fsr2h,f,c
  1653  0011C4  0100               	movlb	0	; () banked
  1654  0011C6  51EA               	movf	modbus_rhr_answer@cnt& (0+255),w,b
  1655  0011C8  0D01               	mullw	1
  1656  0011CA  0EFA               	movlw	low _crc_buf
  1657  0011CC  24F3               	addwf	prodl,w,c
  1658  0011CE  6EE1               	movwf	fsr1l,c
  1659  0011D0  0E02               	movlw	high _crc_buf
  1660  0011D2  20F4               	addwfc	prodh,w,c
  1661  0011D4  6EE2               	movwf	fsr1h,c
  1662  0011D6  CFDF FFE7          	movff	indf2,indf1
  1663  0011DA  0100               	movlb	0	; () banked
  1664  0011DC  2BEA               	incf	modbus_rhr_answer@cnt& (0+255),f,b
  1665                           
  1666                           ;dialtek_modbus.c: 116: ++addr_buf_1;
  1667  0011DE  4A1B               	infsnz	_addr_buf_1,f,c
  1668  0011E0  2A1C               	incf	_addr_buf_1+1,f,c
  1669  0011E2  0100               	movlb	0	; () banked
  1670  0011E4  2BE8               	incf	modbus_rhr_answer@j& (0+255),f,b
  1671  0011E6                     l1896:
  1672                           
  1673                           ; BSR set to: 0
  1674  0011E6  0100               	movlb	0	; () banked
  1675  0011E8  51E8               	movf	modbus_rhr_answer@j& (0+255),w,b
  1676  0011EA  0100               	movlb	0	; () banked
  1677  0011EC  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1678  0011EE  6BE1               	clrf	(??_modbus_rhr_answer+1)& (0+255),b
  1679  0011F0  5023               	movf	_regs2read,w,c
  1680  0011F2  0100               	movlb	0	; () banked
  1681  0011F4  5DE0               	subwf	??_modbus_rhr_answer& (0+255),w,b
  1682  0011F6  5024               	movf	_regs2read+1,w,c
  1683  0011F8  0100               	movlb	0	; () banked
  1684  0011FA  59E1               	subwfb	(??_modbus_rhr_answer+1)& (0+255),w,b
  1685  0011FC  A0D8               	btfss	status,0,c
  1686  0011FE  D7AC               	goto	l1890
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;dialtek_modbus.c: 117: }
  1690                           ;dialtek_modbus.c: 119: CRC16 = modbus_CRC16(crc_buf,(regs2read*2)+3);
  1691                           
  1692                           ; BSR set to: 0
  1693  001200  0E02               	movlw	high _crc_buf
  1694  001202  6E3E               	movwf	modbus_CRC16@buf+1,c
  1695  001204  0EFA               	movlw	low _crc_buf
  1696  001206  6E3D               	movwf	modbus_CRC16@buf,c
  1697  001208  C023  F0E0         	movff	_regs2read,??_modbus_rhr_answer
  1698  00120C  C024  F0E1         	movff	_regs2read+1,??_modbus_rhr_answer+1
  1699  001210  90D8               	bcf	status,0,c
  1700  001212  0100               	movlb	0	; () banked
  1701  001214  37E0               	rlcf	??_modbus_rhr_answer& (0+255),f,b
  1702  001216  37E1               	rlcf	(??_modbus_rhr_answer+1)& (0+255),f,b
  1703  001218  0E03               	movlw	3
  1704  00121A  0100               	movlb	0	; () banked
  1705  00121C  25E0               	addwf	??_modbus_rhr_answer& (0+255),w,b
  1706  00121E  6E3F               	movwf	modbus_CRC16@len,c
  1707  001220  0E00               	movlw	0
  1708  001222  0100               	movlb	0	; () banked
  1709  001224  21E1               	addwfc	(??_modbus_rhr_answer+1)& (0+255),w,b
  1710  001226  6E40               	movwf	modbus_CRC16@len+1,c
  1711  001228  EC6F  F00C         	call	_modbus_CRC16	;wreg free
  1712  00122C  C03D  F015         	movff	?_modbus_CRC16,_CRC16
  1713  001230  C03E  F016         	movff	?_modbus_CRC16+1,_CRC16+1
  1714                           
  1715                           ;dialtek_modbus.c: 123: UART_send_byte((modbus_id == dev_id) ? dev_id : com_dev_id);
  1716  001234  502C               	movf	_modbus_id,w,c
  1717  001236  1850               	xorwf	_dev_id,w,c
  1718  001238  B4D8               	btfsc	status,2,c
  1719  00123A  D004               	goto	l254
  1720  00123C  0100               	movlb	0	; () banked
  1721  00123E  C04F  F0E6         	movff	_com_dev_id,_modbus_rhr_answer$1215
  1722  001242  D003               	goto	L6
  1723  001244                     l254:
  1724  001244  0100               	movlb	0	; () banked
  1725  001246  C050  F0E6         	movff	_dev_id,_modbus_rhr_answer$1215
  1726  00124A                     L6:
  1727  00124A  0100               	movlb	0	; () banked
  1728  00124C  6BE7               	clrf	(_modbus_rhr_answer$1215+1)& (0+255),b
  1729                           
  1730                           ; BSR set to: 0
  1731                           
  1732                           ; BSR set to: 0
  1733  00124E  0100               	movlb	0	; () banked
  1734  001250  51E6               	movf	_modbus_rhr_answer$1215& (0+255),w,b
  1735  001252  ECA1  F00E         	call	_UART_send_byte
  1736                           
  1737                           ;dialtek_modbus.c: 124: UART_send_byte((unsigned char)(unsigned char)0x03);
  1738  001256  0E03               	movlw	3
  1739  001258  ECA1  F00E         	call	_UART_send_byte
  1740                           
  1741                           ;dialtek_modbus.c: 125: UART_send_byte((unsigned char)regs2read*2);
  1742  00125C  5023               	movf	_regs2read,w,c
  1743  00125E  0D02               	mullw	2
  1744  001260  50F3               	movf	prodl,w,c
  1745  001262  ECA1  F00E         	call	_UART_send_byte
  1746                           
  1747                           ;dialtek_modbus.c: 127: for(unsigned char i = 0; i < regs2read; i++)
  1748  001266  0E00               	movlw	0
  1749  001268  0100               	movlb	0	; () banked
  1750  00126A  6FE9               	movwf	modbus_rhr_answer@i& (0+255),b
  1751  00126C  D033               	goto	l1916
  1752  00126E                     l1910:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;dialtek_modbus.c: 128: {
  1756                           ;dialtek_modbus.c: 129: UART_send_byte((unsigned char)(holding_register[addr_buf_2] >> 8
      +                          ));
  1757  00126E  0E00               	movlw	low _holding_register
  1758  001270  0100               	movlb	0	; () banked
  1759  001272  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1760  001274  0E01               	movlw	high _holding_register
  1761  001276  6FE1               	movwf	(??_modbus_rhr_answer+1)& (0+255),b
  1762  001278  90D8               	bcf	status,0,c
  1763  00127A  341D               	rlcf	_addr_buf_2,w,c
  1764  00127C  6ED9               	movwf	fsr2l,c
  1765  00127E  341E               	rlcf	_addr_buf_2+1,w,c
  1766  001280  6EDA               	movwf	fsr2h,c
  1767  001282  0100               	movlb	0	; () banked
  1768  001284  51E0               	movf	??_modbus_rhr_answer& (0+255),w,b
  1769  001286  26D9               	addwf	fsr2l,f,c
  1770  001288  0100               	movlb	0	; () banked
  1771  00128A  51E1               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1772  00128C  22DA               	addwfc	fsr2h,f,c
  1773  00128E  CFDE F0E2          	movff	postinc2,??_modbus_rhr_answer+2
  1774  001292  CFDD F0E3          	movff	postdec2,??_modbus_rhr_answer+3
  1775  001296  C0E3  F0E2         	movff	??_modbus_rhr_answer+3,??_modbus_rhr_answer+2
  1776  00129A  0100               	movlb	0	; () banked
  1777  00129C  6BE3               	clrf	(??_modbus_rhr_answer+3)& (0+255),b
  1778  00129E  0100               	movlb	0	; () banked
  1779  0012A0  51E2               	movf	(??_modbus_rhr_answer+2)& (0+255),w,b
  1780  0012A2  ECA1  F00E         	call	_UART_send_byte
  1781                           
  1782                           ;dialtek_modbus.c: 130: UART_send_byte((unsigned char)(holding_register[addr_buf_2] & 0x
      +                          00ff));
  1783  0012A6  0E00               	movlw	low _holding_register
  1784  0012A8  0100               	movlb	0	; () banked
  1785  0012AA  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1786  0012AC  0E01               	movlw	high _holding_register
  1787  0012AE  6FE1               	movwf	(??_modbus_rhr_answer+1)& (0+255),b
  1788  0012B0  90D8               	bcf	status,0,c
  1789  0012B2  341D               	rlcf	_addr_buf_2,w,c
  1790  0012B4  6ED9               	movwf	fsr2l,c
  1791  0012B6  341E               	rlcf	_addr_buf_2+1,w,c
  1792  0012B8  6EDA               	movwf	fsr2h,c
  1793  0012BA  0100               	movlb	0	; () banked
  1794  0012BC  51E0               	movf	??_modbus_rhr_answer& (0+255),w,b
  1795  0012BE  26D9               	addwf	fsr2l,f,c
  1796  0012C0  0100               	movlb	0	; () banked
  1797  0012C2  51E1               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1798  0012C4  22DA               	addwfc	fsr2h,f,c
  1799  0012C6  50DF               	movf	indf2,w,c
  1800  0012C8  ECA1  F00E         	call	_UART_send_byte
  1801                           
  1802                           ;dialtek_modbus.c: 131: ++addr_buf_2;
  1803  0012CC  4A1D               	infsnz	_addr_buf_2,f,c
  1804  0012CE  2A1E               	incf	_addr_buf_2+1,f,c
  1805  0012D0  0100               	movlb	0	; () banked
  1806  0012D2  2BE9               	incf	modbus_rhr_answer@i& (0+255),f,b
  1807  0012D4                     l1916:
  1808                           
  1809                           ; BSR set to: 0
  1810  0012D4  0100               	movlb	0	; () banked
  1811  0012D6  51E9               	movf	modbus_rhr_answer@i& (0+255),w,b
  1812  0012D8  0100               	movlb	0	; () banked
  1813  0012DA  6FE0               	movwf	??_modbus_rhr_answer& (0+255),b
  1814  0012DC  6BE1               	clrf	(??_modbus_rhr_answer+1)& (0+255),b
  1815  0012DE  5023               	movf	_regs2read,w,c
  1816  0012E0  0100               	movlb	0	; () banked
  1817  0012E2  5DE0               	subwf	??_modbus_rhr_answer& (0+255),w,b
  1818  0012E4  5024               	movf	_regs2read+1,w,c
  1819  0012E6  0100               	movlb	0	; () banked
  1820  0012E8  59E1               	subwfb	(??_modbus_rhr_answer+1)& (0+255),w,b
  1821  0012EA  A0D8               	btfss	status,0,c
  1822  0012EC  D7C0               	goto	l1910
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;dialtek_modbus.c: 132: }
  1826                           ;dialtek_modbus.c: 134: UART_send_byte((unsigned char)(CRC16 >> 8));
  1827                           
  1828                           ; BSR set to: 0
  1829  0012EE  C016  F0E0         	movff	_CRC16+1,??_modbus_rhr_answer
  1830  0012F2  C0E0  F0E1         	movff	??_modbus_rhr_answer,??_modbus_rhr_answer+1
  1831  0012F6  0100               	movlb	0	; () banked
  1832  0012F8  6BE2               	clrf	(??_modbus_rhr_answer+2)& (0+255),b
  1833  0012FA  0100               	movlb	0	; () banked
  1834  0012FC  51E1               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1835  0012FE  ECA1  F00E         	call	_UART_send_byte
  1836                           
  1837                           ;dialtek_modbus.c: 135: UART_send_byte((unsigned char)(CRC16 & 0x00ff));
  1838  001302  5015               	movf	_CRC16,w,c
  1839  001304  ECA1  F00E         	call	_UART_send_byte
  1840  001308  0012               	return	
  1841  00130A                     __end_of_modbus_rhr_answer:
  1842                           	opt stack 0
  1843                           tblptru	equ	0xFF8
  1844                           tblptrh	equ	0xFF7
  1845                           tblptrl	equ	0xFF6
  1846                           tablat	equ	0xFF5
  1847                           prodh	equ	0xFF4
  1848                           prodl	equ	0xFF3
  1849                           postinc0	equ	0xFEE
  1850                           wreg	equ	0xFE8
  1851                           indf1	equ	0xFE7
  1852                           postinc1	equ	0xFE6
  1853                           postdec1	equ	0xFE5
  1854                           fsr1h	equ	0xFE2
  1855                           fsr1l	equ	0xFE1
  1856                           indf2	equ	0xFDF
  1857                           postinc2	equ	0xFDE
  1858                           postdec2	equ	0xFDD
  1859                           fsr2h	equ	0xFDA
  1860                           fsr2l	equ	0xFD9
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _UART_send_byte *****************
  1864 ;; Defined at:
  1865 ;;		line 40 in file "src/c/25k80_uart.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  byte            1    wreg     unsigned char 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;  byte            1   15[COMRAM] unsigned char 
  1870 ;; Return value:  Size  Location     Type
  1871 ;;		None               void
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1883 ;;Total ram usage:        1 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    2
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_modbus_wsr_answer
  1890 ;;		_modbus_rhr_answer
  1891 ;;		_modbus_rir_answer
  1892 ;; This function uses a non-reentrant model
  1893 ;;
  1894                           
  1895                           	psect	text6
  1896  001D42                     __ptext6:
  1897                           	opt stack 0
  1898  001D42                     _UART_send_byte:
  1899                           	opt stack 26
  1900                           
  1901                           ;incstack = 0
  1902                           ;UART_send_byte@byte stored from wreg
  1903  001D42  6E3D               	movwf	UART_send_byte@byte,c
  1904  001D44                     l141:
  1905  001D44  A2AC               	btfss	4012,1,c	;volatile
  1906  001D46  D7FE               	goto	l141
  1907                           
  1908                           ;25k80_uart.c: 47: TXREG1bits.TXREG1 = byte;
  1909  001D48  50AD               	movf	4013,w,c	;volatile
  1910  001D4A  183D               	xorwf	UART_send_byte@byte,w,c
  1911  001D4C  0B00               	andlw	-256
  1912  001D4E  183D               	xorwf	UART_send_byte@byte,w,c
  1913  001D50  6EAD               	movwf	4013,c	;volatile
  1914                           
  1915                           ;25k80_uart.c: 48: _delay((unsigned long)((100)*(40000000/4000000.0)));
  1916  001D52  0EFA               	movlw	250
  1917  001D54                     u957:
  1918  001D54  F000               	nop	
  1919  001D56  2EE8               	decfsz	wreg,f,c
  1920  001D58  D7FD               	goto	u957
  1921  001D5A  0012               	return	
  1922  001D5C                     __end_of_UART_send_byte:
  1923                           	opt stack 0
  1924                           tblptru	equ	0xFF8
  1925                           tblptrh	equ	0xFF7
  1926                           tblptrl	equ	0xFF6
  1927                           tablat	equ	0xFF5
  1928                           prodh	equ	0xFF4
  1929                           prodl	equ	0xFF3
  1930                           postinc0	equ	0xFEE
  1931                           wreg	equ	0xFE8
  1932                           indf1	equ	0xFE7
  1933                           postinc1	equ	0xFE6
  1934                           postdec1	equ	0xFE5
  1935                           fsr1h	equ	0xFE2
  1936                           fsr1l	equ	0xFE1
  1937                           indf2	equ	0xFDF
  1938                           postinc2	equ	0xFDE
  1939                           postdec2	equ	0xFDD
  1940                           fsr2h	equ	0xFDA
  1941                           fsr2l	equ	0xFD9
  1942                           status	equ	0xFD8
  1943                           
  1944 ;; *************** function _modbus_get_poll *****************
  1945 ;; Defined at:
  1946 ;;		line 258 in file "src/c/dialtek_modbus.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;  rx_cmd_code     1   32[COMRAM] unsigned char 
  1951 ;; Return value:  Size  Location     Type
  1952 ;;                  1    wreg      unsigned char 
  1953 ;; Registers used:
  1954 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 0/0
  1958 ;;		Unchanged: 0/0
  1959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1961 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1963 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1964 ;;Total ram usage:        1 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    4
  1967 ;; This function calls:
  1968 ;;		_modbus_reset
  1969 ;;		_modbus_rx_CRC_check
  1970 ;; This function is called by:
  1971 ;;		_modbus_poll
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text7
  1976  0019F8                     __ptext7:
  1977                           	opt stack 0
  1978  0019F8                     _modbus_get_poll:
  1979                           	opt stack 25
  1980                           
  1981                           ;dialtek_modbus.c: 261: unsigned char rx_cmd_code = 0;
  1982                           
  1983                           ;incstack = 0
  1984  0019F8  0E00               	movlw	0
  1985  0019FA  6E4E               	movwf	modbus_get_poll@rx_cmd_code,c
  1986                           
  1987                           ;dialtek_modbus.c: 263: if(rx_buf_ptr > 7)
  1988  0019FC  0E08               	movlw	8
  1989  0019FE  5C25               	subwf	_rx_buf_ptr,w,c	;volatile
  1990  001A00  0E00               	movlw	0
  1991  001A02  5826               	subwfb	_rx_buf_ptr+1,w,c	;volatile
  1992  001A04  A0D8               	btfss	status,0,c
  1993  001A06  D033               	goto	l2010
  1994                           
  1995                           ;dialtek_modbus.c: 264: {
  1996                           ;dialtek_modbus.c: 265: modbus_id = rx_buf[0];
  1997  001A08  C060  F02C         	movff	_rx_buf,_modbus_id	;volatile
  1998                           
  1999                           ;dialtek_modbus.c: 267: if((modbus_id == dev_id) || (modbus_id == com_dev_id))
  2000  001A0C  502C               	movf	_modbus_id,w,c
  2001  001A0E  1850               	xorwf	_dev_id,w,c
  2002  001A10  B4D8               	btfsc	status,2,c
  2003  001A12  D01D               	goto	l2004
  2004  001A14  504F               	movf	_com_dev_id,w,c
  2005  001A16  622C               	cpfseq	_modbus_id,c
  2006  001A18  D028               	goto	l2008
  2007  001A1A  D019               	goto	l2004
  2008  001A1C                     l1990:
  2009                           
  2010                           ;dialtek_modbus.c: 273: if(modbus_rx_CRC_check((unsigned char)0x03) == (unsigned char)0x
      +                          03)
  2011  001A1C  0E03               	movlw	3
  2012  001A1E  EC85  F009         	call	_modbus_rx_CRC_check
  2013  001A22  0A03               	xorlw	3
  2014  001A24  A4D8               	btfss	status,2,c
  2015  001A26  D01E               	goto	l2006
  2016                           
  2017                           ;dialtek_modbus.c: 274: {
  2018                           ;dialtek_modbus.c: 275: rx_cmd_code = (unsigned char)0x03;
  2019  001A28  0E03               	movlw	3
  2020  001A2A  D00F               	goto	L8
  2021  001A2C                     l1994:
  2022                           
  2023                           ;dialtek_modbus.c: 280: if(modbus_rx_CRC_check((unsigned char)0x06) == (unsigned char)0x
      +                          06)
  2024  001A2C  0E06               	movlw	6
  2025  001A2E  EC85  F009         	call	_modbus_rx_CRC_check
  2026  001A32  0A06               	xorlw	6
  2027  001A34  A4D8               	btfss	status,2,c
  2028  001A36  D016               	goto	l2006
  2029                           
  2030                           ;dialtek_modbus.c: 281: {
  2031                           ;dialtek_modbus.c: 282: rx_cmd_code = (unsigned char)0x06;
  2032  001A38  0E06               	movlw	6
  2033  001A3A  D007               	goto	L8
  2034  001A3C                     l1998:
  2035                           
  2036                           ;dialtek_modbus.c: 287: if(modbus_rx_CRC_check((unsigned char)0x04) == (unsigned char)0x
      +                          04)
  2037  001A3C  0E04               	movlw	4
  2038  001A3E  EC85  F009         	call	_modbus_rx_CRC_check
  2039  001A42  0A04               	xorlw	4
  2040  001A44  A4D8               	btfss	status,2,c
  2041  001A46  D00E               	goto	l2006
  2042                           
  2043                           ;dialtek_modbus.c: 288: {
  2044                           ;dialtek_modbus.c: 289: rx_cmd_code = (unsigned char)0x04;
  2045  001A48  0E04               	movlw	4
  2046  001A4A                     L8:
  2047  001A4A  6E4E               	movwf	modbus_get_poll@rx_cmd_code,c
  2048  001A4C  D00B               	goto	l2006
  2049  001A4E                     l2004:
  2050  001A4E  0100               	movlb	0	; () banked
  2051  001A50  5161               	movf	(_rx_buf+1)& (0+255),w,b	;volatile
  2052                           
  2053                           ; Switch size 1, requested type "space"
  2054                           ; Number of cases is 3, Range of values is 3 to 6
  2055                           ; switch strategies available:
  2056                           ; Name         Instructions Cycles
  2057                           ; simple_byte           10     6 (average)
  2058                           ;	Chosen strategy is simple_byte
  2059  001A52  0A03               	xorlw	3	; case 3
  2060  001A54  B4D8               	btfsc	status,2,c
  2061  001A56  D7E2               	goto	l1990
  2062  001A58  0A07               	xorlw	7	; case 4
  2063  001A5A  B4D8               	btfsc	status,2,c
  2064  001A5C  D7EF               	goto	l1998
  2065  001A5E  0A02               	xorlw	2	; case 6
  2066  001A60  B4D8               	btfsc	status,2,c
  2067  001A62  D7E4               	goto	l1994
  2068  001A64                     l2006:
  2069                           
  2070                           ;dialtek_modbus.c: 294: modbus_reset();
  2071  001A64  ECF8  F00D         	call	_modbus_reset	;wreg free
  2072                           
  2073                           ;dialtek_modbus.c: 296: }
  2074  001A68  D002               	goto	l2010
  2075  001A6A                     l2008:
  2076                           
  2077                           ;dialtek_modbus.c: 297: else
  2078                           ;dialtek_modbus.c: 298: {
  2079                           ;dialtek_modbus.c: 299: modbus_reset();
  2080  001A6A  ECF8  F00D         	call	_modbus_reset	;wreg free
  2081  001A6E                     l2010:
  2082                           
  2083                           ;dialtek_modbus.c: 300: }
  2084                           ;dialtek_modbus.c: 301: }
  2085                           ;dialtek_modbus.c: 303: return rx_cmd_code;
  2086  001A6E  504E               	movf	modbus_get_poll@rx_cmd_code,w,c
  2087  001A70  0012               	return	
  2088  001A72                     __end_of_modbus_get_poll:
  2089                           	opt stack 0
  2090                           tblptru	equ	0xFF8
  2091                           tblptrh	equ	0xFF7
  2092                           tblptrl	equ	0xFF6
  2093                           tablat	equ	0xFF5
  2094                           prodh	equ	0xFF4
  2095                           prodl	equ	0xFF3
  2096                           postinc0	equ	0xFEE
  2097                           wreg	equ	0xFE8
  2098                           indf1	equ	0xFE7
  2099                           postinc1	equ	0xFE6
  2100                           postdec1	equ	0xFE5
  2101                           fsr1h	equ	0xFE2
  2102                           fsr1l	equ	0xFE1
  2103                           indf2	equ	0xFDF
  2104                           postinc2	equ	0xFDE
  2105                           postdec2	equ	0xFDD
  2106                           fsr2h	equ	0xFDA
  2107                           fsr2l	equ	0xFD9
  2108                           status	equ	0xFD8
  2109                           
  2110 ;; *************** function _modbus_rx_CRC_check *****************
  2111 ;; Defined at:
  2112 ;;		line 186 in file "src/c/dialtek_modbus.c"
  2113 ;; Parameters:    Size  Location     Type
  2114 ;;  modbus_cmd      1    wreg     unsigned char 
  2115 ;; Auto vars:     Size  Location     Type
  2116 ;;  modbus_cmd      1    8[BANK0 ] unsigned char 
  2117 ;;  CRC16_calc      2    3[BANK0 ] unsigned int 
  2118 ;;  ans             1    7[BANK0 ] unsigned char 
  2119 ;; Return value:  Size  Location     Type
  2120 ;;                  1    wreg      unsigned char 
  2121 ;; Registers used:
  2122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2123 ;; Tracked objects:
  2124 ;;		On entry : 0/0
  2125 ;;		On exit  : 0/0
  2126 ;;		Unchanged: 0/0
  2127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2129 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2130 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2131 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2132 ;;Total ram usage:        9 bytes
  2133 ;; Hardware stack levels used:    1
  2134 ;; Hardware stack levels required when called:    3
  2135 ;; This function calls:
  2136 ;;		_modbus_CRC16
  2137 ;; This function is called by:
  2138 ;;		_modbus_get_poll
  2139 ;; This function uses a non-reentrant model
  2140 ;;
  2141                           
  2142                           	psect	text8
  2143  00130A                     __ptext8:
  2144                           	opt stack 0
  2145  00130A                     _modbus_rx_CRC_check:
  2146                           	opt stack 25
  2147                           
  2148                           ;incstack = 0
  2149                           ;modbus_rx_CRC_check@modbus_cmd stored from wreg
  2150  00130A  0100               	movlb	0	; () banked
  2151  00130C  6FE8               	movwf	modbus_rx_CRC_check@modbus_cmd& (0+255),b
  2152                           
  2153                           ; BSR set to: 0
  2154                           ;dialtek_modbus.c: 189: unsigned int CRC16_calc = 0;
  2155  00130E  0E00               	movlw	0
  2156  001310  0100               	movlb	0	; () banked
  2157  001312  6FE4               	movwf	(modbus_rx_CRC_check@CRC16_calc+1)& (0+255),b
  2158  001314  0E00               	movlw	0
  2159  001316  0100               	movlb	0	; () banked
  2160  001318  6FE3               	movwf	modbus_rx_CRC_check@CRC16_calc& (0+255),b
  2161                           
  2162                           ;dialtek_modbus.c: 190: unsigned char ans = 0;
  2163  00131A  0E00               	movlw	0
  2164  00131C  0100               	movlb	0	; () banked
  2165  00131E  6FE7               	movwf	modbus_rx_CRC_check@ans& (0+255),b
  2166                           
  2167                           ; BSR set to: 0
  2168                           ;dialtek_modbus.c: 192: modbus_reg_addr = (unsigned int)((rx_buf[2] << 8) | rx_buf[3]);
  2169  001320  0100               	movlb	0	; () banked
  2170  001322  5163               	movf	(_rx_buf+3)& (0+255),w,b	;volatile
  2171  001324  0100               	movlb	0	; () banked
  2172  001326  C062  F0E0         	movff	_rx_buf+2,??_modbus_rx_CRC_check	;volatile
  2173  00132A  0100               	movlb	0	; () banked
  2174  00132C  6BE1               	clrf	(??_modbus_rx_CRC_check+1)& (0+255),b
  2175  00132E  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2176  001332  0100               	movlb	0	; () banked
  2177  001334  6BE0               	clrf	??_modbus_rx_CRC_check& (0+255),b
  2178  001336  0100               	movlb	0	; () banked
  2179  001338  11E0               	iorwf	??_modbus_rx_CRC_check& (0+255),w,b
  2180  00133A  6E1F               	movwf	_modbus_reg_addr,c
  2181  00133C  0100               	movlb	0	; () banked
  2182  00133E  51E1               	movf	(??_modbus_rx_CRC_check+1)& (0+255),w,b
  2183  001340  6E20               	movwf	_modbus_reg_addr+1,c
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;dialtek_modbus.c: 194: crc_buf[0] = (modbus_id == dev_id) ? dev_id : com_dev_id;
  2187  001342  502C               	movf	_modbus_id,w,c
  2188  001344  1850               	xorwf	_dev_id,w,c
  2189  001346  B4D8               	btfsc	status,2,c
  2190  001348  D004               	goto	l281
  2191                           
  2192                           ; BSR set to: 0
  2193  00134A  0100               	movlb	0	; () banked
  2194  00134C  C04F  F0E5         	movff	_com_dev_id,_modbus_rx_CRC_check$1227
  2195  001350  D003               	goto	L9
  2196  001352                     l281:
  2197                           
  2198                           ; BSR set to: 0
  2199  001352  0100               	movlb	0	; () banked
  2200  001354  C050  F0E5         	movff	_dev_id,_modbus_rx_CRC_check$1227
  2201  001358                     L9:
  2202  001358  0100               	movlb	0	; () banked
  2203  00135A  6BE6               	clrf	(_modbus_rx_CRC_check$1227+1)& (0+255),b
  2204                           
  2205                           ; BSR set to: 0
  2206  00135C  0100               	movlb	0	; () banked
  2207  00135E  C0E5  F2FA         	movff	_modbus_rx_CRC_check$1227,_crc_buf
  2208                           
  2209                           ; BSR set to: 0
  2210                           ;dialtek_modbus.c: 195: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  2211  001362  C020  F0E0         	movff	_modbus_reg_addr+1,??_modbus_rx_CRC_check
  2212  001366  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2213  00136A  0100               	movlb	0	; () banked
  2214  00136C  6BE2               	clrf	(??_modbus_rx_CRC_check+2)& (0+255),b
  2215  00136E  C0E1  F2FC         	movff	??_modbus_rx_CRC_check+1,_crc_buf+2
  2216                           
  2217                           ; BSR set to: 0
  2218                           ;dialtek_modbus.c: 196: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  2219  001372  EE22  F0FD         	lfsr	2,_crc_buf+3
  2220  001376  C01F  FFDF         	movff	_modbus_reg_addr,indf2
  2221                           
  2222                           ;dialtek_modbus.c: 198: switch(modbus_cmd)
  2223  00137A  D055               	goto	l1830
  2224  00137C                     l1804:
  2225                           
  2226                           ; BSR set to: 0
  2227                           ;dialtek_modbus.c: 201: reg_wr_data = (rx_buf[4] << 8) | rx_buf[5];
  2228  00137C  0100               	movlb	0	; () banked
  2229  00137E  5165               	movf	(_rx_buf+5)& (0+255),w,b	;volatile
  2230  001380  0100               	movlb	0	; () banked
  2231  001382  C064  F0E0         	movff	_rx_buf+4,??_modbus_rx_CRC_check	;volatile
  2232  001386  0100               	movlb	0	; () banked
  2233  001388  6BE1               	clrf	(??_modbus_rx_CRC_check+1)& (0+255),b
  2234  00138A  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2235  00138E  0100               	movlb	0	; () banked
  2236  001390  6BE0               	clrf	??_modbus_rx_CRC_check& (0+255),b
  2237  001392  0100               	movlb	0	; () banked
  2238  001394  11E0               	iorwf	??_modbus_rx_CRC_check& (0+255),w,b
  2239  001396  6E21               	movwf	_reg_wr_data,c
  2240  001398  0100               	movlb	0	; () banked
  2241  00139A  51E1               	movf	(??_modbus_rx_CRC_check+1)& (0+255),w,b
  2242  00139C  6E22               	movwf	_reg_wr_data+1,c
  2243                           
  2244                           ; BSR set to: 0
  2245                           ;dialtek_modbus.c: 203: crc_buf[1] = (unsigned char) (unsigned char)0x06;
  2246  00139E  0E06               	movlw	6
  2247  0013A0  CFE8 F2FB          	movff	wreg,_crc_buf+1
  2248                           
  2249                           ; BSR set to: 0
  2250                           ;dialtek_modbus.c: 204: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  2251  0013A4  C022  F0E0         	movff	_reg_wr_data+1,??_modbus_rx_CRC_check
  2252  0013A8  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2253  0013AC  0100               	movlb	0	; () banked
  2254  0013AE  6BE2               	clrf	(??_modbus_rx_CRC_check+2)& (0+255),b
  2255  0013B0  C0E1  F2FE         	movff	??_modbus_rx_CRC_check+1,_crc_buf+4
  2256                           
  2257                           ; BSR set to: 0
  2258                           ;dialtek_modbus.c: 205: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  2259  0013B4  EE22  F0FF         	lfsr	2,_crc_buf+5
  2260  0013B8  C021  FFDF         	movff	_reg_wr_data,indf2
  2261                           
  2262                           ;dialtek_modbus.c: 206: break;
  2263  0013BC  D03F               	goto	l1832
  2264  0013BE                     l1812:
  2265                           
  2266                           ; BSR set to: 0
  2267                           ;dialtek_modbus.c: 209: regs2read = (rx_buf[4] << 8) | rx_buf[5];
  2268  0013BE  0100               	movlb	0	; () banked
  2269  0013C0  5165               	movf	(_rx_buf+5)& (0+255),w,b	;volatile
  2270  0013C2  0100               	movlb	0	; () banked
  2271  0013C4  C064  F0E0         	movff	_rx_buf+4,??_modbus_rx_CRC_check	;volatile
  2272  0013C8  0100               	movlb	0	; () banked
  2273  0013CA  6BE1               	clrf	(??_modbus_rx_CRC_check+1)& (0+255),b
  2274  0013CC  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2275  0013D0  0100               	movlb	0	; () banked
  2276  0013D2  6BE0               	clrf	??_modbus_rx_CRC_check& (0+255),b
  2277  0013D4  0100               	movlb	0	; () banked
  2278  0013D6  11E0               	iorwf	??_modbus_rx_CRC_check& (0+255),w,b
  2279  0013D8  6E23               	movwf	_regs2read,c
  2280  0013DA  0100               	movlb	0	; () banked
  2281  0013DC  51E1               	movf	(??_modbus_rx_CRC_check+1)& (0+255),w,b
  2282  0013DE  6E24               	movwf	_regs2read+1,c
  2283                           
  2284                           ; BSR set to: 0
  2285                           ;dialtek_modbus.c: 211: crc_buf[1] = (unsigned char) (unsigned char)0x03;
  2286  0013E0  0E03               	movlw	3
  2287  0013E2  D012               	goto	L10
  2288  0013E4                     l1820:
  2289                           
  2290                           ; BSR set to: 0
  2291                           ;dialtek_modbus.c: 217: regs2read = (rx_buf[4] << 8) | rx_buf[5];
  2292  0013E4  0100               	movlb	0	; () banked
  2293  0013E6  5165               	movf	(_rx_buf+5)& (0+255),w,b	;volatile
  2294  0013E8  0100               	movlb	0	; () banked
  2295  0013EA  C064  F0E0         	movff	_rx_buf+4,??_modbus_rx_CRC_check	;volatile
  2296  0013EE  0100               	movlb	0	; () banked
  2297  0013F0  6BE1               	clrf	(??_modbus_rx_CRC_check+1)& (0+255),b
  2298  0013F2  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2299  0013F6  0100               	movlb	0	; () banked
  2300  0013F8  6BE0               	clrf	??_modbus_rx_CRC_check& (0+255),b
  2301  0013FA  0100               	movlb	0	; () banked
  2302  0013FC  11E0               	iorwf	??_modbus_rx_CRC_check& (0+255),w,b
  2303  0013FE  6E23               	movwf	_regs2read,c
  2304  001400  0100               	movlb	0	; () banked
  2305  001402  51E1               	movf	(??_modbus_rx_CRC_check+1)& (0+255),w,b
  2306  001404  6E24               	movwf	_regs2read+1,c
  2307                           
  2308                           ; BSR set to: 0
  2309                           ;dialtek_modbus.c: 219: crc_buf[1] = (unsigned char) (unsigned char)0x04;
  2310  001406  0E04               	movlw	4
  2311  001408                     L10:
  2312  001408  CFE8 F2FB          	movff	wreg,_crc_buf+1
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;dialtek_modbus.c: 220: crc_buf[4] = (unsigned char)(regs2read >> 8);
  2316  00140C  C024  F0E0         	movff	_regs2read+1,??_modbus_rx_CRC_check
  2317  001410  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2318  001414  0100               	movlb	0	; () banked
  2319  001416  6BE2               	clrf	(??_modbus_rx_CRC_check+2)& (0+255),b
  2320  001418  C0E1  F2FE         	movff	??_modbus_rx_CRC_check+1,_crc_buf+4
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;dialtek_modbus.c: 221: crc_buf[5] = (unsigned char)(regs2read & 0x00ff);
  2324  00141C  EE22  F0FF         	lfsr	2,_crc_buf+5
  2325  001420  C023  FFDF         	movff	_regs2read,indf2
  2326                           
  2327                           ;dialtek_modbus.c: 222: break;
  2328  001424  D00B               	goto	l1832
  2329  001426                     l1830:
  2330                           
  2331                           ; BSR set to: 0
  2332  001426  0100               	movlb	0	; () banked
  2333  001428  51E8               	movf	modbus_rx_CRC_check@modbus_cmd& (0+255),w,b
  2334                           
  2335                           ; Switch size 1, requested type "space"
  2336                           ; Number of cases is 3, Range of values is 3 to 6
  2337                           ; switch strategies available:
  2338                           ; Name         Instructions Cycles
  2339                           ; simple_byte           10     6 (average)
  2340                           ;	Chosen strategy is simple_byte
  2341  00142A  0A03               	xorlw	3	; case 3
  2342  00142C  B4D8               	btfsc	status,2,c
  2343  00142E  D7C7               	goto	l1812
  2344  001430  0A07               	xorlw	7	; case 4
  2345  001432  B4D8               	btfsc	status,2,c
  2346  001434  D7D7               	goto	l1820
  2347  001436  0A02               	xorlw	2	; case 6
  2348  001438  B4D8               	btfsc	status,2,c
  2349  00143A  D7A0               	goto	l1804
  2350  00143C                     l1832:
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;dialtek_modbus.c: 227: CRC16 = (rx_buf[6] << 8) | rx_buf[7];
  2354  00143C  0100               	movlb	0	; () banked
  2355  00143E  5167               	movf	(_rx_buf+7)& (0+255),w,b	;volatile
  2356  001440  0100               	movlb	0	; () banked
  2357  001442  C066  F0E0         	movff	_rx_buf+6,??_modbus_rx_CRC_check	;volatile
  2358  001446  0100               	movlb	0	; () banked
  2359  001448  6BE1               	clrf	(??_modbus_rx_CRC_check+1)& (0+255),b
  2360  00144A  C0E0  F0E1         	movff	??_modbus_rx_CRC_check,??_modbus_rx_CRC_check+1
  2361  00144E  0100               	movlb	0	; () banked
  2362  001450  6BE0               	clrf	??_modbus_rx_CRC_check& (0+255),b
  2363  001452  0100               	movlb	0	; () banked
  2364  001454  11E0               	iorwf	??_modbus_rx_CRC_check& (0+255),w,b
  2365  001456  6E15               	movwf	_CRC16,c
  2366  001458  0100               	movlb	0	; () banked
  2367  00145A  51E1               	movf	(??_modbus_rx_CRC_check+1)& (0+255),w,b
  2368  00145C  6E16               	movwf	_CRC16+1,c
  2369                           
  2370                           ; BSR set to: 0
  2371                           ;dialtek_modbus.c: 228: CRC16_calc = modbus_CRC16(crc_buf,6);
  2372  00145E  0E02               	movlw	high _crc_buf
  2373  001460  6E3E               	movwf	modbus_CRC16@buf+1,c
  2374  001462  0EFA               	movlw	low _crc_buf
  2375  001464  6E3D               	movwf	modbus_CRC16@buf,c
  2376  001466  0E00               	movlw	0
  2377  001468  6E40               	movwf	modbus_CRC16@len+1,c
  2378  00146A  0E06               	movlw	6
  2379  00146C  6E3F               	movwf	modbus_CRC16@len,c
  2380  00146E  EC6F  F00C         	call	_modbus_CRC16	;wreg free
  2381  001472  C03D  F0E3         	movff	?_modbus_CRC16,modbus_rx_CRC_check@CRC16_calc
  2382  001476  C03E  F0E4         	movff	?_modbus_CRC16+1,modbus_rx_CRC_check@CRC16_calc+1
  2383                           
  2384                           ;dialtek_modbus.c: 230: if(CRC16_calc == CRC16)
  2385  00147A  5016               	movf	_CRC16+1,w,c
  2386  00147C  0100               	movlb	0	; () banked
  2387  00147E  19E4               	xorwf	(modbus_rx_CRC_check@CRC16_calc+1)& (0+255),w,b
  2388  001480  E103               	bnz	u715
  2389  001482  5015               	movf	_CRC16,w,c
  2390  001484  0100               	movlb	0	; () banked
  2391  001486  19E3               	xorwf	modbus_rx_CRC_check@CRC16_calc& (0+255),w,b
  2392  001488                     u715:
  2393  001488  B4D8               	btfsc	status,2,c
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;dialtek_modbus.c: 231: ans = modbus_cmd;
  2397  00148A  C0E8  F0E7         	movff	modbus_rx_CRC_check@modbus_cmd,modbus_rx_CRC_check@ans
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;dialtek_modbus.c: 233: return ans;
  2401                           
  2402                           ; BSR set to: 0
  2403  00148E  0100               	movlb	0	; () banked
  2404  001490  51E7               	movf	modbus_rx_CRC_check@ans& (0+255),w,b
  2405  001492  0012               	return	
  2406  001494                     __end_of_modbus_rx_CRC_check:
  2407                           	opt stack 0
  2408                           tblptru	equ	0xFF8
  2409                           tblptrh	equ	0xFF7
  2410                           tblptrl	equ	0xFF6
  2411                           tablat	equ	0xFF5
  2412                           prodh	equ	0xFF4
  2413                           prodl	equ	0xFF3
  2414                           postinc0	equ	0xFEE
  2415                           wreg	equ	0xFE8
  2416                           indf1	equ	0xFE7
  2417                           postinc1	equ	0xFE6
  2418                           postdec1	equ	0xFE5
  2419                           fsr1h	equ	0xFE2
  2420                           fsr1l	equ	0xFE1
  2421                           indf2	equ	0xFDF
  2422                           postinc2	equ	0xFDE
  2423                           postdec2	equ	0xFDD
  2424                           fsr2h	equ	0xFDA
  2425                           fsr2l	equ	0xFD9
  2426                           status	equ	0xFD8
  2427                           
  2428 ;; *************** function _modbus_CRC16 *****************
  2429 ;; Defined at:
  2430 ;;		line 39 in file "src/c/dialtek_modbus.c"
  2431 ;; Parameters:    Size  Location     Type
  2432 ;;  buf             2   15[COMRAM] PTR unsigned char 
  2433 ;;		 -> crc_buf(300), 
  2434 ;;  len             2   17[COMRAM] unsigned int 
  2435 ;; Auto vars:     Size  Location     Type
  2436 ;;  i               2   28[COMRAM] int 
  2437 ;;  pos             2   26[COMRAM] unsigned int 
  2438 ;;  crc             2   30[COMRAM] unsigned int 
  2439 ;; Return value:  Size  Location     Type
  2440 ;;                  2   15[COMRAM] unsigned int 
  2441 ;; Registers used:
  2442 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2443 ;; Tracked objects:
  2444 ;;		On entry : 0/0
  2445 ;;		On exit  : 0/0
  2446 ;;		Unchanged: 0/0
  2447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2448 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2449 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2450 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2451 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2452 ;;Total ram usage:       17 bytes
  2453 ;; Hardware stack levels used:    1
  2454 ;; Hardware stack levels required when called:    2
  2455 ;; This function calls:
  2456 ;;		Nothing
  2457 ;; This function is called by:
  2458 ;;		_modbus_wsr_answer
  2459 ;;		_modbus_rhr_answer
  2460 ;;		_modbus_rir_answer
  2461 ;;		_modbus_rx_CRC_check
  2462 ;; This function uses a non-reentrant model
  2463 ;;
  2464                           
  2465                           	psect	text9
  2466  0018DE                     __ptext9:
  2467                           	opt stack 0
  2468  0018DE                     _modbus_CRC16:
  2469                           	opt stack 26
  2470                           
  2471                           ;dialtek_modbus.c: 43: unsigned int crc = 0xFFFF;
  2472                           
  2473                           ; BSR set to: 0
  2474                           ;incstack = 0
  2475  0018DE  684C               	setf	modbus_CRC16@crc,c
  2476  0018E0  684D               	setf	modbus_CRC16@crc+1,c
  2477                           
  2478                           ;dialtek_modbus.c: 45: for (unsigned int pos = 0; pos < len; pos++)
  2479  0018E2  0E00               	movlw	0
  2480  0018E4  6E49               	movwf	modbus_CRC16@pos+1,c
  2481  0018E6  0E00               	movlw	0
  2482  0018E8  6E48               	movwf	modbus_CRC16@pos,c
  2483  0018EA  D025               	goto	l1764
  2484  0018EC                     l1746:
  2485                           
  2486                           ;dialtek_modbus.c: 46: {
  2487                           ;dialtek_modbus.c: 47: crc ^= (unsigned int)buf[pos];
  2488  0018EC  5048               	movf	modbus_CRC16@pos,w,c
  2489  0018EE  243D               	addwf	modbus_CRC16@buf,w,c
  2490  0018F0  6ED9               	movwf	fsr2l,c
  2491  0018F2  5049               	movf	modbus_CRC16@pos+1,w,c
  2492  0018F4  203E               	addwfc	modbus_CRC16@buf+1,w,c
  2493  0018F6  6EDA               	movwf	fsr2h,c
  2494  0018F8  50DF               	movf	indf2,w,c
  2495  0018FA  6E41               	movwf	??_modbus_CRC16& (0+255),c
  2496  0018FC  5041               	movf	??_modbus_CRC16,w,c
  2497  0018FE  1A4C               	xorwf	modbus_CRC16@crc,f,c
  2498                           
  2499                           ;dialtek_modbus.c: 48: for (int i = 8; i != 0; i--)
  2500  001900  0E00               	movlw	0
  2501  001902  6E4B               	movwf	modbus_CRC16@i+1,c
  2502  001904  0E08               	movlw	8
  2503  001906  6E4A               	movwf	modbus_CRC16@i,c
  2504  001908  504B               	movf	modbus_CRC16@i+1,w,c
  2505  00190A  104A               	iorwf	modbus_CRC16@i,w,c
  2506  00190C  B4D8               	btfsc	status,2,c
  2507  00190E  D011               	goto	l1762
  2508                           
  2509                           ;dialtek_modbus.c: 49: {
  2510                           ;dialtek_modbus.c: 50: if ((crc & 0x0001) != 0)
  2511  001910  A04C               	btfss	modbus_CRC16@crc,0,c
  2512  001912  D008               	goto	l1758
  2513                           
  2514                           ;dialtek_modbus.c: 51: {
  2515                           ;dialtek_modbus.c: 52: crc >>= 1;
  2516  001914  90D8               	bcf	status,0,c
  2517  001916  324D               	rrcf	modbus_CRC16@crc+1,f,c
  2518  001918  324C               	rrcf	modbus_CRC16@crc,f,c
  2519                           
  2520                           ;dialtek_modbus.c: 53: crc ^= 0xA001;
  2521  00191A  0E01               	movlw	1
  2522  00191C  1A4C               	xorwf	modbus_CRC16@crc,f,c
  2523  00191E  0EA0               	movlw	160
  2524  001920  1A4D               	xorwf	modbus_CRC16@crc+1,f,c
  2525                           
  2526                           ;dialtek_modbus.c: 54: }
  2527  001922  D003               	goto	l230
  2528  001924                     l1758:
  2529                           
  2530                           ;dialtek_modbus.c: 55: else
  2531                           ;dialtek_modbus.c: 56: crc >>= 1;
  2532  001924  90D8               	bcf	status,0,c
  2533  001926  324D               	rrcf	modbus_CRC16@crc+1,f,c
  2534  001928  324C               	rrcf	modbus_CRC16@crc,f,c
  2535  00192A                     l230:
  2536  00192A  064A               	decf	modbus_CRC16@i,f,c
  2537  00192C  A0D8               	btfss	status,0,c
  2538  00192E  064B               	decf	modbus_CRC16@i+1,f,c
  2539  001930  D7EB               	goto	L11
  2540  001932                     l1762:
  2541  001932  4A48               	infsnz	modbus_CRC16@pos,f,c
  2542  001934  2A49               	incf	modbus_CRC16@pos+1,f,c
  2543  001936                     l1764:
  2544  001936  503F               	movf	modbus_CRC16@len,w,c
  2545  001938  5C48               	subwf	modbus_CRC16@pos,w,c
  2546  00193A  5040               	movf	modbus_CRC16@len+1,w,c
  2547  00193C  5849               	subwfb	modbus_CRC16@pos+1,w,c
  2548  00193E  A0D8               	btfss	status,0,c
  2549  001940  D7D5               	goto	l1746
  2550                           
  2551                           ;dialtek_modbus.c: 57: }
  2552                           ;dialtek_modbus.c: 58: }
  2553                           ;dialtek_modbus.c: 63: crc = ((crc<<8)&0xff00)|((crc>>8)&0x00ff);
  2554  001942  0E00               	movlw	0
  2555  001944  6E41               	movwf	??_modbus_CRC16& (0+255),c
  2556  001946  0EFF               	movlw	255
  2557  001948  6E42               	movwf	(??_modbus_CRC16+1)& (0+255),c
  2558  00194A  504C               	movf	modbus_CRC16@crc,w,c
  2559  00194C  6E44               	movwf	(??_modbus_CRC16+3)& (0+255),c
  2560  00194E  6A43               	clrf	(??_modbus_CRC16+2)& (0+255),c
  2561  001950  5041               	movf	??_modbus_CRC16,w,c
  2562  001952  1643               	andwf	??_modbus_CRC16+2,f,c
  2563  001954  5042               	movf	??_modbus_CRC16+1,w,c
  2564  001956  1644               	andwf	??_modbus_CRC16+3,f,c
  2565  001958  C04D  F045         	movff	modbus_CRC16@crc+1,??_modbus_CRC16+4
  2566  00195C  C045  F046         	movff	??_modbus_CRC16+4,??_modbus_CRC16+5
  2567  001960  6A47               	clrf	(??_modbus_CRC16+6)& (0+255),c
  2568  001962  5046               	movf	??_modbus_CRC16+5,w,c
  2569  001964  1043               	iorwf	??_modbus_CRC16+2,w,c
  2570  001966  6E4C               	movwf	modbus_CRC16@crc,c
  2571  001968  5044               	movf	??_modbus_CRC16+3,w,c
  2572  00196A  6E4D               	movwf	modbus_CRC16@crc+1,c
  2573                           
  2574                           ;dialtek_modbus.c: 65: return crc;
  2575  00196C  C04C  F03D         	movff	modbus_CRC16@crc,?_modbus_CRC16
  2576  001970  C04D  F03E         	movff	modbus_CRC16@crc+1,?_modbus_CRC16+1
  2577  001974  0012               	return	
  2578  001976                     __end_of_modbus_CRC16:
  2579                           	opt stack 0
  2580                           tblptru	equ	0xFF8
  2581                           tblptrh	equ	0xFF7
  2582                           tblptrl	equ	0xFF6
  2583                           tablat	equ	0xFF5
  2584                           prodh	equ	0xFF4
  2585                           prodl	equ	0xFF3
  2586                           postinc0	equ	0xFEE
  2587                           wreg	equ	0xFE8
  2588                           indf1	equ	0xFE7
  2589                           postinc1	equ	0xFE6
  2590                           postdec1	equ	0xFE5
  2591                           fsr1h	equ	0xFE2
  2592                           fsr1l	equ	0xFE1
  2593                           indf2	equ	0xFDF
  2594                           postinc2	equ	0xFDE
  2595                           postdec2	equ	0xFDD
  2596                           fsr2h	equ	0xFDA
  2597                           fsr2l	equ	0xFD9
  2598                           status	equ	0xFD8
  2599                           
  2600 ;; *************** function _holding_reg_write *****************
  2601 ;; Defined at:
  2602 ;;		line 333 in file "src/c/dialtek_modbus.c"
  2603 ;; Parameters:    Size  Location     Type
  2604 ;;  red_addr        2   15[COMRAM] unsigned int 
  2605 ;;  value           2   17[COMRAM] unsigned int 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;		None
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2617 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2619 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2620 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2621 ;;Total ram usage:        6 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    2
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_modbus_poll
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text10
  2632  001CA4                     __ptext10:
  2633                           	opt stack 0
  2634  001CA4                     _holding_reg_write:
  2635                           	opt stack 27
  2636                           
  2637                           ;dialtek_modbus.c: 335: holding_register[red_addr] = value;
  2638                           
  2639                           ;incstack = 0
  2640  001CA4  0E00               	movlw	low _holding_register
  2641  001CA6  6E41               	movwf	??_holding_reg_write& (0+255),c
  2642  001CA8  0E01               	movlw	high _holding_register
  2643  001CAA  6E42               	movwf	(??_holding_reg_write+1)& (0+255),c
  2644  001CAC  90D8               	bcf	status,0,c
  2645  001CAE  343D               	rlcf	holding_reg_write@red_addr,w,c
  2646  001CB0  6ED9               	movwf	fsr2l,c
  2647  001CB2  343E               	rlcf	holding_reg_write@red_addr+1,w,c
  2648  001CB4  6EDA               	movwf	fsr2h,c
  2649  001CB6  5041               	movf	??_holding_reg_write,w,c
  2650  001CB8  26D9               	addwf	fsr2l,f,c
  2651  001CBA  5042               	movf	??_holding_reg_write+1,w,c
  2652  001CBC  22DA               	addwfc	fsr2h,f,c
  2653  001CBE  C03F  FFDE         	movff	holding_reg_write@value,postinc2
  2654  001CC2  C040  FFDD         	movff	holding_reg_write@value+1,postdec2
  2655  001CC6  0012               	return	
  2656  001CC8                     __end_of_holding_reg_write:
  2657                           	opt stack 0
  2658                           tblptru	equ	0xFF8
  2659                           tblptrh	equ	0xFF7
  2660                           tblptrl	equ	0xFF6
  2661                           tablat	equ	0xFF5
  2662                           prodh	equ	0xFF4
  2663                           prodl	equ	0xFF3
  2664                           postinc0	equ	0xFEE
  2665                           wreg	equ	0xFE8
  2666                           indf1	equ	0xFE7
  2667                           postinc1	equ	0xFE6
  2668                           postdec1	equ	0xFE5
  2669                           fsr1h	equ	0xFE2
  2670                           fsr1l	equ	0xFE1
  2671                           indf2	equ	0xFDF
  2672                           postinc2	equ	0xFDE
  2673                           postdec2	equ	0xFDD
  2674                           fsr2h	equ	0xFDA
  2675                           fsr2l	equ	0xFD9
  2676                           status	equ	0xFD8
  2677                           
  2678 ;; *************** function _get_wr_reg_val *****************
  2679 ;; Defined at:
  2680 ;;		line 461 in file "src/c/dialtek_modbus.c"
  2681 ;; Parameters:    Size  Location     Type
  2682 ;;		None
  2683 ;; Auto vars:     Size  Location     Type
  2684 ;;		None
  2685 ;; Return value:  Size  Location     Type
  2686 ;;                  2   15[COMRAM] unsigned int 
  2687 ;; Registers used:
  2688 ;;		None
  2689 ;; Tracked objects:
  2690 ;;		On entry : 0/0
  2691 ;;		On exit  : 0/0
  2692 ;;		Unchanged: 0/0
  2693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2694 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2697 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2698 ;;Total ram usage:        2 bytes
  2699 ;; Hardware stack levels used:    1
  2700 ;; Hardware stack levels required when called:    2
  2701 ;; This function calls:
  2702 ;;		Nothing
  2703 ;; This function is called by:
  2704 ;;		_modbus_poll
  2705 ;; This function uses a non-reentrant model
  2706 ;;
  2707                           
  2708                           	psect	text11
  2709  001D82                     __ptext11:
  2710                           	opt stack 0
  2711  001D82                     _get_wr_reg_val:
  2712                           	opt stack 27
  2713                           
  2714                           ;dialtek_modbus.c: 463: return reg_wr_data;
  2715                           
  2716                           ;incstack = 0
  2717  001D82  C021  F03D         	movff	_reg_wr_data,?_get_wr_reg_val
  2718  001D86  C022  F03E         	movff	_reg_wr_data+1,?_get_wr_reg_val+1
  2719  001D8A  0012               	return	
  2720  001D8C                     __end_of_get_wr_reg_val:
  2721                           	opt stack 0
  2722                           tblptru	equ	0xFF8
  2723                           tblptrh	equ	0xFF7
  2724                           tblptrl	equ	0xFF6
  2725                           tablat	equ	0xFF5
  2726                           prodh	equ	0xFF4
  2727                           prodl	equ	0xFF3
  2728                           postinc0	equ	0xFEE
  2729                           wreg	equ	0xFE8
  2730                           indf1	equ	0xFE7
  2731                           postinc1	equ	0xFE6
  2732                           postdec1	equ	0xFE5
  2733                           fsr1h	equ	0xFE2
  2734                           fsr1l	equ	0xFE1
  2735                           indf2	equ	0xFDF
  2736                           postinc2	equ	0xFDE
  2737                           postdec2	equ	0xFDD
  2738                           fsr2h	equ	0xFDA
  2739                           fsr2l	equ	0xFD9
  2740                           status	equ	0xFD8
  2741                           
  2742 ;; *************** function _get_wr_reg_addr *****************
  2743 ;; Defined at:
  2744 ;;		line 354 in file "src/c/dialtek_modbus.c"
  2745 ;; Parameters:    Size  Location     Type
  2746 ;;		None
  2747 ;; Auto vars:     Size  Location     Type
  2748 ;;		None
  2749 ;; Return value:  Size  Location     Type
  2750 ;;                  2   15[COMRAM] unsigned int 
  2751 ;; Registers used:
  2752 ;;		None
  2753 ;; Tracked objects:
  2754 ;;		On entry : 0/0
  2755 ;;		On exit  : 0/0
  2756 ;;		Unchanged: 0/0
  2757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2758 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2759 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2761 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2762 ;;Total ram usage:        2 bytes
  2763 ;; Hardware stack levels used:    1
  2764 ;; Hardware stack levels required when called:    2
  2765 ;; This function calls:
  2766 ;;		Nothing
  2767 ;; This function is called by:
  2768 ;;		_modbus_poll
  2769 ;; This function uses a non-reentrant model
  2770 ;;
  2771                           
  2772                           	psect	text12
  2773  001D8C                     __ptext12:
  2774                           	opt stack 0
  2775  001D8C                     _get_wr_reg_addr:
  2776                           	opt stack 27
  2777                           
  2778                           ;dialtek_modbus.c: 356: return modbus_reg_addr;
  2779                           
  2780                           ;incstack = 0
  2781  001D8C  C01F  F03D         	movff	_modbus_reg_addr,?_get_wr_reg_addr
  2782  001D90  C020  F03E         	movff	_modbus_reg_addr+1,?_get_wr_reg_addr+1
  2783  001D94  0012               	return	
  2784  001D96                     __end_of_get_wr_reg_addr:
  2785                           	opt stack 0
  2786                           tblptru	equ	0xFF8
  2787                           tblptrh	equ	0xFF7
  2788                           tblptrl	equ	0xFF6
  2789                           tablat	equ	0xFF5
  2790                           prodh	equ	0xFF4
  2791                           prodl	equ	0xFF3
  2792                           postinc0	equ	0xFEE
  2793                           wreg	equ	0xFE8
  2794                           indf1	equ	0xFE7
  2795                           postinc1	equ	0xFE6
  2796                           postdec1	equ	0xFE5
  2797                           fsr1h	equ	0xFE2
  2798                           fsr1l	equ	0xFE1
  2799                           indf2	equ	0xFDF
  2800                           postinc2	equ	0xFDE
  2801                           postdec2	equ	0xFDD
  2802                           fsr2h	equ	0xFDA
  2803                           fsr2l	equ	0xFD9
  2804                           status	equ	0xFD8
  2805                           
  2806 ;; *************** function _delay_ms *****************
  2807 ;; Defined at:
  2808 ;;		line 38 in file "src/ToF MPD HVCMM.c"
  2809 ;; Parameters:    Size  Location     Type
  2810 ;;  ms              2   15[COMRAM] unsigned int 
  2811 ;; Auto vars:     Size  Location     Type
  2812 ;;		None
  2813 ;; Return value:  Size  Location     Type
  2814 ;;		None               void
  2815 ;; Registers used:
  2816 ;;		wreg, status,2, status,0
  2817 ;; Tracked objects:
  2818 ;;		On entry : 0/0
  2819 ;;		On exit  : 0/0
  2820 ;;		Unchanged: 0/0
  2821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2822 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2823 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2824 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2825 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2826 ;;Total ram usage:        3 bytes
  2827 ;; Hardware stack levels used:    1
  2828 ;; Hardware stack levels required when called:    2
  2829 ;; This function calls:
  2830 ;;		Nothing
  2831 ;; This function is called by:
  2832 ;;		_modbus_poll
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           	psect	text13
  2837  001CEA                     __ptext13:
  2838                           	opt stack 0
  2839  001CEA                     _delay_ms:
  2840                           	opt stack 27
  2841                           
  2842                           ;ToF MPD HVCMM.c: 40: while(--ms)
  2843                           
  2844                           ;incstack = 0
  2845  001CEA  D007               	goto	l1080
  2846  001CEC                     l1078:
  2847                           
  2848                           ;ToF MPD HVCMM.c: 41: _delay((unsigned long)((1)*(40000000/4000.0)));
  2849  001CEC  0E0D               	movlw	13
  2850  001CEE  6E3F               	movwf	??_delay_ms& (0+255),c
  2851  001CF0  0EFC               	movlw	252
  2852  001CF2                     u967:
  2853  001CF2  2EE8               	decfsz	wreg,f,c
  2854  001CF4  D7FE               	goto	u967
  2855  001CF6  2E3F               	decfsz	??_delay_ms& (0+255),f,c
  2856  001CF8  D7FC               	goto	u967
  2857  001CFA                     l1080:
  2858  001CFA  063D               	decf	delay_ms@ms,f,c
  2859  001CFC  A0D8               	btfss	status,0,c
  2860  001CFE  063E               	decf	delay_ms@ms+1,f,c
  2861  001D00  503E               	movf	(delay_ms@ms+1)& (0+255),w,c
  2862  001D02  103D               	iorwf	delay_ms@ms& (0+255),w,c
  2863  001D04  B4D8               	btfsc	status,2,c
  2864  001D06  0012               	return	
  2865  001D08  D7F1               	goto	l1078
  2866  001D0A                     __end_of_delay_ms:
  2867                           	opt stack 0
  2868                           tblptru	equ	0xFF8
  2869                           tblptrh	equ	0xFF7
  2870                           tblptrl	equ	0xFF6
  2871                           tablat	equ	0xFF5
  2872                           prodh	equ	0xFF4
  2873                           prodl	equ	0xFF3
  2874                           postinc0	equ	0xFEE
  2875                           wreg	equ	0xFE8
  2876                           indf1	equ	0xFE7
  2877                           postinc1	equ	0xFE6
  2878                           postdec1	equ	0xFE5
  2879                           fsr1h	equ	0xFE2
  2880                           fsr1l	equ	0xFE1
  2881                           indf2	equ	0xFDF
  2882                           postinc2	equ	0xFDE
  2883                           postdec2	equ	0xFDD
  2884                           fsr2h	equ	0xFDA
  2885                           fsr2l	equ	0xFD9
  2886                           status	equ	0xFD8
  2887                           
  2888 ;; *************** function _modbus_init *****************
  2889 ;; Defined at:
  2890 ;;		line 319 in file "src/c/dialtek_modbus.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;		None
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;		None
  2895 ;; Return value:  Size  Location     Type
  2896 ;;		None               void
  2897 ;; Registers used:
  2898 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2899 ;; Tracked objects:
  2900 ;;		On entry : 0/0
  2901 ;;		On exit  : 0/0
  2902 ;;		Unchanged: 0/0
  2903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2908 ;;Total ram usage:        0 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    3
  2911 ;; This function calls:
  2912 ;;		_UART_init
  2913 ;;		_modbus_reset
  2914 ;; This function is called by:
  2915 ;;		_main
  2916 ;; This function uses a non-reentrant model
  2917 ;;
  2918                           
  2919                           	psect	text14
  2920  001D76                     __ptext14:
  2921                           	opt stack 0
  2922  001D76                     _modbus_init:
  2923                           	opt stack 27
  2924                           
  2925                           ;dialtek_modbus.c: 322: UART_init(4);
  2926                           
  2927                           ;incstack = 0
  2928  001D76  0E04               	movlw	4
  2929  001D78  EC39  F00D         	call	_UART_init
  2930                           
  2931                           ;dialtek_modbus.c: 330: modbus_reset();
  2932  001D7C  ECF8  F00D         	call	_modbus_reset	;wreg free
  2933  001D80  0012               	return	
  2934  001D82                     __end_of_modbus_init:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           prodh	equ	0xFF4
  2941                           prodl	equ	0xFF3
  2942                           postinc0	equ	0xFEE
  2943                           wreg	equ	0xFE8
  2944                           indf1	equ	0xFE7
  2945                           postinc1	equ	0xFE6
  2946                           postdec1	equ	0xFE5
  2947                           fsr1h	equ	0xFE2
  2948                           fsr1l	equ	0xFE1
  2949                           indf2	equ	0xFDF
  2950                           postinc2	equ	0xFDE
  2951                           postdec2	equ	0xFDD
  2952                           fsr2h	equ	0xFDA
  2953                           fsr2l	equ	0xFD9
  2954                           status	equ	0xFD8
  2955                           
  2956 ;; *************** function _modbus_reset *****************
  2957 ;; Defined at:
  2958 ;;		line 308 in file "src/c/dialtek_modbus.c"
  2959 ;; Parameters:    Size  Location     Type
  2960 ;;		None
  2961 ;; Auto vars:     Size  Location     Type
  2962 ;;  i               2   15[COMRAM] int 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;		None               void
  2965 ;; Registers used:
  2966 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2973 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2975 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2976 ;;Total ram usage:        2 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    2
  2979 ;; This function calls:
  2980 ;;		Nothing
  2981 ;; This function is called by:
  2982 ;;		_modbus_get_poll
  2983 ;;		_modbus_init
  2984 ;;		_set_modbus_id
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text15
  2989  001BF0                     __ptext15:
  2990                           	opt stack 0
  2991  001BF0                     _modbus_reset:
  2992                           	opt stack 27
  2993                           
  2994                           ;dialtek_modbus.c: 311: for(int i = 0; i < 128; i++)
  2995                           
  2996                           ;incstack = 0
  2997  001BF0  0E00               	movlw	0
  2998  001BF2  6E3E               	movwf	modbus_reset@i+1,c
  2999  001BF4  0E00               	movlw	0
  3000  001BF6  6E3D               	movwf	modbus_reset@i,c
  3001  001BF8  503E               	movf	modbus_reset@i+1,w,c
  3002  001BFA  0A80               	xorlw	128
  3003  001BFC  0F80               	addlw	-128
  3004  001BFE  0E80               	movlw	128
  3005  001C00  B4D8               	btfsc	status,2,c
  3006  001C02  5C3D               	subwf	modbus_reset@i,w,c
  3007  001C04  B0D8               	btfsc	status,0,c
  3008  001C06  D00D               	goto	l1052
  3009                           
  3010                           ;dialtek_modbus.c: 312: rx_buf[i] = 0;
  3011  001C08  0100               	movlb	0	; () banked
  3012  001C0A  0E60               	movlw	low _rx_buf	;volatile
  3013  001C0C  243D               	addwf	modbus_reset@i,w,c
  3014  001C0E  6ED9               	movwf	fsr2l,c
  3015  001C10  0100               	movlb	0	; () banked
  3016  001C12  0E00               	movlw	high _rx_buf	;volatile
  3017  001C14  203E               	addwfc	modbus_reset@i+1,w,c
  3018  001C16  6EDA               	movwf	fsr2h,c
  3019  001C18  0E00               	movlw	0
  3020  001C1A  6EDF               	movwf	indf2,c
  3021                           
  3022                           ; BSR set to: 0
  3023  001C1C  4A3D               	infsnz	modbus_reset@i,f,c
  3024  001C1E  2A3E               	incf	modbus_reset@i+1,f,c
  3025  001C20  D7EB               	goto	L12
  3026  001C22                     l1052:
  3027                           
  3028                           ;dialtek_modbus.c: 314: rx_buf_ptr = 0;
  3029  001C22  0E00               	movlw	0
  3030  001C24  6E26               	movwf	_rx_buf_ptr+1,c	;volatile
  3031  001C26  0E00               	movlw	0
  3032  001C28  6E25               	movwf	_rx_buf_ptr,c	;volatile
  3033                           
  3034                           ;dialtek_modbus.c: 315: rx_flag = 0;
  3035  001C2A  0E00               	movlw	0
  3036  001C2C  6E2D               	movwf	_rx_flag,c
  3037  001C2E  0012               	return	
  3038  001C30                     __end_of_modbus_reset:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           prodh	equ	0xFF4
  3045                           prodl	equ	0xFF3
  3046                           postinc0	equ	0xFEE
  3047                           wreg	equ	0xFE8
  3048                           indf1	equ	0xFE7
  3049                           postinc1	equ	0xFE6
  3050                           postdec1	equ	0xFE5
  3051                           fsr1h	equ	0xFE2
  3052                           fsr1l	equ	0xFE1
  3053                           indf2	equ	0xFDF
  3054                           postinc2	equ	0xFDE
  3055                           postdec2	equ	0xFDD
  3056                           fsr2h	equ	0xFDA
  3057                           fsr2l	equ	0xFD9
  3058                           status	equ	0xFD8
  3059                           
  3060 ;; *************** function _UART_init *****************
  3061 ;; Defined at:
  3062 ;;		line 3 in file "src/c/25k80_uart.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;  bd_rate_code    1    wreg     unsigned char 
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;  bd_rate_code    1   15[COMRAM] unsigned char 
  3067 ;; Return value:  Size  Location     Type
  3068 ;;		None               void
  3069 ;; Registers used:
  3070 ;;		wreg, status,2, status,0
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3077 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3079 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3080 ;;Total ram usage:        1 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    2
  3083 ;; This function calls:
  3084 ;;		Nothing
  3085 ;; This function is called by:
  3086 ;;		_modbus_init
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           	psect	text16
  3091  001A72                     __ptext16:
  3092                           	opt stack 0
  3093  001A72                     _UART_init:
  3094                           	opt stack 27
  3095                           
  3096                           ;incstack = 0
  3097                           ;UART_init@bd_rate_code stored from wreg
  3098  001A72  6E3D               	movwf	UART_init@bd_rate_code,c
  3099                           
  3100                           ;25k80_uart.c: 5: switch(bd_rate_code)
  3101  001A74  D010               	goto	l1276
  3102  001A76                     l1252:
  3103  001A76  0E81               	movlw	129
  3104  001A78  D007               	goto	L16
  3105  001A7A                     l1256:
  3106  001A7A  0E40               	movlw	64
  3107  001A7C  D005               	goto	L16
  3108  001A7E                     l1260:
  3109  001A7E  0E2A               	movlw	42
  3110  001A80  D003               	goto	L16
  3111  001A82                     l1264:
  3112  001A82  0E15               	movlw	21
  3113  001A84  D001               	goto	L16
  3114  001A86                     l1268:
  3115  001A86  0E0A               	movlw	10
  3116  001A88                     L16:
  3117  001A88  6EAF               	movwf	4015,c	;volatile
  3118  001A8A  84AC               	bsf	4012,2,c	;volatile
  3119  001A8C  D018               	goto	l131
  3120  001A8E                     l1272:
  3121  001A8E  0E40               	movlw	64
  3122  001A90  6EAF               	movwf	4015,c	;volatile
  3123  001A92  94AC               	bcf	4012,2,c	;volatile
  3124                           
  3125                           ;25k80_uart.c: 15: }
  3126  001A94  D014               	goto	l131
  3127  001A96                     l1276:
  3128  001A96  503D               	movf	UART_init@bd_rate_code,w,c
  3129                           
  3130                           ; Switch size 1, requested type "space"
  3131                           ; Number of cases is 6, Range of values is 0 to 5
  3132                           ; switch strategies available:
  3133                           ; Name         Instructions Cycles
  3134                           ; simple_byte           19    10 (average)
  3135                           ;	Chosen strategy is simple_byte
  3136  001A98  0A00               	xorlw	0	; case 0
  3137  001A9A  B4D8               	btfsc	status,2,c
  3138  001A9C  D7F8               	goto	l1272
  3139  001A9E  0A01               	xorlw	1	; case 1
  3140  001AA0  B4D8               	btfsc	status,2,c
  3141  001AA2  D7E9               	goto	l1252
  3142  001AA4  0A03               	xorlw	3	; case 2
  3143  001AA6  B4D8               	btfsc	status,2,c
  3144  001AA8  D7E8               	goto	l1256
  3145  001AAA  0A01               	xorlw	1	; case 3
  3146  001AAC  B4D8               	btfsc	status,2,c
  3147  001AAE  D7E7               	goto	l1260
  3148  001AB0  0A07               	xorlw	7	; case 4
  3149  001AB2  B4D8               	btfsc	status,2,c
  3150  001AB4  D7E6               	goto	l1264
  3151  001AB6  0A01               	xorlw	1	; case 5
  3152  001AB8  B4D8               	btfsc	status,2,c
  3153  001ABA  D7E5               	goto	l1268
  3154  001ABC  D7E8               	goto	l1272
  3155  001ABE                     l131:
  3156                           
  3157                           ;25k80_uart.c: 17: TXSTA1bits.SYNC = 0;
  3158  001ABE  98AC               	bcf	4012,4,c	;volatile
  3159                           
  3160                           ;25k80_uart.c: 18: TXSTA1bits.TX9 = 0;
  3161  001AC0  9CAC               	bcf	4012,6,c	;volatile
  3162                           
  3163                           ;25k80_uart.c: 19: TXSTA1bits.TXEN = 1;
  3164  001AC2  8AAC               	bsf	4012,5,c	;volatile
  3165                           
  3166                           ;25k80_uart.c: 23: RCSTA1bits.CREN1 = 1;
  3167  001AC4  88AB               	bsf	4011,4,c	;volatile
  3168                           
  3169                           ;25k80_uart.c: 24: RCSTA1bits.RX9 = 0;
  3170  001AC6  9CAB               	bcf	4011,6,c	;volatile
  3171                           
  3172                           ;25k80_uart.c: 25: RCSTA1bits.SPEN = 1;
  3173  001AC8  8EAB               	bsf	4011,7,c	;volatile
  3174                           
  3175                           ;25k80_uart.c: 26: RCSTA1bits.CREN1 = 1;
  3176  001ACA  88AB               	bsf	4011,4,c	;volatile
  3177                           
  3178                           ;25k80_uart.c: 27: RCSTA1bits.FERR = 0;
  3179  001ACC  94AB               	bcf	4011,2,c	;volatile
  3180                           
  3181                           ;25k80_uart.c: 28: RCSTA1bits.OERR =0;
  3182  001ACE  92AB               	bcf	4011,1,c	;volatile
  3183                           
  3184                           ;25k80_uart.c: 31: BAUDCON1bits.RXDTP1 = 0;
  3185  001AD0  9AA7               	bcf	4007,5,c	;volatile
  3186                           
  3187                           ;25k80_uart.c: 32: BAUDCON1bits.TXCKP1 = 0;
  3188  001AD2  98A7               	bcf	4007,4,c	;volatile
  3189                           
  3190                           ;25k80_uart.c: 33: BAUDCON1bits.BRG16 = 0;
  3191  001AD4  96A7               	bcf	4007,3,c	;volatile
  3192                           
  3193                           ;25k80_uart.c: 35: BAUDCON1bits.ABDEN1 = 0;
  3194  001AD6  90A7               	bcf	4007,0,c	;volatile
  3195                           
  3196                           ;25k80_uart.c: 37: PIR1bits.RC1IF = 0;
  3197  001AD8  9A9E               	bcf	3998,5,c	;volatile
  3198  001ADA  0012               	return	
  3199  001ADC                     __end_of_UART_init:
  3200                           	opt stack 0
  3201                           tblptru	equ	0xFF8
  3202                           tblptrh	equ	0xFF7
  3203                           tblptrl	equ	0xFF6
  3204                           tablat	equ	0xFF5
  3205                           prodh	equ	0xFF4
  3206                           prodl	equ	0xFF3
  3207                           postinc0	equ	0xFEE
  3208                           wreg	equ	0xFE8
  3209                           indf1	equ	0xFE7
  3210                           postinc1	equ	0xFE6
  3211                           postdec1	equ	0xFE5
  3212                           fsr1h	equ	0xFE2
  3213                           fsr1l	equ	0xFE1
  3214                           indf2	equ	0xFDF
  3215                           postinc2	equ	0xFDE
  3216                           postdec2	equ	0xFDD
  3217                           fsr2h	equ	0xFDA
  3218                           fsr2l	equ	0xFD9
  3219                           status	equ	0xFD8
  3220                           
  3221 ;; *************** function _Meas_perform *****************
  3222 ;; Defined at:
  3223 ;;		line 117 in file "src/ToF MPD HVCMM.c"
  3224 ;; Parameters:    Size  Location     Type
  3225 ;;		None
  3226 ;; Auto vars:     Size  Location     Type
  3227 ;;  i               1   32[COMRAM] unsigned char 
  3228 ;; Return value:  Size  Location     Type
  3229 ;;		None               void
  3230 ;; Registers used:
  3231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3232 ;; Tracked objects:
  3233 ;;		On entry : 0/0
  3234 ;;		On exit  : 0/0
  3235 ;;		Unchanged: 0/0
  3236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3238 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3239 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3240 ;;      Totals:         1       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3241 ;;Total ram usage:        3 bytes
  3242 ;; Hardware stack levels used:    1
  3243 ;; Hardware stack levels required when called:    4
  3244 ;; This function calls:
  3245 ;;		_ADC_read_aver
  3246 ;;		_MX_set_ch
  3247 ;;		___lwdiv
  3248 ;; This function is called by:
  3249 ;;		_main
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text17
  3254  001602                     __ptext17:
  3255                           	opt stack 0
  3256  001602                     _Meas_perform:
  3257                           	opt stack 26
  3258                           
  3259                           ;ToF MPD HVCMM.c: 119: I_total = 0;
  3260                           
  3261                           ;incstack = 0
  3262  001602  0E00               	movlw	0
  3263  001604  6E18               	movwf	_I_total+1,c
  3264  001606  0E00               	movlw	0
  3265  001608  6E17               	movwf	_I_total,c
  3266                           
  3267                           ;ToF MPD HVCMM.c: 120: LATCbits.LATC3 = 0;
  3268  00160A  968B               	bcf	3979,3,c	;volatile
  3269                           
  3270                           ;ToF MPD HVCMM.c: 121: _delay((unsigned long)((50)*(40000000/4000000.0)));
  3271  00160C  0EA6               	movlw	166
  3272  00160E                     u977:
  3273  00160E  2EE8               	decfsz	wreg,f,c
  3274  001610  D7FE               	goto	u977
  3275  001612  D000               	nop2		;nop
  3276                           
  3277                           ;ToF MPD HVCMM.c: 123: zero_lvl = ADC_read_aver(10);
  3278  001614  0E0A               	movlw	10
  3279  001616  6E4A               	movwf	ADC_read_aver@aver_size,c
  3280  001618  0E00               	movlw	0
  3281  00161A  6E4B               	movwf	ADC_read_aver@aver_size+1,c
  3282  00161C  0E00               	movlw	0
  3283  00161E  6E4C               	movwf	ADC_read_aver@aver_size+2,c
  3284  001620  0E00               	movlw	0
  3285  001622  6E4D               	movwf	ADC_read_aver@aver_size+3,c
  3286  001624  EC12  F00C         	call	_ADC_read_aver	;wreg free
  3287  001628  C04A  F029         	movff	?_ADC_read_aver,_zero_lvl
  3288  00162C  C04B  F02A         	movff	?_ADC_read_aver+1,_zero_lvl+1
  3289                           
  3290                           ;ToF MPD HVCMM.c: 125: for(unsigned char i = 0; i < 5; i++)
  3291  001630  0E00               	movlw	0
  3292  001632  6E4E               	movwf	Meas_perform@i,c
  3293  001634  0E04               	movlw	4
  3294  001636  644E               	cpfsgt	Meas_perform@i,c
  3295  001638  D001               	goto	l2028
  3296  00163A  0012               	return	
  3297  00163C                     l2028:
  3298                           
  3299                           ;ToF MPD HVCMM.c: 126: {
  3300                           ;ToF MPD HVCMM.c: 127: MX_set_ch(i);
  3301  00163C  504E               	movf	Meas_perform@i,w,c
  3302  00163E  ECA1  F00D         	call	_MX_set_ch
  3303                           
  3304                           ;ToF MPD HVCMM.c: 129: V_Mx_Ch[i] = ADC_read_aver(10) - zero_lvl;
  3305  001642  C029  F0EA         	movff	_zero_lvl,??_Meas_perform
  3306  001646  C02A  F0EB         	movff	_zero_lvl+1,??_Meas_perform+1
  3307  00164A  0100               	movlb	0	; () banked
  3308  00164C  1FEA               	comf	??_Meas_perform& (0+255),f,b
  3309  00164E  1FEB               	comf	(??_Meas_perform+1)& (0+255),f,b
  3310  001650  4BEA               	infsnz	??_Meas_perform& (0+255),f,b
  3311  001652  2BEB               	incf	(??_Meas_perform+1)& (0+255),f,b
  3312  001654  0E0A               	movlw	10
  3313  001656  6E4A               	movwf	ADC_read_aver@aver_size,c
  3314  001658  0E00               	movlw	0
  3315  00165A  6E4B               	movwf	ADC_read_aver@aver_size+1,c
  3316  00165C  0E00               	movlw	0
  3317  00165E  6E4C               	movwf	ADC_read_aver@aver_size+2,c
  3318  001660  0E00               	movlw	0
  3319  001662  6E4D               	movwf	ADC_read_aver@aver_size+3,c
  3320  001664  EC12  F00C         	call	_ADC_read_aver	;wreg free
  3321  001668  0100               	movlb	0	; () banked
  3322  00166A  51EA               	movf	??_Meas_perform& (0+255),w,b
  3323  00166C  264A               	addwf	?_ADC_read_aver,f,c
  3324  00166E  0100               	movlb	0	; () banked
  3325  001670  51EB               	movf	(??_Meas_perform+1)& (0+255),w,b
  3326  001672  224B               	addwfc	?_ADC_read_aver+1,f,c
  3327  001674  504E               	movf	Meas_perform@i,w,c
  3328  001676  0D02               	mullw	2
  3329  001678  0E0B               	movlw	low _V_Mx_Ch
  3330  00167A  24F3               	addwf	prodl,w,c
  3331  00167C  6ED9               	movwf	fsr2l,c
  3332  00167E  0E00               	movlw	high _V_Mx_Ch
  3333  001680  20F4               	addwfc	prodh,w,c
  3334  001682  6EDA               	movwf	fsr2h,c
  3335  001684  C04A  FFDE         	movff	?_ADC_read_aver,postinc2
  3336  001688  C04B  FFDD         	movff	?_ADC_read_aver+1,postdec2
  3337                           
  3338                           ; BSR set to: 0
  3339                           ;ToF MPD HVCMM.c: 131: if( V_Mx_Ch[i] & (1<<15) )
  3340  00168C  504E               	movf	Meas_perform@i,w,c
  3341  00168E  0D02               	mullw	2
  3342  001690  0E0B               	movlw	low _V_Mx_Ch
  3343  001692  24F3               	addwf	prodl,w,c
  3344  001694  6ED9               	movwf	fsr2l,c
  3345  001696  0E00               	movlw	high _V_Mx_Ch
  3346  001698  20F4               	addwfc	prodh,w,c
  3347  00169A  6EDA               	movwf	fsr2h,c
  3348  00169C  CFDE F0EA          	movff	postinc2,??_Meas_perform
  3349  0016A0  CFDD F0EB          	movff	postdec2,??_Meas_perform+1
  3350  0016A4  0100               	movlb	0	; () banked
  3351  0016A6  AFEB               	btfss	(??_Meas_perform+1)& (0+255),7,b
  3352  0016A8  D019               	goto	l2036
  3353                           
  3354                           ; BSR set to: 0
  3355                           ;ToF MPD HVCMM.c: 132: I_Mx_Ch[i] = (~V_Mx_Ch[i]) / 5;
  3356  0016AA  504E               	movf	Meas_perform@i,w,c
  3357  0016AC  0D02               	mullw	2
  3358  0016AE  0E0B               	movlw	low _V_Mx_Ch
  3359  0016B0  24F3               	addwf	prodl,w,c
  3360  0016B2  6ED9               	movwf	fsr2l,c
  3361  0016B4  0E00               	movlw	high _V_Mx_Ch
  3362  0016B6  20F4               	addwfc	prodh,w,c
  3363  0016B8  6EDA               	movwf	fsr2h,c
  3364  0016BA  CFDE F0EA          	movff	postinc2,??_Meas_perform
  3365  0016BE  CFDD F0EB          	movff	postdec2,??_Meas_perform+1
  3366  0016C2  0100               	movlb	0	; () banked
  3367  0016C4  1DEA               	comf	??_Meas_perform& (0+255),w,b
  3368  0016C6  6E3D               	movwf	___lwdiv@dividend,c
  3369  0016C8  0100               	movlb	0	; () banked
  3370  0016CA  1DEB               	comf	(??_Meas_perform+1)& (0+255),w,b
  3371  0016CC  6E3E               	movwf	___lwdiv@dividend+1,c
  3372  0016CE  0E00               	movlw	0
  3373  0016D0  6E40               	movwf	___lwdiv@divisor+1,c
  3374  0016D2  0E05               	movlw	5
  3375  0016D4  6E3F               	movwf	___lwdiv@divisor,c
  3376  0016D6  ECCF  F00D         	call	___lwdiv	;wreg free
  3377  0016DA  D012               	goto	L17
  3378  0016DC                     l2036:
  3379                           
  3380                           ;ToF MPD HVCMM.c: 133: else
  3381                           ;ToF MPD HVCMM.c: 134: I_Mx_Ch[i] = V_Mx_Ch[i] / 5;
  3382  0016DC  504E               	movf	Meas_perform@i,w,c
  3383  0016DE  0D02               	mullw	2
  3384  0016E0  0E0B               	movlw	low _V_Mx_Ch
  3385  0016E2  24F3               	addwf	prodl,w,c
  3386  0016E4  6ED9               	movwf	fsr2l,c
  3387  0016E6  0E00               	movlw	high _V_Mx_Ch
  3388  0016E8  20F4               	addwfc	prodh,w,c
  3389  0016EA  6EDA               	movwf	fsr2h,c
  3390  0016EC  CFDE F03D          	movff	postinc2,___lwdiv@dividend
  3391  0016F0  CFDD F03E          	movff	postdec2,___lwdiv@dividend+1
  3392  0016F4  0E00               	movlw	0
  3393  0016F6  6E40               	movwf	___lwdiv@divisor+1,c
  3394  0016F8  0E05               	movlw	5
  3395  0016FA  6E3F               	movwf	___lwdiv@divisor,c
  3396  0016FC  ECCF  F00D         	call	___lwdiv	;wreg free
  3397  001700                     L17:
  3398  001700  504E               	movf	Meas_perform@i,w,c
  3399  001702  0D02               	mullw	2
  3400  001704  0E01               	movlw	low _I_Mx_Ch
  3401  001706  24F3               	addwf	prodl,w,c
  3402  001708  6ED9               	movwf	fsr2l,c
  3403  00170A  0E00               	movlw	high _I_Mx_Ch
  3404  00170C  20F4               	addwfc	prodh,w,c
  3405  00170E  6EDA               	movwf	fsr2h,c
  3406  001710  C03D  FFDE         	movff	?___lwdiv,postinc2
  3407  001714  C03E  FFDD         	movff	?___lwdiv+1,postdec2
  3408                           
  3409                           ;ToF MPD HVCMM.c: 136: I_total += I_Mx_Ch[i];
  3410  001718  504E               	movf	Meas_perform@i,w,c
  3411  00171A  0D02               	mullw	2
  3412  00171C  0E01               	movlw	low _I_Mx_Ch
  3413  00171E  24F3               	addwf	prodl,w,c
  3414  001720  6ED9               	movwf	fsr2l,c
  3415  001722  0E00               	movlw	high _I_Mx_Ch
  3416  001724  20F4               	addwfc	prodh,w,c
  3417  001726  6EDA               	movwf	fsr2h,c
  3418  001728  50DE               	movf	postinc2,w,c
  3419  00172A  2617               	addwf	_I_total,f,c
  3420  00172C  50DD               	movf	postdec2,w,c
  3421  00172E  2218               	addwfc	_I_total+1,f,c
  3422  001730  2A4E               	incf	Meas_perform@i,f,c
  3423  001732  0E04               	movlw	4
  3424  001734  644E               	cpfsgt	Meas_perform@i,c
  3425  001736  D782               	goto	l2028
  3426  001738  0012               	return	
  3427  00173A                     __end_of_Meas_perform:
  3428                           	opt stack 0
  3429                           tblptru	equ	0xFF8
  3430                           tblptrh	equ	0xFF7
  3431                           tblptrl	equ	0xFF6
  3432                           tablat	equ	0xFF5
  3433                           prodh	equ	0xFF4
  3434                           prodl	equ	0xFF3
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           indf1	equ	0xFE7
  3438                           postinc1	equ	0xFE6
  3439                           postdec1	equ	0xFE5
  3440                           fsr1h	equ	0xFE2
  3441                           fsr1l	equ	0xFE1
  3442                           indf2	equ	0xFDF
  3443                           postinc2	equ	0xFDE
  3444                           postdec2	equ	0xFDD
  3445                           fsr2h	equ	0xFDA
  3446                           fsr2l	equ	0xFD9
  3447                           status	equ	0xFD8
  3448                           
  3449 ;; *************** function ___lwdiv *****************
  3450 ;; Defined at:
  3451 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  3452 ;; Parameters:    Size  Location     Type
  3453 ;;  dividend        2   15[COMRAM] unsigned int 
  3454 ;;  divisor         2   17[COMRAM] unsigned int 
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;  quotient        2   19[COMRAM] unsigned int 
  3457 ;;  counter         1   21[COMRAM] unsigned char 
  3458 ;; Return value:  Size  Location     Type
  3459 ;;                  2   15[COMRAM] unsigned int 
  3460 ;; Registers used:
  3461 ;;		wreg, status,2, status,0
  3462 ;; Tracked objects:
  3463 ;;		On entry : 0/0
  3464 ;;		On exit  : 0/0
  3465 ;;		Unchanged: 0/0
  3466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3467 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3468 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3470 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3471 ;;Total ram usage:        7 bytes
  3472 ;; Hardware stack levels used:    1
  3473 ;; Hardware stack levels required when called:    2
  3474 ;; This function calls:
  3475 ;;		Nothing
  3476 ;; This function is called by:
  3477 ;;		_Meas_perform
  3478 ;; This function uses a non-reentrant model
  3479 ;;
  3480                           
  3481                           	psect	text18
  3482  001B9E                     __ptext18:
  3483                           	opt stack 0
  3484  001B9E                     ___lwdiv:
  3485                           	opt stack 27
  3486                           
  3487                           ;incstack = 0
  3488  001B9E  0E00               	movlw	0
  3489  001BA0  6E42               	movwf	___lwdiv@quotient+1,c
  3490  001BA2  0E00               	movlw	0
  3491  001BA4  6E41               	movwf	___lwdiv@quotient,c
  3492  001BA6  5040               	movf	___lwdiv@divisor+1,w,c
  3493  001BA8  103F               	iorwf	___lwdiv@divisor,w,c
  3494  001BAA  B4D8               	btfsc	status,2,c
  3495  001BAC  D01C               	goto	l861
  3496  001BAE  0E01               	movlw	1
  3497  001BB0  6E43               	movwf	___lwdiv@counter,c
  3498  001BB2  D004               	goto	l1286
  3499  001BB4                     l1284:
  3500  001BB4  90D8               	bcf	status,0,c
  3501  001BB6  363F               	rlcf	___lwdiv@divisor,f,c
  3502  001BB8  3640               	rlcf	___lwdiv@divisor+1,f,c
  3503  001BBA  2A43               	incf	___lwdiv@counter,f,c
  3504  001BBC                     l1286:
  3505  001BBC  AE40               	btfss	___lwdiv@divisor+1,7,c
  3506  001BBE  D7FA               	goto	l1284
  3507  001BC0                     l1288:
  3508  001BC0  90D8               	bcf	status,0,c
  3509  001BC2  3641               	rlcf	___lwdiv@quotient,f,c
  3510  001BC4  3642               	rlcf	___lwdiv@quotient+1,f,c
  3511  001BC6  503F               	movf	___lwdiv@divisor,w,c
  3512  001BC8  5C3D               	subwf	___lwdiv@dividend,w,c
  3513  001BCA  5040               	movf	___lwdiv@divisor+1,w,c
  3514  001BCC  583E               	subwfb	___lwdiv@dividend+1,w,c
  3515  001BCE  A0D8               	btfss	status,0,c
  3516  001BD0  D005               	goto	l1296
  3517  001BD2  503F               	movf	___lwdiv@divisor,w,c
  3518  001BD4  5E3D               	subwf	___lwdiv@dividend,f,c
  3519  001BD6  5040               	movf	___lwdiv@divisor+1,w,c
  3520  001BD8  5A3E               	subwfb	___lwdiv@dividend+1,f,c
  3521  001BDA  8041               	bsf	___lwdiv@quotient,0,c
  3522  001BDC                     l1296:
  3523  001BDC  90D8               	bcf	status,0,c
  3524  001BDE  3240               	rrcf	___lwdiv@divisor+1,f,c
  3525  001BE0  323F               	rrcf	___lwdiv@divisor,f,c
  3526  001BE2  2E43               	decfsz	___lwdiv@counter,f,c
  3527  001BE4  D7ED               	goto	l1288
  3528  001BE6                     l861:
  3529  001BE6  C041  F03D         	movff	___lwdiv@quotient,?___lwdiv
  3530  001BEA  C042  F03E         	movff	___lwdiv@quotient+1,?___lwdiv+1
  3531  001BEE  0012               	return	
  3532  001BF0                     __end_of___lwdiv:
  3533                           	opt stack 0
  3534                           tblptru	equ	0xFF8
  3535                           tblptrh	equ	0xFF7
  3536                           tblptrl	equ	0xFF6
  3537                           tablat	equ	0xFF5
  3538                           prodh	equ	0xFF4
  3539                           prodl	equ	0xFF3
  3540                           postinc0	equ	0xFEE
  3541                           wreg	equ	0xFE8
  3542                           indf1	equ	0xFE7
  3543                           postinc1	equ	0xFE6
  3544                           postdec1	equ	0xFE5
  3545                           fsr1h	equ	0xFE2
  3546                           fsr1l	equ	0xFE1
  3547                           indf2	equ	0xFDF
  3548                           postinc2	equ	0xFDE
  3549                           postdec2	equ	0xFDD
  3550                           fsr2h	equ	0xFDA
  3551                           fsr2l	equ	0xFD9
  3552                           status	equ	0xFD8
  3553                           
  3554 ;; *************** function _MX_set_ch *****************
  3555 ;; Defined at:
  3556 ;;		line 67 in file "src/ToF MPD HVCMM.c"
  3557 ;; Parameters:    Size  Location     Type
  3558 ;;  ch              1    wreg     unsigned char 
  3559 ;; Auto vars:     Size  Location     Type
  3560 ;;  ch              1   15[COMRAM] unsigned char 
  3561 ;; Return value:  Size  Location     Type
  3562 ;;		None               void
  3563 ;; Registers used:
  3564 ;;		wreg, status,2, status,0, cstack
  3565 ;; Tracked objects:
  3566 ;;		On entry : 0/0
  3567 ;;		On exit  : 0/0
  3568 ;;		Unchanged: 0/0
  3569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3571 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3573 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3574 ;;Total ram usage:        1 bytes
  3575 ;; Hardware stack levels used:    1
  3576 ;; Hardware stack levels required when called:    2
  3577 ;; This function calls:
  3578 ;;		Nothing
  3579 ;; This function is called by:
  3580 ;;		_Meas_perform
  3581 ;;		_modbus_poll
  3582 ;; This function uses a non-reentrant model
  3583 ;;
  3584                           
  3585                           	psect	text19
  3586  001B42                     __ptext19:
  3587                           	opt stack 0
  3588  001B42                     _MX_set_ch:
  3589                           	opt stack 27
  3590                           
  3591                           ;incstack = 0
  3592                           ;MX_set_ch@ch stored from wreg
  3593  001B42  6E3D               	movwf	MX_set_ch@ch,c
  3594                           
  3595                           ;ToF MPD HVCMM.c: 69: LATCbits.LATC3 = 0;
  3596  001B44  968B               	bcf	3979,3,c	;volatile
  3597                           
  3598                           ;ToF MPD HVCMM.c: 70: _delay((unsigned long)((1)*(40000000/4000000.0)));
  3599  001B46  0E03               	movlw	3
  3600  001B48                     u987:
  3601  001B48  2EE8               	decfsz	wreg,f,c
  3602  001B4A  D7FE               	goto	u987
  3603  001B4C  F000               	nop	
  3604                           
  3605                           ;ToF MPD HVCMM.c: 71: switch(ch)
  3606  001B4E  D010               	goto	l1086
  3607  001B50                     l82:
  3608                           
  3609                           ;ToF MPD HVCMM.c: 80: LATCbits.LATC0 = 1;
  3610  001B50  808B               	bsf	3979,0,c	;volatile
  3611  001B52  D00C               	goto	L21
  3612  001B54                     l83:
  3613                           
  3614                           ;ToF MPD HVCMM.c: 86: LATCbits.LATC0 = 0;
  3615  001B54  908B               	bcf	3979,0,c	;volatile
  3616  001B56  D003               	goto	L20
  3617  001B58                     L19:
  3618                           
  3619                           ;ToF MPD HVCMM.c: 88: LATCbits.LATC2 = 0;
  3620  001B58  948B               	bcf	3979,2,c	;volatile
  3621                           
  3622                           ;ToF MPD HVCMM.c: 89: break;
  3623  001B5A  D01B               	goto	l1088
  3624  001B5C                     l84:
  3625                           
  3626                           ;ToF MPD HVCMM.c: 92: LATCbits.LATC0 = 1;
  3627  001B5C  808B               	bsf	3979,0,c	;volatile
  3628  001B5E                     L20:
  3629                           
  3630                           ;ToF MPD HVCMM.c: 93: LATCbits.LATC1 = 1;
  3631  001B5E  828B               	bsf	3979,1,c	;volatile
  3632  001B60  D7FB               	goto	L19
  3633  001B62                     l85:
  3634                           
  3635                           ;ToF MPD HVCMM.c: 98: LATCbits.LATC0 = 0;
  3636  001B62  908B               	bcf	3979,0,c	;volatile
  3637                           
  3638                           ;ToF MPD HVCMM.c: 99: LATCbits.LATC1 = 0;
  3639  001B64  928B               	bcf	3979,1,c	;volatile
  3640                           
  3641                           ;ToF MPD HVCMM.c: 100: LATCbits.LATC2 = 1;
  3642  001B66  848B               	bsf	3979,2,c	;volatile
  3643                           
  3644                           ;ToF MPD HVCMM.c: 101: break;
  3645  001B68  D014               	goto	l1088
  3646  001B6A                     l86:
  3647                           
  3648                           ;ToF MPD HVCMM.c: 105: LATCbits.LATC0 = 0;
  3649  001B6A  908B               	bcf	3979,0,c	;volatile
  3650  001B6C                     L21:
  3651                           
  3652                           ;ToF MPD HVCMM.c: 106: LATCbits.LATC1 = 0;
  3653  001B6C  928B               	bcf	3979,1,c	;volatile
  3654  001B6E  D7F4               	goto	L19
  3655  001B70                     l1086:
  3656  001B70  503D               	movf	MX_set_ch@ch,w,c
  3657                           
  3658                           ; Switch size 1, requested type "space"
  3659                           ; Number of cases is 5, Range of values is 0 to 4
  3660                           ; switch strategies available:
  3661                           ; Name         Instructions Cycles
  3662                           ; simple_byte           16     9 (average)
  3663                           ;	Chosen strategy is simple_byte
  3664  001B72  0A00               	xorlw	0	; case 0
  3665  001B74  B4D8               	btfsc	status,2,c
  3666  001B76  D7F9               	goto	l86
  3667  001B78  0A01               	xorlw	1	; case 1
  3668  001B7A  B4D8               	btfsc	status,2,c
  3669  001B7C  D7E9               	goto	l82
  3670  001B7E  0A03               	xorlw	3	; case 2
  3671  001B80  B4D8               	btfsc	status,2,c
  3672  001B82  D7E8               	goto	l83
  3673  001B84  0A01               	xorlw	1	; case 3
  3674  001B86  B4D8               	btfsc	status,2,c
  3675  001B88  D7E9               	goto	l84
  3676  001B8A  0A07               	xorlw	7	; case 4
  3677  001B8C  B4D8               	btfsc	status,2,c
  3678  001B8E  D7E9               	goto	l85
  3679  001B90  D7EC               	goto	l86
  3680  001B92                     l1088:
  3681                           
  3682                           ;ToF MPD HVCMM.c: 111: _delay((unsigned long)((1)*(40000000/4000000.0)));
  3683  001B92  0E03               	movlw	3
  3684  001B94                     u997:
  3685  001B94  2EE8               	decfsz	wreg,f,c
  3686  001B96  D7FE               	goto	u997
  3687  001B98  F000               	nop	
  3688                           
  3689                           ;ToF MPD HVCMM.c: 112: LATCbits.LATC3 = 1;
  3690  001B9A  868B               	bsf	3979,3,c	;volatile
  3691  001B9C  0012               	return	
  3692  001B9E                     __end_of_MX_set_ch:
  3693                           	opt stack 0
  3694                           tblptru	equ	0xFF8
  3695                           tblptrh	equ	0xFF7
  3696                           tblptrl	equ	0xFF6
  3697                           tablat	equ	0xFF5
  3698                           prodh	equ	0xFF4
  3699                           prodl	equ	0xFF3
  3700                           postinc0	equ	0xFEE
  3701                           wreg	equ	0xFE8
  3702                           indf1	equ	0xFE7
  3703                           postinc1	equ	0xFE6
  3704                           postdec1	equ	0xFE5
  3705                           fsr1h	equ	0xFE2
  3706                           fsr1l	equ	0xFE1
  3707                           indf2	equ	0xFDF
  3708                           postinc2	equ	0xFDE
  3709                           postdec2	equ	0xFDD
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _ADC_read_aver *****************
  3715 ;; Defined at:
  3716 ;;		line 34 in file "src/c/25k80_adc.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;  aver_size       4   28[COMRAM] unsigned long 
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;  i               2    8[BANK0 ] unsigned int 
  3721 ;;  ADC_aver        4    4[BANK0 ] unsigned long 
  3722 ;; Return value:  Size  Location     Type
  3723 ;;                  2   28[COMRAM] unsigned int 
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0, cstack
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3731 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3732 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3733 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3734 ;;      Totals:         4      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3735 ;;Total ram usage:       14 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    3
  3738 ;; This function calls:
  3739 ;;		_ADC_read
  3740 ;;		___lldiv
  3741 ;; This function is called by:
  3742 ;;		_Meas_perform
  3743 ;; This function uses a non-reentrant model
  3744 ;;
  3745                           
  3746                           	psect	text20
  3747  001824                     __ptext20:
  3748                           	opt stack 0
  3749  001824                     _ADC_read_aver:
  3750                           	opt stack 26
  3751                           
  3752                           ;25k80_adc.c: 36: unsigned long ADC_aver = 0;
  3753                           
  3754                           ;incstack = 0
  3755  001824  0E00               	movlw	0
  3756  001826  0100               	movlb	0	; () banked
  3757  001828  6FE4               	movwf	ADC_read_aver@ADC_aver& (0+255),b
  3758  00182A  0E00               	movlw	0
  3759  00182C  0100               	movlb	0	; () banked
  3760  00182E  6FE5               	movwf	(ADC_read_aver@ADC_aver+1)& (0+255),b
  3761  001830  0E00               	movlw	0
  3762  001832  0100               	movlb	0	; () banked
  3763  001834  6FE6               	movwf	(ADC_read_aver@ADC_aver+2)& (0+255),b
  3764  001836  0E00               	movlw	0
  3765  001838  0100               	movlb	0	; () banked
  3766  00183A  6FE7               	movwf	(ADC_read_aver@ADC_aver+3)& (0+255),b
  3767                           
  3768                           ;25k80_adc.c: 38: for(unsigned int i = 0; i < aver_size; i++)
  3769  00183C  0E00               	movlw	0
  3770  00183E  0100               	movlb	0	; () banked
  3771  001840  6FE9               	movwf	(ADC_read_aver@i+1)& (0+255),b
  3772  001842  0E00               	movlw	0
  3773  001844  0100               	movlb	0	; () banked
  3774  001846  6FE8               	movwf	ADC_read_aver@i& (0+255),b
  3775  001848  D011               	goto	l1872
  3776  00184A                     l1868:
  3777                           
  3778                           ; BSR set to: 0
  3779                           ;25k80_adc.c: 39: ADC_aver += (unsigned long)ADC_read();
  3780  00184A  EC18  F00E         	call	_ADC_read	;wreg free
  3781  00184E  503D               	movf	?_ADC_read,w,c
  3782  001850  0100               	movlb	0	; () banked
  3783  001852  27E4               	addwf	ADC_read_aver@ADC_aver& (0+255),f,b
  3784  001854  503E               	movf	?_ADC_read+1,w,c
  3785  001856  0100               	movlb	0	; () banked
  3786  001858  23E5               	addwfc	(ADC_read_aver@ADC_aver+1)& (0+255),f,b
  3787  00185A  0E00               	movlw	0
  3788  00185C  0100               	movlb	0	; () banked
  3789  00185E  23E6               	addwfc	(ADC_read_aver@ADC_aver+2)& (0+255),f,b
  3790  001860  0E00               	movlw	0
  3791  001862  0100               	movlb	0	; () banked
  3792  001864  23E7               	addwfc	(ADC_read_aver@ADC_aver+3)& (0+255),f,b
  3793                           
  3794                           ; BSR set to: 0
  3795  001866  0100               	movlb	0	; () banked
  3796  001868  4BE8               	infsnz	ADC_read_aver@i& (0+255),f,b
  3797  00186A  2BE9               	incf	(ADC_read_aver@i+1)& (0+255),f,b
  3798  00186C                     l1872:
  3799                           
  3800                           ; BSR set to: 0
  3801  00186C  0100               	movlb	0	; () banked
  3802  00186E  51E8               	movf	ADC_read_aver@i& (0+255),w,b
  3803  001870  0100               	movlb	0	; () banked
  3804  001872  6FE0               	movwf	??_ADC_read_aver& (0+255),b
  3805  001874  0100               	movlb	0	; () banked
  3806  001876  51E9               	movf	(ADC_read_aver@i+1)& (0+255),w,b
  3807  001878  0100               	movlb	0	; () banked
  3808  00187A  6FE1               	movwf	(??_ADC_read_aver+1)& (0+255),b
  3809  00187C  0100               	movlb	0	; () banked
  3810  00187E  6BE2               	clrf	(??_ADC_read_aver+2)& (0+255),b
  3811  001880  0100               	movlb	0	; () banked
  3812  001882  6BE3               	clrf	(??_ADC_read_aver+3)& (0+255),b
  3813  001884  504A               	movf	ADC_read_aver@aver_size,w,c
  3814  001886  0100               	movlb	0	; () banked
  3815  001888  5DE0               	subwf	??_ADC_read_aver& (0+255),w,b
  3816  00188A  504B               	movf	ADC_read_aver@aver_size+1,w,c
  3817  00188C  0100               	movlb	0	; () banked
  3818  00188E  59E1               	subwfb	(??_ADC_read_aver+1)& (0+255),w,b
  3819  001890  504C               	movf	ADC_read_aver@aver_size+2,w,c
  3820  001892  0100               	movlb	0	; () banked
  3821  001894  59E2               	subwfb	(??_ADC_read_aver+2)& (0+255),w,b
  3822  001896  504D               	movf	ADC_read_aver@aver_size+3,w,c
  3823  001898  0100               	movlb	0	; () banked
  3824  00189A  59E3               	subwfb	(??_ADC_read_aver+3)& (0+255),w,b
  3825  00189C  A0D8               	btfss	status,0,c
  3826  00189E  D7D5               	goto	l1868
  3827                           
  3828                           ; BSR set to: 0
  3829                           ;25k80_adc.c: 41: return (unsigned int)(ADC_aver/aver_size);
  3830                           
  3831                           ; BSR set to: 0
  3832  0018A0  C0E4  F03D         	movff	ADC_read_aver@ADC_aver,___lldiv@dividend
  3833  0018A4  C0E5  F03E         	movff	ADC_read_aver@ADC_aver+1,___lldiv@dividend+1
  3834  0018A8  C0E6  F03F         	movff	ADC_read_aver@ADC_aver+2,___lldiv@dividend+2
  3835  0018AC  C0E7  F040         	movff	ADC_read_aver@ADC_aver+3,___lldiv@dividend+3
  3836  0018B0  C04A  F041         	movff	ADC_read_aver@aver_size,___lldiv@divisor
  3837  0018B4  C04B  F042         	movff	ADC_read_aver@aver_size+1,___lldiv@divisor+1
  3838  0018B8  C04C  F043         	movff	ADC_read_aver@aver_size+2,___lldiv@divisor+2
  3839  0018BC  C04D  F044         	movff	ADC_read_aver@aver_size+3,___lldiv@divisor+3
  3840  0018C0  ECBB  F00C         	call	___lldiv	;wreg free
  3841  0018C4  C03D  F0E0         	movff	?___lldiv,??_ADC_read_aver
  3842  0018C8  C03E  F0E1         	movff	?___lldiv+1,??_ADC_read_aver+1
  3843  0018CC  C03F  F0E2         	movff	?___lldiv+2,??_ADC_read_aver+2
  3844  0018D0  C040  F0E3         	movff	?___lldiv+3,??_ADC_read_aver+3
  3845  0018D4  C0E0  F04A         	movff	??_ADC_read_aver,?_ADC_read_aver
  3846  0018D8  C0E1  F04B         	movff	??_ADC_read_aver+1,?_ADC_read_aver+1
  3847  0018DC  0012               	return	
  3848  0018DE                     __end_of_ADC_read_aver:
  3849                           	opt stack 0
  3850                           tblptru	equ	0xFF8
  3851                           tblptrh	equ	0xFF7
  3852                           tblptrl	equ	0xFF6
  3853                           tablat	equ	0xFF5
  3854                           prodh	equ	0xFF4
  3855                           prodl	equ	0xFF3
  3856                           postinc0	equ	0xFEE
  3857                           wreg	equ	0xFE8
  3858                           indf1	equ	0xFE7
  3859                           postinc1	equ	0xFE6
  3860                           postdec1	equ	0xFE5
  3861                           fsr1h	equ	0xFE2
  3862                           fsr1l	equ	0xFE1
  3863                           indf2	equ	0xFDF
  3864                           postinc2	equ	0xFDE
  3865                           postdec2	equ	0xFDD
  3866                           fsr2h	equ	0xFDA
  3867                           fsr2l	equ	0xFD9
  3868                           status	equ	0xFD8
  3869                           
  3870 ;; *************** function ___lldiv *****************
  3871 ;; Defined at:
  3872 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lldiv.c"
  3873 ;; Parameters:    Size  Location     Type
  3874 ;;  dividend        4   15[COMRAM] unsigned long 
  3875 ;;  divisor         4   19[COMRAM] unsigned long 
  3876 ;; Auto vars:     Size  Location     Type
  3877 ;;  quotient        4   23[COMRAM] unsigned long 
  3878 ;;  counter         1   27[COMRAM] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  4   15[COMRAM] unsigned long 
  3881 ;; Registers used:
  3882 ;;		wreg, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3888 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3889 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3890 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3891 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3892 ;;Total ram usage:       13 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; Hardware stack levels required when called:    2
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_ADC_read_aver
  3899 ;; This function uses a non-reentrant model
  3900 ;;
  3901                           
  3902                           	psect	text21
  3903  001976                     __ptext21:
  3904                           	opt stack 0
  3905  001976                     ___lldiv:
  3906                           	opt stack 26
  3907                           
  3908                           ;incstack = 0
  3909  001976  0E00               	movlw	0
  3910  001978  6E45               	movwf	___lldiv@quotient,c
  3911  00197A  0E00               	movlw	0
  3912  00197C  6E46               	movwf	___lldiv@quotient+1,c
  3913  00197E  0E00               	movlw	0
  3914  001980  6E47               	movwf	___lldiv@quotient+2,c
  3915  001982  0E00               	movlw	0
  3916  001984  6E48               	movwf	___lldiv@quotient+3,c
  3917  001986  5044               	movf	___lldiv@divisor+3,w,c
  3918  001988  1041               	iorwf	___lldiv@divisor,w,c
  3919  00198A  1042               	iorwf	___lldiv@divisor+1,w,c
  3920  00198C  1043               	iorwf	___lldiv@divisor+2,w,c
  3921  00198E  B4D8               	btfsc	status,2,c
  3922  001990  D02A               	goto	l798
  3923  001992  0E01               	movlw	1
  3924  001994  6E49               	movwf	___lldiv@counter,c
  3925  001996  D006               	goto	l1852
  3926  001998                     l1850:
  3927  001998  90D8               	bcf	status,0,c
  3928  00199A  3641               	rlcf	___lldiv@divisor,f,c
  3929  00199C  3642               	rlcf	___lldiv@divisor+1,f,c
  3930  00199E  3643               	rlcf	___lldiv@divisor+2,f,c
  3931  0019A0  3644               	rlcf	___lldiv@divisor+3,f,c
  3932  0019A2  2A49               	incf	___lldiv@counter,f,c
  3933  0019A4                     l1852:
  3934  0019A4  AE44               	btfss	___lldiv@divisor+3,7,c
  3935  0019A6  D7F8               	goto	l1850
  3936  0019A8                     l1854:
  3937  0019A8  90D8               	bcf	status,0,c
  3938  0019AA  3645               	rlcf	___lldiv@quotient,f,c
  3939  0019AC  3646               	rlcf	___lldiv@quotient+1,f,c
  3940  0019AE  3647               	rlcf	___lldiv@quotient+2,f,c
  3941  0019B0  3648               	rlcf	___lldiv@quotient+3,f,c
  3942  0019B2  5041               	movf	___lldiv@divisor,w,c
  3943  0019B4  5C3D               	subwf	___lldiv@dividend,w,c
  3944  0019B6  5042               	movf	___lldiv@divisor+1,w,c
  3945  0019B8  583E               	subwfb	___lldiv@dividend+1,w,c
  3946  0019BA  5043               	movf	___lldiv@divisor+2,w,c
  3947  0019BC  583F               	subwfb	___lldiv@dividend+2,w,c
  3948  0019BE  5044               	movf	___lldiv@divisor+3,w,c
  3949  0019C0  5840               	subwfb	___lldiv@dividend+3,w,c
  3950  0019C2  A0D8               	btfss	status,0,c
  3951  0019C4  D009               	goto	l1862
  3952  0019C6  5041               	movf	___lldiv@divisor,w,c
  3953  0019C8  5E3D               	subwf	___lldiv@dividend,f,c
  3954  0019CA  5042               	movf	___lldiv@divisor+1,w,c
  3955  0019CC  5A3E               	subwfb	___lldiv@dividend+1,f,c
  3956  0019CE  5043               	movf	___lldiv@divisor+2,w,c
  3957  0019D0  5A3F               	subwfb	___lldiv@dividend+2,f,c
  3958  0019D2  5044               	movf	___lldiv@divisor+3,w,c
  3959  0019D4  5A40               	subwfb	___lldiv@dividend+3,f,c
  3960  0019D6  8045               	bsf	___lldiv@quotient,0,c
  3961  0019D8                     l1862:
  3962  0019D8  90D8               	bcf	status,0,c
  3963  0019DA  3244               	rrcf	___lldiv@divisor+3,f,c
  3964  0019DC  3243               	rrcf	___lldiv@divisor+2,f,c
  3965  0019DE  3242               	rrcf	___lldiv@divisor+1,f,c
  3966  0019E0  3241               	rrcf	___lldiv@divisor,f,c
  3967  0019E2  2E49               	decfsz	___lldiv@counter,f,c
  3968  0019E4  D7E1               	goto	l1854
  3969  0019E6                     l798:
  3970  0019E6  C045  F03D         	movff	___lldiv@quotient,?___lldiv
  3971  0019EA  C046  F03E         	movff	___lldiv@quotient+1,?___lldiv+1
  3972  0019EE  C047  F03F         	movff	___lldiv@quotient+2,?___lldiv+2
  3973  0019F2  C048  F040         	movff	___lldiv@quotient+3,?___lldiv+3
  3974  0019F6  0012               	return	
  3975  0019F8                     __end_of___lldiv:
  3976                           	opt stack 0
  3977                           tblptru	equ	0xFF8
  3978                           tblptrh	equ	0xFF7
  3979                           tblptrl	equ	0xFF6
  3980                           tablat	equ	0xFF5
  3981                           prodh	equ	0xFF4
  3982                           prodl	equ	0xFF3
  3983                           postinc0	equ	0xFEE
  3984                           wreg	equ	0xFE8
  3985                           indf1	equ	0xFE7
  3986                           postinc1	equ	0xFE6
  3987                           postdec1	equ	0xFE5
  3988                           fsr1h	equ	0xFE2
  3989                           fsr1l	equ	0xFE1
  3990                           indf2	equ	0xFDF
  3991                           postinc2	equ	0xFDE
  3992                           postdec2	equ	0xFDD
  3993                           fsr2h	equ	0xFDA
  3994                           fsr2l	equ	0xFD9
  3995                           status	equ	0xFD8
  3996                           
  3997 ;; *************** function _ADC_read *****************
  3998 ;; Defined at:
  3999 ;;		line 19 in file "src/c/25k80_adc.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;  ADC_result      2   19[COMRAM] unsigned int 
  4004 ;; Return value:  Size  Location     Type
  4005 ;;                  2   15[COMRAM] unsigned int 
  4006 ;; Registers used:
  4007 ;;		wreg, status,2, status,0
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4013 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4015 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4016 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4017 ;;Total ram usage:        6 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    2
  4020 ;; This function calls:
  4021 ;;		Nothing
  4022 ;; This function is called by:
  4023 ;;		_ADC_read_aver
  4024 ;; This function uses a non-reentrant model
  4025 ;;
  4026                           
  4027                           	psect	text22
  4028  001C30                     __ptext22:
  4029                           	opt stack 0
  4030  001C30                     _ADC_read:
  4031                           	opt stack 26
  4032                           
  4033                           ;25k80_adc.c: 21: unsigned int ADC_result = 0;
  4034                           
  4035                           ;incstack = 0
  4036  001C30  0E00               	movlw	0
  4037  001C32  6E42               	movwf	ADC_read@ADC_result+1,c
  4038  001C34  0E00               	movlw	0
  4039  001C36  6E41               	movwf	ADC_read@ADC_result,c
  4040                           
  4041                           ;25k80_adc.c: 23: _delay((unsigned long)((500)*(40000000/4000000.0)));
  4042  001C38  0E07               	movlw	7
  4043  001C3A  6E3F               	movwf	??_ADC_read& (0+255),c
  4044  001C3C  0E7D               	movlw	125
  4045  001C3E                     u1007:
  4046  001C3E  2EE8               	decfsz	wreg,f,c
  4047  001C40  D7FE               	goto	u1007
  4048  001C42  2E3F               	decfsz	??_ADC_read& (0+255),f,c
  4049  001C44  D7FC               	goto	u1007
  4050  001C46  F000               	nop	
  4051                           
  4052                           ;25k80_adc.c: 24: GO_nDONE = 1;
  4053  001C48  82C2               	bsf	4034,1,c	;volatile
  4054  001C4A                     l166:
  4055  001C4A  B2C2               	btfsc	4034,1,c	;volatile
  4056  001C4C  D7FE               	goto	l166
  4057                           
  4058                           ;25k80_adc.c: 28: ADC_result = (ADRESH << 8) | ADRESL;
  4059  001C4E  50C3               	movf	4035,w,c	;volatile
  4060  001C50  CFC4 F03F          	movff	4036,??_ADC_read	;volatile
  4061  001C54  6A40               	clrf	(??_ADC_read+1)& (0+255),c
  4062  001C56  C03F  F040         	movff	??_ADC_read,??_ADC_read+1
  4063  001C5A  6A3F               	clrf	??_ADC_read,c
  4064  001C5C  103F               	iorwf	??_ADC_read,w,c
  4065  001C5E  6E41               	movwf	ADC_read@ADC_result,c
  4066  001C60  5040               	movf	??_ADC_read+1,w,c
  4067  001C62  6E42               	movwf	ADC_read@ADC_result+1,c
  4068                           
  4069                           ;25k80_adc.c: 29: PIR1bits.ADIF = 0;
  4070  001C64  9C9E               	bcf	3998,6,c	;volatile
  4071                           
  4072                           ;25k80_adc.c: 31: return ADC_result;
  4073  001C66  C041  F03D         	movff	ADC_read@ADC_result,?_ADC_read
  4074  001C6A  C042  F03E         	movff	ADC_read@ADC_result+1,?_ADC_read+1
  4075  001C6E  0012               	return	
  4076  001C70                     __end_of_ADC_read:
  4077                           	opt stack 0
  4078                           tblptru	equ	0xFF8
  4079                           tblptrh	equ	0xFF7
  4080                           tblptrl	equ	0xFF6
  4081                           tablat	equ	0xFF5
  4082                           prodh	equ	0xFF4
  4083                           prodl	equ	0xFF3
  4084                           postinc0	equ	0xFEE
  4085                           wreg	equ	0xFE8
  4086                           indf1	equ	0xFE7
  4087                           postinc1	equ	0xFE6
  4088                           postdec1	equ	0xFE5
  4089                           fsr1h	equ	0xFE2
  4090                           fsr1l	equ	0xFE1
  4091                           indf2	equ	0xFDF
  4092                           postinc2	equ	0xFDE
  4093                           postdec2	equ	0xFDD
  4094                           fsr2h	equ	0xFDA
  4095                           fsr2l	equ	0xFD9
  4096                           status	equ	0xFD8
  4097                           
  4098 ;; *************** function _Interrupt_init *****************
  4099 ;; Defined at:
  4100 ;;		line 44 in file "src/ToF MPD HVCMM.c"
  4101 ;; Parameters:    Size  Location     Type
  4102 ;;		None
  4103 ;; Auto vars:     Size  Location     Type
  4104 ;;		None
  4105 ;; Return value:  Size  Location     Type
  4106 ;;		None               void
  4107 ;; Registers used:
  4108 ;;		None
  4109 ;; Tracked objects:
  4110 ;;		On entry : 0/0
  4111 ;;		On exit  : 0/0
  4112 ;;		Unchanged: 0/0
  4113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4118 ;;Total ram usage:        0 bytes
  4119 ;; Hardware stack levels used:    1
  4120 ;; Hardware stack levels required when called:    2
  4121 ;; This function calls:
  4122 ;;		Nothing
  4123 ;; This function is called by:
  4124 ;;		_main
  4125 ;; This function uses a non-reentrant model
  4126 ;;
  4127                           
  4128                           	psect	text23
  4129  001D5C                     __ptext23:
  4130                           	opt stack 0
  4131  001D5C                     _Interrupt_init:
  4132                           	opt stack 28
  4133                           
  4134                           ;ToF MPD HVCMM.c: 46: RCONbits.IPEN = 0;
  4135                           
  4136                           ;incstack = 0
  4137  001D5C  9ED0               	bcf	4048,7,c	;volatile
  4138                           
  4139                           ;ToF MPD HVCMM.c: 47: INTCONbits.GIEH = 1;
  4140  001D5E  8EF2               	bsf	intcon,7,c	;volatile
  4141                           
  4142                           ;ToF MPD HVCMM.c: 48: INTCONbits.GIEL = 1;
  4143  001D60  8CF2               	bsf	intcon,6,c	;volatile
  4144                           
  4145                           ;ToF MPD HVCMM.c: 50: PIR1bits.ADIF = 0;
  4146  001D62  9C9E               	bcf	3998,6,c	;volatile
  4147                           
  4148                           ;ToF MPD HVCMM.c: 51: PIE1bits.ADIE = 0;
  4149  001D64  9C9D               	bcf	3997,6,c	;volatile
  4150                           
  4151                           ;ToF MPD HVCMM.c: 52: PIE1bits.RC1IE = 1;
  4152  001D66  8A9D               	bsf	3997,5,c	;volatile
  4153  001D68  0012               	return	
  4154  001D6A                     __end_of_Interrupt_init:
  4155                           	opt stack 0
  4156                           tblptru	equ	0xFF8
  4157                           tblptrh	equ	0xFF7
  4158                           tblptrl	equ	0xFF6
  4159                           tablat	equ	0xFF5
  4160                           prodh	equ	0xFF4
  4161                           prodl	equ	0xFF3
  4162                           intcon	equ	0xFF2
  4163                           postinc0	equ	0xFEE
  4164                           wreg	equ	0xFE8
  4165                           indf1	equ	0xFE7
  4166                           postinc1	equ	0xFE6
  4167                           postdec1	equ	0xFE5
  4168                           fsr1h	equ	0xFE2
  4169                           fsr1l	equ	0xFE1
  4170                           indf2	equ	0xFDF
  4171                           postinc2	equ	0xFDE
  4172                           postdec2	equ	0xFDD
  4173                           fsr2h	equ	0xFDA
  4174                           fsr2l	equ	0xFD9
  4175                           status	equ	0xFD8
  4176                           
  4177 ;; *************** function _GPIO_init *****************
  4178 ;; Defined at:
  4179 ;;		line 18 in file "src/ToF MPD HVCMM.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;		None
  4182 ;; Auto vars:     Size  Location     Type
  4183 ;;		None
  4184 ;; Return value:  Size  Location     Type
  4185 ;;		None               void
  4186 ;; Registers used:
  4187 ;;		None
  4188 ;; Tracked objects:
  4189 ;;		On entry : 0/0
  4190 ;;		On exit  : 0/0
  4191 ;;		Unchanged: 0/0
  4192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4197 ;;Total ram usage:        0 bytes
  4198 ;; Hardware stack levels used:    1
  4199 ;; Hardware stack levels required when called:    2
  4200 ;; This function calls:
  4201 ;;		Nothing
  4202 ;; This function is called by:
  4203 ;;		_main
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text24
  4208  001D0A                     __ptext24:
  4209                           	opt stack 0
  4210  001D0A                     _GPIO_init:
  4211                           	opt stack 28
  4212                           
  4213                           ;ToF MPD HVCMM.c: 21: TRISAbits.TRISA0 = 1;
  4214                           
  4215                           ;incstack = 0
  4216  001D0A  8092               	bsf	3986,0,c	;volatile
  4217                           
  4218                           ;ToF MPD HVCMM.c: 22: TRISAbits.TRISA1 = 1;
  4219  001D0C  8292               	bsf	3986,1,c	;volatile
  4220                           
  4221                           ;ToF MPD HVCMM.c: 24: TRISBbits.TRISB4 = 0;
  4222  001D0E  9893               	bcf	3987,4,c	;volatile
  4223                           
  4224                           ;ToF MPD HVCMM.c: 26: TRISCbits.TRISC0 = 0;
  4225  001D10  9094               	bcf	3988,0,c	;volatile
  4226                           
  4227                           ;ToF MPD HVCMM.c: 27: TRISCbits.TRISC1 = 0;
  4228  001D12  9294               	bcf	3988,1,c	;volatile
  4229                           
  4230                           ;ToF MPD HVCMM.c: 28: TRISCbits.TRISC2 = 0;
  4231  001D14  9494               	bcf	3988,2,c	;volatile
  4232                           
  4233                           ;ToF MPD HVCMM.c: 29: TRISCbits.TRISC3 = 0;
  4234  001D16  9694               	bcf	3988,3,c	;volatile
  4235                           
  4236                           ;ToF MPD HVCMM.c: 31: TRISCbits.TRISC6 = 0;
  4237  001D18  9C94               	bcf	3988,6,c	;volatile
  4238                           
  4239                           ;ToF MPD HVCMM.c: 32: TRISCbits.TRISC7 = 1;
  4240  001D1A  8E94               	bsf	3988,7,c	;volatile
  4241                           
  4242                           ;ToF MPD HVCMM.c: 34: ANCON0bits.ANSEL0 = 1;
  4243  001D1C  010F               	movlb	15	; () banked
  4244  001D1E  815D               	bsf	93,0,b	;volatile
  4245                           
  4246                           ;ToF MPD HVCMM.c: 35: ANCON0bits.ANSEL1 = 1;
  4247  001D20  010F               	movlb	15	; () banked
  4248  001D22  835D               	bsf	93,1,b	;volatile
  4249                           
  4250                           ; BSR set to: 15
  4251  001D24  0012               	return	
  4252  001D26                     __end_of_GPIO_init:
  4253                           	opt stack 0
  4254                           tblptru	equ	0xFF8
  4255                           tblptrh	equ	0xFF7
  4256                           tblptrl	equ	0xFF6
  4257                           tablat	equ	0xFF5
  4258                           prodh	equ	0xFF4
  4259                           prodl	equ	0xFF3
  4260                           intcon	equ	0xFF2
  4261                           postinc0	equ	0xFEE
  4262                           wreg	equ	0xFE8
  4263                           indf1	equ	0xFE7
  4264                           postinc1	equ	0xFE6
  4265                           postdec1	equ	0xFE5
  4266                           fsr1h	equ	0xFE2
  4267                           fsr1l	equ	0xFE1
  4268                           indf2	equ	0xFDF
  4269                           postinc2	equ	0xFDE
  4270                           postdec2	equ	0xFDD
  4271                           fsr2h	equ	0xFDA
  4272                           fsr2l	equ	0xFD9
  4273                           status	equ	0xFD8
  4274                           
  4275 ;; *************** function _ADC_Init *****************
  4276 ;; Defined at:
  4277 ;;		line 3 in file "src/c/25k80_adc.c"
  4278 ;; Parameters:    Size  Location     Type
  4279 ;;		None
  4280 ;; Auto vars:     Size  Location     Type
  4281 ;;		None
  4282 ;; Return value:  Size  Location     Type
  4283 ;;		None               void
  4284 ;; Registers used:
  4285 ;;		wreg, status,2
  4286 ;; Tracked objects:
  4287 ;;		On entry : 0/0
  4288 ;;		On exit  : 0/0
  4289 ;;		Unchanged: 0/0
  4290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4295 ;;Total ram usage:        0 bytes
  4296 ;; Hardware stack levels used:    1
  4297 ;; Hardware stack levels required when called:    2
  4298 ;; This function calls:
  4299 ;;		Nothing
  4300 ;; This function is called by:
  4301 ;;		_main
  4302 ;; This function uses a non-reentrant model
  4303 ;;
  4304                           
  4305                           	psect	text25
  4306  001C70                     __ptext25:
  4307                           	opt stack 0
  4308  001C70                     _ADC_Init:
  4309                           	opt stack 28
  4310                           
  4311                           ;25k80_adc.c: 5: ADCON0bits.GO_nDONE = 0;
  4312                           
  4313                           ; BSR set to: 15
  4314                           ;incstack = 0
  4315  001C70  92C2               	bcf	4034,1,c	;volatile
  4316                           
  4317                           ;25k80_adc.c: 7: ADCON0bits.CHS = 0;
  4318  001C72  94C2               	bcf	4034,2,c	;volatile
  4319  001C74  96C2               	bcf	4034,3,c	;volatile
  4320  001C76  98C2               	bcf	4034,4,c	;volatile
  4321  001C78  9AC2               	bcf	4034,5,c	;volatile
  4322  001C7A  9CC2               	bcf	4034,6,c	;volatile
  4323                           
  4324                           ;25k80_adc.c: 8: ADCON1bits.CHSN = 2;
  4325  001C7C  50C1               	movf	4033,w,c	;volatile
  4326  001C7E  0BF8               	andlw	-8
  4327  001C80  0902               	iorlw	2
  4328  001C82  6EC1               	movwf	4033,c	;volatile
  4329                           
  4330                           ;25k80_adc.c: 10: ADCON1bits.VCFG = 1;
  4331  001C84  50C1               	movf	4033,w,c	;volatile
  4332  001C86  0BCF               	andlw	-49
  4333  001C88  0910               	iorlw	16
  4334  001C8A  6EC1               	movwf	4033,c	;volatile
  4335                           
  4336                           ;25k80_adc.c: 11: ADCON1bits.VNCFG = 1;
  4337  001C8C  86C1               	bsf	4033,3,c	;volatile
  4338                           
  4339                           ;25k80_adc.c: 13: ADCON2bits.ACQT = 6;
  4340  001C8E  50C0               	movf	4032,w,c	;volatile
  4341  001C90  0BC7               	andlw	-57
  4342  001C92  0930               	iorlw	48
  4343  001C94  6EC0               	movwf	4032,c	;volatile
  4344                           
  4345                           ;25k80_adc.c: 14: ADCON2bits.ADCS = 1;
  4346  001C96  50C0               	movf	4032,w,c	;volatile
  4347  001C98  0BF8               	andlw	-8
  4348  001C9A  0901               	iorlw	1
  4349  001C9C  6EC0               	movwf	4032,c	;volatile
  4350                           
  4351                           ;25k80_adc.c: 15: ADCON2bits.ADFM = 1;
  4352  001C9E  8EC0               	bsf	4032,7,c	;volatile
  4353                           
  4354                           ;25k80_adc.c: 16: ADCON0bits.ADON = 1;
  4355  001CA0  80C2               	bsf	4034,0,c	;volatile
  4356  001CA2  0012               	return	
  4357  001CA4                     __end_of_ADC_Init:
  4358                           	opt stack 0
  4359                           tblptru	equ	0xFF8
  4360                           tblptrh	equ	0xFF7
  4361                           tblptrl	equ	0xFF6
  4362                           tablat	equ	0xFF5
  4363                           prodh	equ	0xFF4
  4364                           prodl	equ	0xFF3
  4365                           intcon	equ	0xFF2
  4366                           postinc0	equ	0xFEE
  4367                           wreg	equ	0xFE8
  4368                           indf1	equ	0xFE7
  4369                           postinc1	equ	0xFE6
  4370                           postdec1	equ	0xFE5
  4371                           fsr1h	equ	0xFE2
  4372                           fsr1l	equ	0xFE1
  4373                           indf2	equ	0xFDF
  4374                           postinc2	equ	0xFDE
  4375                           postdec2	equ	0xFDD
  4376                           fsr2h	equ	0xFDA
  4377                           fsr2l	equ	0xFD9
  4378                           status	equ	0xFD8
  4379                           
  4380 ;; *************** function _ISR *****************
  4381 ;; Defined at:
  4382 ;;		line 57 in file "src/ToF MPD HVCMM.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;		None
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;		None               void
  4389 ;; Registers used:
  4390 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4396 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4398 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4399 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4400 ;;Total ram usage:       14 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    1
  4403 ;; This function calls:
  4404 ;;		_modbus_get_byte
  4405 ;; This function is called by:
  4406 ;;		Interrupt level 2
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           	psect	intcode
  4411  000008                     __pintcode:
  4412                           	opt stack 0
  4413  000008                     _ISR:
  4414                           	opt stack 25
  4415                           
  4416                           ;incstack = 0
  4417  000008  CFFA F02F          	movff	pclath,??_ISR
  4418  00000C  CFFB F030          	movff	pclatu,??_ISR+1
  4419  000010  CFE9 F031          	movff	fsr0l,??_ISR+2
  4420  000014  CFEA F032          	movff	fsr0h,??_ISR+3
  4421  000018  CFE1 F033          	movff	fsr1l,??_ISR+4
  4422  00001C  CFE2 F034          	movff	fsr1h,??_ISR+5
  4423  000020  CFD9 F035          	movff	fsr2l,??_ISR+6
  4424  000024  CFDA F036          	movff	fsr2h,??_ISR+7
  4425  000028  CFF3 F037          	movff	prodl,??_ISR+8
  4426  00002C  CFF4 F038          	movff	prodh,??_ISR+9
  4427  000030  CFF6 F039          	movff	tblptrl,??_ISR+10
  4428  000034  CFF7 F03A          	movff	tblptrh,??_ISR+11
  4429  000038  CFF8 F03B          	movff	tblptru,??_ISR+12
  4430  00003C  CFF5 F03C          	movff	tablat,??_ISR+13
  4431                           
  4432                           ;ToF MPD HVCMM.c: 61: if (PIR1bits.RC1IF)
  4433  000040  AA9E               	btfss	3998,5,c	;volatile
  4434  000042  D003               	goto	i2l76
  4435                           
  4436                           ;ToF MPD HVCMM.c: 62: {
  4437                           ;ToF MPD HVCMM.c: 63: modbus_get_byte(RCREG1);
  4438  000044  50AE               	movf	4014,w,c	;volatile
  4439  000046  EC93  F00E         	call	_modbus_get_byte
  4440  00004A                     i2l76:
  4441  00004A  C03C  FFF5         	movff	??_ISR+13,tablat
  4442  00004E  C03B  FFF8         	movff	??_ISR+12,tblptru
  4443  000052  C03A  FFF7         	movff	??_ISR+11,tblptrh
  4444  000056  C039  FFF6         	movff	??_ISR+10,tblptrl
  4445  00005A  C038  FFF4         	movff	??_ISR+9,prodh
  4446  00005E  C037  FFF3         	movff	??_ISR+8,prodl
  4447  000062  C036  FFDA         	movff	??_ISR+7,fsr2h
  4448  000066  C035  FFD9         	movff	??_ISR+6,fsr2l
  4449  00006A  C034  FFE2         	movff	??_ISR+5,fsr1h
  4450  00006E  C033  FFE1         	movff	??_ISR+4,fsr1l
  4451  000072  C032  FFEA         	movff	??_ISR+3,fsr0h
  4452  000076  C031  FFE9         	movff	??_ISR+2,fsr0l
  4453  00007A  C030  FFFB         	movff	??_ISR+1,pclatu
  4454  00007E  C02F  FFFA         	movff	??_ISR,pclath
  4455  000082  0011               	retfie		f
  4456  000084                     __end_of_ISR:
  4457                           	opt stack 0
  4458                           pclatu	equ	0xFFB
  4459                           pclath	equ	0xFFA
  4460                           tblptru	equ	0xFF8
  4461                           tblptrh	equ	0xFF7
  4462                           tblptrl	equ	0xFF6
  4463                           tablat	equ	0xFF5
  4464                           prodh	equ	0xFF4
  4465                           prodl	equ	0xFF3
  4466                           intcon	equ	0xFF2
  4467                           postinc0	equ	0xFEE
  4468                           fsr0h	equ	0xFEA
  4469                           fsr0l	equ	0xFE9
  4470                           wreg	equ	0xFE8
  4471                           indf1	equ	0xFE7
  4472                           postinc1	equ	0xFE6
  4473                           postdec1	equ	0xFE5
  4474                           fsr1h	equ	0xFE2
  4475                           fsr1l	equ	0xFE1
  4476                           indf2	equ	0xFDF
  4477                           postinc2	equ	0xFDE
  4478                           postdec2	equ	0xFDD
  4479                           fsr2h	equ	0xFDA
  4480                           fsr2l	equ	0xFD9
  4481                           status	equ	0xFD8
  4482                           
  4483 ;; *************** function _modbus_get_byte *****************
  4484 ;; Defined at:
  4485 ;;		line 33 in file "src/c/dialtek_modbus.c"
  4486 ;; Parameters:    Size  Location     Type
  4487 ;;  byte            1    wreg     unsigned char 
  4488 ;; Auto vars:     Size  Location     Type
  4489 ;;  byte            1    0[COMRAM] unsigned char 
  4490 ;; Return value:  Size  Location     Type
  4491 ;;		None               void
  4492 ;; Registers used:
  4493 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4494 ;; Tracked objects:
  4495 ;;		On entry : 0/0
  4496 ;;		On exit  : 0/0
  4497 ;;		Unchanged: 0/0
  4498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4500 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4502 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4503 ;;Total ram usage:        1 bytes
  4504 ;; Hardware stack levels used:    1
  4505 ;; This function calls:
  4506 ;;		Nothing
  4507 ;; This function is called by:
  4508 ;;		_ISR
  4509 ;; This function uses a non-reentrant model
  4510 ;;
  4511                           
  4512                           	psect	text27
  4513  001D26                     __ptext27:
  4514                           	opt stack 0
  4515  001D26                     _modbus_get_byte:
  4516                           	opt stack 25
  4517                           
  4518                           ;incstack = 0
  4519                           ;modbus_get_byte@byte stored from wreg
  4520  001D26  6E2E               	movwf	modbus_get_byte@byte,c
  4521                           
  4522                           ;dialtek_modbus.c: 35: rx_buf[rx_buf_ptr++] = byte;
  4523  001D28  0100               	movlb	0	; () banked
  4524  001D2A  0E60               	movlw	low _rx_buf	;volatile
  4525  001D2C  2425               	addwf	_rx_buf_ptr,w,c	;volatile
  4526  001D2E  6ED9               	movwf	fsr2l,c
  4527  001D30  0100               	movlb	0	; () banked
  4528  001D32  0E00               	movlw	high _rx_buf	;volatile
  4529  001D34  2026               	addwfc	_rx_buf_ptr+1,w,c	;volatile
  4530  001D36  6EDA               	movwf	fsr2h,c
  4531  001D38  C02E  FFDF         	movff	modbus_get_byte@byte,indf2
  4532                           
  4533                           ; BSR set to: 0
  4534  001D3C  4A25               	infsnz	_rx_buf_ptr,f,c	;volatile
  4535  001D3E  2A26               	incf	_rx_buf_ptr+1,f,c	;volatile
  4536                           
  4537                           ; BSR set to: 0
  4538  001D40  0012               	return	
  4539  001D42                     __end_of_modbus_get_byte:
  4540                           	opt stack 0
  4541                           pclatu	equ	0xFFB
  4542                           pclath	equ	0xFFA
  4543                           tblptru	equ	0xFF8
  4544                           tblptrh	equ	0xFF7
  4545                           tblptrl	equ	0xFF6
  4546                           tablat	equ	0xFF5
  4547                           prodh	equ	0xFF4
  4548                           prodl	equ	0xFF3
  4549                           intcon	equ	0xFF2
  4550                           postinc0	equ	0xFEE
  4551                           fsr0h	equ	0xFEA
  4552                           fsr0l	equ	0xFE9
  4553                           wreg	equ	0xFE8
  4554                           indf1	equ	0xFE7
  4555                           postinc1	equ	0xFE6
  4556                           postdec1	equ	0xFE5
  4557                           fsr1h	equ	0xFE2
  4558                           fsr1l	equ	0xFE1
  4559                           indf2	equ	0xFDF
  4560                           postinc2	equ	0xFDE
  4561                           postdec2	equ	0xFDD
  4562                           fsr2h	equ	0xFDA
  4563                           fsr2l	equ	0xFD9
  4564                           status	equ	0xFD8
  4565                           pclatu	equ	0xFFB
  4566                           pclath	equ	0xFFA
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           intcon	equ	0xFF2
  4574                           postinc0	equ	0xFEE
  4575                           fsr0h	equ	0xFEA
  4576                           fsr0l	equ	0xFE9
  4577                           wreg	equ	0xFE8
  4578                           indf1	equ	0xFE7
  4579                           postinc1	equ	0xFE6
  4580                           postdec1	equ	0xFE5
  4581                           fsr1h	equ	0xFE2
  4582                           fsr1l	equ	0xFE1
  4583                           indf2	equ	0xFDF
  4584                           postinc2	equ	0xFDE
  4585                           postdec2	equ	0xFDD
  4586                           fsr2h	equ	0xFDA
  4587                           fsr2l	equ	0xFD9
  4588                           status	equ	0xFD8
  4589                           
  4590                           	psect	rparam
  4591  0000                     pclatu	equ	0xFFB
  4592                           pclath	equ	0xFFA
  4593                           tblptru	equ	0xFF8
  4594                           tblptrh	equ	0xFF7
  4595                           tblptrl	equ	0xFF6
  4596                           tablat	equ	0xFF5
  4597                           prodh	equ	0xFF4
  4598                           prodl	equ	0xFF3
  4599                           intcon	equ	0xFF2
  4600                           postinc0	equ	0xFEE
  4601                           fsr0h	equ	0xFEA
  4602                           fsr0l	equ	0xFE9
  4603                           wreg	equ	0xFE8
  4604                           indf1	equ	0xFE7
  4605                           postinc1	equ	0xFE6
  4606                           postdec1	equ	0xFE5
  4607                           fsr1h	equ	0xFE2
  4608                           fsr1l	equ	0xFE1
  4609                           indf2	equ	0xFDF
  4610                           postinc2	equ	0xFDE
  4611                           postdec2	equ	0xFDD
  4612                           fsr2h	equ	0xFDA
  4613                           fsr2l	equ	0xFD9
  4614                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    3
    Data        2
    BSS         973
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      80
    BANK0           160     13     141
    BANK1           256      0     250
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    modbus_CRC16@buf	PTR unsigned char  size(2) Largest target is 300
		 -> crc_buf(BIGRAM[300]), 


Critical Paths under _main in COMRAM

    _main->_Meas_perform
    _set_modbus_id->_modbus_reset
    _modbus_poll->_modbus_get_poll
    _modbus_wsr_answer->_modbus_CRC16
    _modbus_rir_answer->_modbus_CRC16
    _modbus_rhr_answer->_modbus_CRC16
    _modbus_rx_CRC_check->_modbus_CRC16
    _modbus_init->_modbus_reset
    _Meas_perform->_ADC_read_aver
    _ADC_read_aver->___lldiv

Critical Paths under _ISR in COMRAM

    _ISR->_modbus_get_byte

Critical Paths under _main in BANK0

    _main->_modbus_poll
    _modbus_poll->_modbus_rhr_answer
    _modbus_poll->_modbus_rir_answer
    _modbus_get_poll->_modbus_rx_CRC_check
    _Meas_perform->_ADC_read_aver

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7283
                           _ADC_Init
                          _GPIO_init
                     _Interrupt_init
                       _Meas_perform
                        _modbus_init
                        _modbus_poll
                      _set_modbus_id
 ---------------------------------------------------------------------------------
 (1) _set_modbus_id                                        1     1      0      60
                                             17 COMRAM     1     1      0
                       _modbus_reset
 ---------------------------------------------------------------------------------
 (1) _modbus_poll                                          2     2      0    6075
                                             11 BANK0      2     2      0
                          _MX_set_ch
                           _delay_ms
                    _get_wr_reg_addr
                     _get_wr_reg_val
                  _holding_reg_write
                    _modbus_get_poll
                  _modbus_rhr_answer
                  _modbus_rir_answer
                  _modbus_wsr_answer
 ---------------------------------------------------------------------------------
 (2) _modbus_wsr_answer                                    7     7      0    1061
                                              0 BANK0      7     7      0
                     _UART_send_byte
                       _modbus_CRC16
 ---------------------------------------------------------------------------------
 (2) _modbus_rir_answer                                   11    11      0    1206
                                              0 BANK0     11    11      0
                     _UART_send_byte
                       _modbus_CRC16
 ---------------------------------------------------------------------------------
 (2) _modbus_rhr_answer                                   11    11      0    1206
                                              0 BANK0     11    11      0
                     _UART_send_byte
                       _modbus_CRC16
 ---------------------------------------------------------------------------------
 (3) _UART_send_byte                                       1     1      0      31
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _modbus_get_poll                                      1     1      0    1217
                                             32 COMRAM     1     1      0
                       _modbus_reset
                _modbus_rx_CRC_check
 ---------------------------------------------------------------------------------
 (3) _modbus_rx_CRC_check                                  9     9      0    1129
                                              0 BANK0      9     9      0
                       _modbus_CRC16
 ---------------------------------------------------------------------------------
 (3) _modbus_CRC16                                        17    13      4     956
                                             15 COMRAM    17    13      4
 ---------------------------------------------------------------------------------
 (2) _holding_reg_write                                    6     2      4    1302
                                             15 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _get_wr_reg_val                                       2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _get_wr_reg_addr                                      2     0      2       0
                                             15 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             3     1      2      68
                                             15 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _modbus_init                                          0     0      0      60
                          _UART_init
                       _modbus_reset
 ---------------------------------------------------------------------------------
 (2) _modbus_reset                                         2     2      0      45
                                             15 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _UART_init                                            1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Meas_perform                                         3     3      0    1088
                                             32 COMRAM     1     1      0
                                             10 BANK0      2     2      0
                      _ADC_read_aver
                          _MX_set_ch
                            ___lwdiv
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     317
                                             15 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (2) _MX_set_ch                                            1     1      0      15
                                             15 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ADC_read_aver                                       14    10      4     534
                                             28 COMRAM     4     0      4
                                              0 BANK0     10    10      0
                           _ADC_read
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                             15 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (3) _ADC_read                                             6     4      2      24
                                             15 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Interrupt_init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPIO_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                 14    14      0      15
                                              1 COMRAM    14    14      0
                    _modbus_get_byte
 ---------------------------------------------------------------------------------
 (6) _modbus_get_byte                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _GPIO_init
   _Interrupt_init
   _Meas_perform
     _ADC_read_aver
       _ADC_read
       ___lldiv
     _MX_set_ch
     ___lwdiv
   _modbus_init
     _UART_init
     _modbus_reset
   _modbus_poll
     _MX_set_ch
     _delay_ms
     _get_wr_reg_addr
     _get_wr_reg_val
     _holding_reg_write
     _modbus_get_poll
       _modbus_reset
       _modbus_rx_CRC_check
         _modbus_CRC16
     _modbus_rhr_answer
       _UART_send_byte
       _modbus_CRC16
     _modbus_rir_answer
       _UART_send_byte
       _modbus_CRC16
     _modbus_wsr_answer
       _UART_send_byte
       _modbus_CRC16
   _set_modbus_id
     _modbus_reset

 _ISR (ROOT)
   _modbus_get_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0     12C      35        8.2%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      FA      10       97.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      FA       8       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      D      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      50       1       84.2%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2D1       6        0.0%
DATA                 0      0     3FD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Jul 27 17:18:04 2020

             ??_Interrupt_init 003D                             l82 1B50                             l83 1B54  
                           l84 1B5C                             l85 1B62                             l86 1B6A  
                           l98 1496                 _input_register 0200        __end_of_modbus_get_byte 1D42  
                  __CFG_BORV$3 000000         _modbus_rhr_answer$1212 00E4         _modbus_rhr_answer$1215 00E6  
      __end_of_modbus_get_poll 1A72                     _TXREG1bits 000FAD                   __CFG_CP0$OFF 000000  
                 __CFG_CP1$OFF 000000                   __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000  
                ?_Meas_perform 002E                            l103 15E0                            l131 1ABE  
                          l141 1D44                            l230 192A                            l240 17BC  
                          l236 174A                            l166 1C4A                            l254 1244  
                          l247 1128                            l271 1042                            l264 0F26  
                          l281 1352                            l861 1BE6                            l798 19E6  
                 __CFG_CPB$OFF 000000                   __CFG_CPD$OFF 000000                            _ISR 0008  
                          u715 1488                            u957 1D54                            u967 1CF2  
                          u977 160E                            u987 1B48                            u997 1B94  
                          prod 000FF3         __end_of_get_wr_reg_val 1D8C                            wreg 000FE8  
                   _TXSTA1bits 000FAC                           ?_ISR 002E                           l2010 1A6E  
                         l1052 1C22                           l2004 1A4E                           l2006 1A64  
                         l1080 1CFA                           l2008 1A6A                           l2036 16DC  
                         l2028 163C                           l1260 1A7E                           l1252 1A76  
                         l1086 1B70                           l1078 1CEC                           l2062 15BC  
                         l2054 159C                           l1088 1B92                           l1272 1A8E  
                         l1264 1A82                           l1256 1A7A                           l2072 15EA  
                         l2066 15C4                           l2090 1CE0                           l1284 1BB4  
                         l1268 1A86                           l1276 1A96                           l2068 15E4  
                         l1286 1BBC                           l1296 1BDC                           l1288 1BC0  
                         l1820 13E4                           l1812 13BE                           l1804 137C  
                         l1830 1426                           l1910 126E                           l1832 143C  
                         l1850 1998                           l1762 1932                           l1746 18EC  
                         l1852 19A4                           l1764 1936                           l1916 12D4  
                         l1862 19D8                           l1854 19A8                           l1758 1924  
                         l1950 0F56                           l1872 186C                           l1890 1158  
                         l1970 106C                           l1868 184A                           l1956 0FE4  
                         l1990 1A1C                           l1896 11E6                           l1976 10D2  
                         l1994 1A2C                           l1998 1A3C                           u1007 1C3E  
                         i2l76 004A                   __CFG_WDTPS$1 000000                    _wr_reg_addr 0027  
                         _main 1CC8                           fsr0h 000FEA                           fsr1h 000FE2  
                         fsr0l 000FE9                           fsr2h 000FDA                           indf1 000FE7  
                         fsr1l 000FE1                           indf2 000FDF                           fsr2l 000FD9  
             __end_of_ADC_Init 1CA4                           pclat 000FFA        __end_of_get_wr_reg_addr 1D96  
                         prodh 000FF4                           prodl 000FF3                           start 0084  
             __end_of_ADC_read 1C70                  __CFG_IESO$OFF 000000                  __CFG_FOSC$HS1 000000  
           __size_of_GPIO_init 001C                  __CFG_MCLRE$ON 000000    __end_of_modbus_rx_CRC_check 1494  
                        ??_ISR 002F                   _BAUDCON1bits 000FA7                 ??_Meas_perform 00EA  
                        ?_main 002E                          _CRC16 0015                __end_of___lldiv 19F8  
              __end_of___lwdiv 1BF0                  __CFG_WRT0$OFF 000000                  __CFG_WRT1$OFF 000000  
              ?_get_wr_reg_val 003D                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000                  __CFG_WRTB$OFF 000000  
                __CFG_WRTC$OFF 000000                  __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000  
           __size_of_UART_init 006A                 __CFG_BOREN$OFF 000000                          tablat 000FF5  
                        status 000FD8                __initialization 1ADC                   ?_modbus_init 002E  
                 ?_modbus_poll 002E                   __end_of_main 1CEA                  modbus_CRC16@i 004A  
             ?_modbus_get_byte 002E               ?_modbus_get_poll 002E         _modbus_rir_answer$1221 00E6  
       _modbus_rir_answer$1218 00E4             __size_of_MX_set_ch 005C                         ??_main 004F  
                __activetblptr 000002                 __CFG_PLLCFG$ON 000000                 __CFG_RETEN$OFF 000000  
            __end_of_GPIO_init 1D26                         _ADRESH 000FC4                         _ADRESL 000FC3  
              __CFG_BBSIZ$BB2K 000000                 __CFG_WDTEN$OFF 000000                         _RCREG1 000FAE  
               ADC_read_aver@i 00E8                         _SPBRG1 000FAF          ADC_read_aver@ADC_aver 00E4  
             ?_get_wr_reg_addr 003D               __end_of_delay_ms 1D0A                 __CFG_XINST$OFF 000000  
            __end_of_UART_init 1ADC                 __CFG_STVREN$ON 000000                      ??___lldiv 0045  
                       _dev_id 0050                      ??___lwdiv 0041                         _answer 002B  
                       clear_0 1AE4                         clear_1 1AF6                         clear_2 1B02  
                       clear_3 1B0E                         clear_4 1B1A                         _rx_buf 0060  
                Meas_perform@i 004E                   __pdataCOMRAM 004F                      ?_ADC_Init 002E  
                modbus_reset@i 003D                   __mediumconst 0000                         tblptrh 000FF7  
                       tblptrl 000FF6                         tblptru 000FF8        modbus_rir_answer@i_1222 00E9  
                    ?_ADC_read 003D                     __accesstop 0060                  ?_modbus_CRC16 003D  
      __end_of__initialization 1B38           __end_of_Meas_perform 173A              __end_of_MX_set_ch 1B9E  
               __pcstackCOMRAM 002E                  ?_modbus_reset 002E          __end_of_set_modbus_id 1D76  
                   _addr_buf_1 001B                     _addr_buf_2 001D                     ??_ADC_Init 003D  
   modbus_get_poll@rx_cmd_code 004E                     ??_ADC_read 003F         __size_of_ADC_read_aver 00BA  
                   __pbssBANK0 0060          __end_of_device_family 0F02                     __pbssBANK1 0100  
                   __pbssBANK2 0200                 ??_modbus_CRC16 0041           __end_of_firmware_ver 0F03  
               ??_modbus_reset 003D           __size_of_modbus_init 000C           __size_of_modbus_poll 016E  
             ??_get_wr_reg_val 003F                     _com_dev_id 004F               __CFG_CANMX$PORTC 000000  
                    ?_delay_ms 003D        __size_of_UART_send_byte 001A                        _I_Mx_Ch 0001  
                      _I_total 0017                        _V_Mx_Ch 000B                __CFG_PWRTEN$OFF 000000  
                      __Hparam 0000             modbus_rhr_answer@i 00E9             modbus_rhr_answer@j 00E8  
                      __Lparam 0000                        ___lldiv 1976                        ___lwdiv 1B9E  
                _ADC_read_aver 1824                   __psmallconst 0F00             modbus_rir_answer@i 00E8  
                      __pcinit 1ADC                        __ramtop 0F00                  _RegisterValue 0019  
                      _crc_buf 02FA                        __ptext0 1CC8                        __ptext1 1D6A  
                      __ptext2 1494                        __ptext3 173A                        __ptext4 0F06  
                      __ptext5 1108                        __ptext6 1D42                        __ptext7 19F8  
                      __ptext8 130A                        __ptext9 18DE   __size_of_modbus_rx_CRC_check 018A  
                 __size_of_ISR 007C        __size_of_Interrupt_init 000E              __CFG_MSSPMSK$MSK7 000000  
                   ??_delay_ms 003F                     _modbus_ver 0F03                        _rx_flag 002D  
        __size_of_Meas_perform 0138             __CFG_INTOSCSEL$LOW 000000                     delay_ms@ms 003D  
         end_of_initialization 1B38                      _GPIO_init 1D0A                  __Lmediumconst 0000  
              ___lldiv@divisor 0041                ___lldiv@counter 0049                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                 ?_ADC_read_aver 004A           __end_of_modbus_CRC16 1976  
                    _UART_init 1A72  modbus_rx_CRC_check@modbus_cmd 00E8                   _Meas_perform 1602  
                    _TRISAbits 000F92                      _TRISBbits 000F93                      _TRISCbits 000F94  
                   _rx_buf_ptr 0025       __size_of_modbus_get_byte 001C       __size_of_modbus_get_poll 007A  
         __end_of_modbus_reset 1C30              __size_of_ADC_Init 0034              __size_of_ADC_read 0040  
                   ?_GPIO_init 002E                      _MX_set_ch 1B42          UART_init@bd_rate_code 003D  
     __size_of_get_wr_reg_addr 000A                  __pidataCOMRAM 1D96                     ?_UART_init 002E  
                 _firmware_ver 0F02            start_initialization 1ADC                    __end_of_ISR 0084  
    holding_reg_write@red_addr 003D                 _UART_send_byte 1D42                modbus_CRC16@crc 004C  
              modbus_CRC16@buf 003D                modbus_CRC16@len 003F                modbus_CRC16@pos 0048  
         modbus_rhr_answer@cnt 00EA                     ?_MX_set_ch 002E                ??_ADC_read_aver 00E0  
       __end_of_UART_send_byte 1D5C                    __pbssBIGRAM 02FA                 _Interrupt_init 1D5C  
                  __pbssCOMRAM 0001                  __pcstackBANK0 00E0              __size_of_delay_ms 0020  
                  ??_GPIO_init 003D         __size_of_set_modbus_id 000C              ??_modbus_get_byte 002E  
          _modbus_rx_CRC_check 130A              ??_modbus_get_poll 004E           modbus_rir_answer@cnt 00EA  
       ADC_read_aver@aver_size 004A               ___lwdiv@dividend 003D                  ??_modbus_init 003F  
                ??_modbus_poll 00EB          __size_of_modbus_CRC16 0098                      __pintcode 0008  
                     ?___lldiv 003D                       ?___lwdiv 003D                    ??_UART_init 003D  
         ?_modbus_rx_CRC_check 002E         __end_of_Interrupt_init 1D6A              _modbus_rhr_answer 1108  
        __size_of_modbus_reset 0040                    __smallconst 0F00                ?_UART_send_byte 002E  
            _modbus_rir_answer 0F06              ??_get_wr_reg_addr 003F                       _ADC_Init 1C70  
           ?_modbus_rhr_answer 002E                       _ADC_read 1C30             ?_modbus_rir_answer 002E  
             ___lwdiv@quotient 0041                      _regs2read 0023            ??_modbus_rhr_answer 00E0  
                    _modbus_id 002C            ??_modbus_rir_answer 00E0                   _modbus_CRC16 18DE  
                     _LATBbits 000F8A                       _LATCbits 000F8B                       _PIE1bits 000F9D  
            _holding_reg_write 1CA4                    ??_MX_set_ch 003D                       _PIR1bits 000F9E  
           set_modbus_id@newID 003F             ?_holding_reg_write 003D                       _GO_nDONE 007E11  
       modbus_rx_CRC_check@ans 00E7                       _RCONbits 000FD0                   _modbus_reset 1BF0  
    __end_of_modbus_rhr_answer 130A         holding_reg_write@value 003F          ??_modbus_rx_CRC_check 00E0  
          ??_holding_reg_write 0041      __end_of_modbus_rir_answer 1108            __end_of_modbus_init 1D82  
                _set_modbus_id 1D6A            __end_of_modbus_poll 1602                     _ADCON0bits 000FC2  
                   _ADCON1bits 000FC1                     _ADCON2bits 000FC0               __CFG_SOSCSEL$DIG 000000  
              ?_Interrupt_init 002E             UART_send_byte@byte 003D        __size_of_get_wr_reg_val 000A  
            _modbus_wsr_answer 173A                  _device_family 0F01      __end_of_holding_reg_write 1CC8  
           ?_modbus_wsr_answer 002E                     _ANCON0bits 000F5D                       __Hrparam 0000  
                     __Lrparam 0000            ??_modbus_wsr_answer 00E0               __size_of___lldiv 0082  
             __size_of___lwdiv 0052                 ?_set_modbus_id 002E                    MX_set_ch@ch 003D  
                     _delay_ms 1CEA                ___lwdiv@divisor 003F                ___lwdiv@counter 0043  
    __end_of_modbus_wsr_answer 1824                       __ptext10 1CA4                       __ptext11 1D82  
                     __ptext20 1824                       __ptext12 1D8C                       __ptext21 1976  
                     __ptext13 1CEA                       __ptext22 1C30                       __ptext14 1D76  
                     __ptext23 1D5C                       __ptext15 1BF0                       __ptext24 1D0A  
                     __ptext16 1A72                       __ptext25 1C70                       __ptext17 1602  
                     __ptext18 1B9E                       __ptext27 1D26                       __ptext19 1B42  
           ADC_read@ADC_result 0041  modbus_rx_CRC_check@CRC16_calc 00E3                  __size_of_main 0022  
       _modbus_wsr_answer$1210 00E5         _modbus_wsr_answer$1207 00E3               _holding_register 0100  
                  _modbus_init 1D76                    _modbus_poll 1494                    _reg_wr_data 0021  
           __end_of_modbus_ver 0F04     __size_of_modbus_rhr_answer 0202                       _zero_lvl 0029  
   __size_of_modbus_rir_answer 0202       _modbus_rx_CRC_check$1227 00E5                     _INTCONbits 000FF2  
              _modbus_get_byte 1D26                _modbus_get_poll 19F8                _modbus_reg_addr 001F  
                     intlevel2 0000     __size_of_holding_reg_write 0024               ___lldiv@dividend 003D  
                   _RCSTA1bits 000FAB                _get_wr_reg_addr 1D8C          __end_of_ADC_read_aver 18DE  
              ??_set_modbus_id 003F               ??_UART_send_byte 003D               ___lldiv@quotient 0045  
   __size_of_modbus_wsr_answer 00EA                 _get_wr_reg_val 1D82            __CFG_BORPWR$ZPBORMV 000000  
          modbus_get_byte@byte 002E  
