

Microchip Technology PIC18 PRO Macro Assembler V1.33 build 59893 
                                                                                               Fri Mar 23 17:28:08 2018

Microchip Technology Omniscient Code Generator (PRO mode) build 59893
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37                           	psect	pa_nodes,global,class=CODE,delta=1
    38  0000                     prodl	equ	0xFF3
    39                           intcon	equ	0xFF2
    40                           intcon2	equ	0xFF1
    41                           intcon3	equ	0xFF0
    42                           wreg	equ	0xFE8
    43                           indf1	equ	0xFE7
    44                           postinc1	equ	0xFE6
    45                           postdec1	equ	0xFE5
    46                           fsr1h	equ	0xFE2
    47                           fsr1l	equ	0xFE1
    48                           indf2	equ	0xFDF
    49                           postinc2	equ	0xFDE
    50                           postdec2	equ	0xFDD
    51                           fsr2h	equ	0xFDA
    52                           fsr2l	equ	0xFD9
    53                           status	equ	0xFD8
    54                           
    55                           	psect	idataCOMRAM
    56  0009BE                     __pidataCOMRAM:
    57                           	opt stack 0
    58                           
    59                           ;initializer for _ADC_current_min
    60  0009BE  1000               	dw	4096
    61                           
    62                           ;initializer for _led_cnt
    63  0009C0  FDE8               	dw	65000
    64                           
    65                           ;initializer for _dev_id
    66  0009C2  0B                 	db	11
    67                           
    68                           ;initializer for _rd_state
    69  0009C3  0A                 	db	10
    70  0000                     _ADCON0bits	set	4034
    71  0000                     _ADCON1bits	set	4033
    72  0000                     _ADCON2bits	set	4032
    73  0000                     _ADRESH	set	4036
    74  0000                     _ADRESL	set	4035
    75  0000                     _ANCON0bits	set	3933
    76  0000                     _ANCON1bits	set	3932
    77  0000                     _BAUDCON1bits	set	4007
    78  0000                     _EEADR	set	3956
    79  0000                     _EECON1bits	set	3967
    80  0000                     _EECON2	set	3966
    81  0000                     _EEDATA	set	3955
    82  0000                     _INTCON2bits	set	4081
    83  0000                     _INTCON3bits	set	4080
    84  0000                     _INTCONbits	set	4082
    85  0000                     _IOCB	set	3930
    86  0000                     _LATCbits	set	3979
    87  0000                     _PIE1bits	set	3997
    88  0000                     _PIR1bits	set	3998
    89  0000                     _PORTBbits	set	3969
    90  0000                     _RCONbits	set	4048
    91  0000                     _RCREG1	set	4014
    92  0000                     _RCSTA1bits	set	4011
    93  0000                     _SPBRG1	set	4015
    94  0000                     _T0CONbits	set	4053
    95  0000                     _T1CONbits	set	4045
    96  0000                     _T1GCONbits	set	4010
    97  0000                     _TMR0H	set	4055
    98  0000                     _TMR0L	set	4054
    99  0000                     _TMR1H	set	4047
   100  0000                     _TMR1L	set	4046
   101  0000                     _TRISAbits	set	3986
   102  0000                     _TRISBbits	set	3987
   103  0000                     _TRISCbits	set	3988
   104  0000                     _TXREG1bits	set	4013
   105  0000                     _TXSTA1bits	set	4012
   106  0000                     _GO_nDONE	set	32273
   107                           prodl	equ	0xFF3
   108                           intcon	equ	0xFF2
   109                           intcon2	equ	0xFF1
   110                           intcon3	equ	0xFF0
   111                           wreg	equ	0xFE8
   112                           indf1	equ	0xFE7
   113                           postinc1	equ	0xFE6
   114                           postdec1	equ	0xFE5
   115                           fsr1h	equ	0xFE2
   116                           fsr1l	equ	0xFE1
   117                           indf2	equ	0xFDF
   118                           postinc2	equ	0xFDE
   119                           postdec2	equ	0xFDD
   120                           fsr2h	equ	0xFDA
   121                           fsr2l	equ	0xFD9
   122                           status	equ	0xFD8
   123                           
   124                           	psect	nvCOMRAM
   125  000049                     __pnvCOMRAM:
   126                           	opt stack 0
   127  000049                     _current_max:
   128                           	opt stack 0
   129  000049                     	ds	2
   130                           prodl	equ	0xFF3
   131                           intcon	equ	0xFF2
   132                           intcon2	equ	0xFF1
   133                           intcon3	equ	0xFF0
   134                           wreg	equ	0xFE8
   135                           indf1	equ	0xFE7
   136                           postinc1	equ	0xFE6
   137                           postdec1	equ	0xFE5
   138                           fsr1h	equ	0xFE2
   139                           fsr1l	equ	0xFE1
   140                           indf2	equ	0xFDF
   141                           postinc2	equ	0xFDE
   142                           postdec2	equ	0xFDD
   143                           fsr2h	equ	0xFDA
   144                           fsr2l	equ	0xFD9
   145                           status	equ	0xFD8
   146                           
   147                           	psect	nvBANK0
   148  000084                     __pnvBANK0:
   149                           	opt stack 0
   150  000084                     _num_of_turns:
   151                           	opt stack 0
   152  000084                     	ds	2
   153                           
   154                           ; #config settings
   155  0000                     prodl	equ	0xFF3
   156                           intcon	equ	0xFF2
   157                           intcon2	equ	0xFF1
   158                           intcon3	equ	0xFF0
   159                           wreg	equ	0xFE8
   160                           indf1	equ	0xFE7
   161                           postinc1	equ	0xFE6
   162                           postdec1	equ	0xFE5
   163                           fsr1h	equ	0xFE2
   164                           fsr1l	equ	0xFE1
   165                           indf2	equ	0xFDF
   166                           postinc2	equ	0xFDE
   167                           postdec2	equ	0xFDD
   168                           fsr2h	equ	0xFDA
   169                           fsr2l	equ	0xFD9
   170                           status	equ	0xFD8
   171                           
   172                           	psect	cinit
   173  000828                     __pcinit:
   174                           	opt stack 0
   175  000828                     start_initialization:
   176                           	opt stack 0
   177  000828                     __initialization:
   178                           	opt stack 0
   179                           
   180                           ; Clear objects allocated to BANK2 (250 bytes)
   181  000828  EE02  F000         	lfsr	0,__pbssBANK2
   182  00082C  0EFA               	movlw	250
   183  00082E                     clear_0:
   184  00082E  6AEE               	clrf	postinc0,c
   185  000830  06E8               	decf	wreg,f,c
   186  000832  E1FD               	bnz	clear_0
   187                           
   188                           ; Clear objects allocated to BANK1 (250 bytes)
   189  000834  EE01  F000         	lfsr	0,__pbssBANK1
   190  000838  0EFA               	movlw	250
   191  00083A                     clear_1:
   192  00083A  6AEE               	clrf	postinc0,c
   193  00083C  06E8               	decf	wreg,f,c
   194  00083E  E1FD               	bnz	clear_1
   195                           
   196                           ; Clear objects allocated to BANK0 (16 bytes)
   197  000840  EE00  F074         	lfsr	0,__pbssBANK0
   198  000844  0E10               	movlw	16
   199  000846                     clear_2:
   200  000846  6AEE               	clrf	postinc0,c
   201  000848  06E8               	decf	wreg,f,c
   202  00084A  E1FD               	bnz	clear_2
   203                           
   204                           ; Clear objects allocated to COMRAM (39 bytes)
   205  00084C  EE00  F001         	lfsr	0,__pbssCOMRAM
   206  000850  0E27               	movlw	39
   207  000852                     clear_3:
   208  000852  6AEE               	clrf	postinc0,c
   209  000854  06E8               	decf	wreg,f,c
   210  000856  E1FD               	bnz	clear_3
   211                           
   212                           ; Initialize objects allocated to COMRAM (6 bytes)
   213                           ; load TBLPTR registers with __pidataCOMRAM
   214  000858  0EBE               	movlw	low __pidataCOMRAM
   215  00085A  6EF6               	movwf	tblptrl,c
   216  00085C  0E09               	movlw	high __pidataCOMRAM
   217  00085E  6EF7               	movwf	tblptrh,c
   218  000860  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   219  000862  6EF8               	movwf	tblptru,c
   220  000864  EE00  F043         	lfsr	0,__pdataCOMRAM
   221  000868  EE10 F006          	lfsr	1,6
   222  00086C                     copy_data0:
   223  00086C  0009               	tblrd		*+
   224  00086E  CFF5 FFEE          	movff	tablat,postinc0
   225  000872  50E5               	movf	postdec1,w,c
   226  000874  50E1               	movf	fsr1l,w,c
   227  000876  E1FA               	bnz	copy_data0
   228  000878                     end_of_initialization:
   229                           	opt stack 0
   230  000878                     __end_of__initialization:
   231                           	opt stack 0
   232  000878  0E00               	movlw	low (__Lmediumconst shr (0+16))
   233  00087A  6EF8               	movwf	tblptru,c
   234  00087C  0100               	movlb	0
   235  00087E  EF2E  F003         	goto	_main	;jump to C main() function
   236                           tblptru	equ	0xFF8
   237                           tblptrh	equ	0xFF7
   238                           tblptrl	equ	0xFF6
   239                           tablat	equ	0xFF5
   240                           prodl	equ	0xFF3
   241                           intcon	equ	0xFF2
   242                           intcon2	equ	0xFF1
   243                           intcon3	equ	0xFF0
   244                           postinc0	equ	0xFEE
   245                           wreg	equ	0xFE8
   246                           indf1	equ	0xFE7
   247                           postinc1	equ	0xFE6
   248                           postdec1	equ	0xFE5
   249                           fsr1h	equ	0xFE2
   250                           fsr1l	equ	0xFE1
   251                           indf2	equ	0xFDF
   252                           postinc2	equ	0xFDE
   253                           postdec2	equ	0xFDD
   254                           fsr2h	equ	0xFDA
   255                           fsr2l	equ	0xFD9
   256                           status	equ	0xFD8
   257                           
   258                           	psect	bssCOMRAM
   259  000001                     __pbssCOMRAM:
   260                           	opt stack 0
   261  000001                     _ADC_current_dif:
   262                           	opt stack 0
   263  000001                     	ds	2
   264  000003                     _ADC_current_max:
   265                           	opt stack 0
   266  000003                     	ds	2
   267  000005                     _ADC_current_result:
   268                           	opt stack 0
   269  000005                     	ds	2
   270  000007                     _ADC_current_rms:
   271                           	opt stack 0
   272  000007                     	ds	2
   273  000009                     _ADC_cutoff_null:
   274                           	opt stack 0
   275  000009                     	ds	2
   276  00000B                     _CRC16:
   277                           	opt stack 0
   278  00000B                     	ds	2
   279  00000D                     _V_detect:
   280                           	opt stack 0
   281  00000D                     	ds	2
   282  00000F                     _addr_buf_1:
   283                           	opt stack 0
   284  00000F                     	ds	2
   285  000011                     _addr_buf_2:
   286                           	opt stack 0
   287  000011                     	ds	2
   288  000013                     _modbus_reg_addr:
   289                           	opt stack 0
   290  000013                     	ds	2
   291  000015                     _reg_wr_data:
   292                           	opt stack 0
   293  000015                     	ds	2
   294  000017                     _regs2read:
   295                           	opt stack 0
   296  000017                     	ds	2
   297  000019                     _set_zero:
   298                           	opt stack 0
   299  000019                     	ds	2
   300  00001B                     _sort_tmp:
   301                           	opt stack 0
   302  00001B                     	ds	2
   303  00001D                     _temp_buf:
   304                           	opt stack 0
   305  00001D                     	ds	2
   306  00001F                     _answer:
   307                           	opt stack 0
   308  00001F                     	ds	1
   309  000020                     _get_crc_flag:
   310                           	opt stack 0
   311  000020                     	ds	1
   312  000021                     _id_change:
   313                           	opt stack 0
   314  000021                     	ds	1
   315  000022                     _rd_ptr:
   316                           	opt stack 0
   317  000022                     	ds	1
   318  000023                     _reg_addr_flag:
   319                           	opt stack 0
   320  000023                     	ds	1
   321  000024                     _reg_qty_flag:
   322                           	opt stack 0
   323  000024                     	ds	1
   324  000025                     _reg_wr_flag:
   325                           	opt stack 0
   326  000025                     	ds	1
   327  000026                     _rx_byte:
   328                           	opt stack 0
   329  000026                     	ds	1
   330  000027                     _wr_ptr:
   331                           	opt stack 0
   332  000027                     	ds	1
   333                           tblptru	equ	0xFF8
   334                           tblptrh	equ	0xFF7
   335                           tblptrl	equ	0xFF6
   336                           tablat	equ	0xFF5
   337                           prodl	equ	0xFF3
   338                           intcon	equ	0xFF2
   339                           intcon2	equ	0xFF1
   340                           intcon3	equ	0xFF0
   341                           postinc0	equ	0xFEE
   342                           wreg	equ	0xFE8
   343                           indf1	equ	0xFE7
   344                           postinc1	equ	0xFE6
   345                           postdec1	equ	0xFE5
   346                           fsr1h	equ	0xFE2
   347                           fsr1l	equ	0xFE1
   348                           indf2	equ	0xFDF
   349                           postinc2	equ	0xFDE
   350                           postdec2	equ	0xFDD
   351                           fsr2h	equ	0xFDA
   352                           fsr2l	equ	0xFD9
   353                           status	equ	0xFD8
   354                           
   355                           	psect	dataCOMRAM
   356  000043                     __pdataCOMRAM:
   357                           	opt stack 0
   358  000043                     _ADC_current_min:
   359                           	opt stack 0
   360  000043                     	ds	2
   361  000045                     _led_cnt:
   362                           	opt stack 0
   363  000045                     	ds	2
   364  000047                     _dev_id:
   365                           	opt stack 0
   366  000047                     	ds	1
   367  000048                     _rd_state:
   368                           	opt stack 0
   369  000048                     	ds	1
   370                           tblptru	equ	0xFF8
   371                           tblptrh	equ	0xFF7
   372                           tblptrl	equ	0xFF6
   373                           tablat	equ	0xFF5
   374                           prodl	equ	0xFF3
   375                           intcon	equ	0xFF2
   376                           intcon2	equ	0xFF1
   377                           intcon3	equ	0xFF0
   378                           postinc0	equ	0xFEE
   379                           wreg	equ	0xFE8
   380                           indf1	equ	0xFE7
   381                           postinc1	equ	0xFE6
   382                           postdec1	equ	0xFE5
   383                           fsr1h	equ	0xFE2
   384                           fsr1l	equ	0xFE1
   385                           indf2	equ	0xFDF
   386                           postinc2	equ	0xFDE
   387                           postdec2	equ	0xFDD
   388                           fsr2h	equ	0xFDA
   389                           fsr2l	equ	0xFD9
   390                           status	equ	0xFD8
   391                           
   392                           	psect	bssBANK0
   393  000074                     __pbssBANK0:
   394                           	opt stack 0
   395  000074                     _rx_buf:
   396                           	opt stack 0
   397  000074                     	ds	16
   398                           tblptru	equ	0xFF8
   399                           tblptrh	equ	0xFF7
   400                           tblptrl	equ	0xFF6
   401                           tablat	equ	0xFF5
   402                           prodl	equ	0xFF3
   403                           intcon	equ	0xFF2
   404                           intcon2	equ	0xFF1
   405                           intcon3	equ	0xFF0
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           indf1	equ	0xFE7
   409                           postinc1	equ	0xFE6
   410                           postdec1	equ	0xFE5
   411                           fsr1h	equ	0xFE2
   412                           fsr1l	equ	0xFE1
   413                           indf2	equ	0xFDF
   414                           postinc2	equ	0xFDE
   415                           postdec2	equ	0xFDD
   416                           fsr2h	equ	0xFDA
   417                           fsr2l	equ	0xFD9
   418                           status	equ	0xFD8
   419                           
   420                           	psect	bssBANK1
   421  000100                     __pbssBANK1:
   422                           	opt stack 0
   423  000100                     _holding_register:
   424                           	opt stack 0
   425  000100                     	ds	250
   426                           tblptru	equ	0xFF8
   427                           tblptrh	equ	0xFF7
   428                           tblptrl	equ	0xFF6
   429                           tablat	equ	0xFF5
   430                           prodl	equ	0xFF3
   431                           intcon	equ	0xFF2
   432                           intcon2	equ	0xFF1
   433                           intcon3	equ	0xFF0
   434                           postinc0	equ	0xFEE
   435                           wreg	equ	0xFE8
   436                           indf1	equ	0xFE7
   437                           postinc1	equ	0xFE6
   438                           postdec1	equ	0xFE5
   439                           fsr1h	equ	0xFE2
   440                           fsr1l	equ	0xFE1
   441                           indf2	equ	0xFDF
   442                           postinc2	equ	0xFDE
   443                           postdec2	equ	0xFDD
   444                           fsr2h	equ	0xFDA
   445                           fsr2l	equ	0xFD9
   446                           status	equ	0xFD8
   447                           
   448                           	psect	bssBANK2
   449  000200                     __pbssBANK2:
   450                           	opt stack 0
   451  000200                     _crc_buf:
   452                           	opt stack 0
   453  000200                     	ds	250
   454                           tblptru	equ	0xFF8
   455                           tblptrh	equ	0xFF7
   456                           tblptrl	equ	0xFF6
   457                           tablat	equ	0xFF5
   458                           prodl	equ	0xFF3
   459                           intcon	equ	0xFF2
   460                           intcon2	equ	0xFF1
   461                           intcon3	equ	0xFF0
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           indf1	equ	0xFE7
   465                           postinc1	equ	0xFE6
   466                           postdec1	equ	0xFE5
   467                           fsr1h	equ	0xFE2
   468                           fsr1l	equ	0xFE1
   469                           indf2	equ	0xFDF
   470                           postinc2	equ	0xFDE
   471                           postdec2	equ	0xFDD
   472                           fsr2h	equ	0xFDA
   473                           fsr2l	equ	0xFD9
   474                           status	equ	0xFD8
   475                           
   476                           	psect	cstackBANK0
   477  000060                     __pcstackBANK0:
   478                           	opt stack 0
   479  000060                     ??_modbus_CRC16:
   480                           
   481                           ; 0 bytes @ 0x0
   482  000060                     	ds	7
   483  000067                     ??_modbus_wsr_answer:
   484  000067                     ??_modbus_rhr_answer:
   485  000067                     ??_modbus_rx_sm:
   486                           
   487                           ; 0 bytes @ 0x7
   488  000067                     	ds	4
   489  00006B                     modbus_rhr_answer@i:
   490                           	opt stack 0
   491                           
   492                           ; 1 bytes @ 0xB
   493  00006B                     	ds	1
   494  00006C                     modbus_rhr_answer@j:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0xC
   498  00006C                     	ds	1
   499  00006D                     modbus_rhr_answer@cnt:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0xD
   503  00006D                     	ds	1
   504  00006E                     ??_modbus_poll:
   505                           
   506                           ; 0 bytes @ 0xE
   507  00006E                     	ds	2
   508  000070                     ??_main:
   509                           
   510                           ; 0 bytes @ 0x10
   511  000070                     	ds	2
   512  000072                     main@i:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0x12
   516  000072                     	ds	2
   517                           tblptru	equ	0xFF8
   518                           tblptrh	equ	0xFF7
   519                           tblptrl	equ	0xFF6
   520                           tablat	equ	0xFF5
   521                           prodl	equ	0xFF3
   522                           intcon	equ	0xFF2
   523                           intcon2	equ	0xFF1
   524                           intcon3	equ	0xFF0
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           indf1	equ	0xFE7
   528                           postinc1	equ	0xFE6
   529                           postdec1	equ	0xFE5
   530                           fsr1h	equ	0xFE2
   531                           fsr1l	equ	0xFE1
   532                           indf2	equ	0xFDF
   533                           postinc2	equ	0xFDE
   534                           postdec2	equ	0xFDD
   535                           fsr2h	equ	0xFDA
   536                           fsr2l	equ	0xFD9
   537                           status	equ	0xFD8
   538                           
   539                           	psect	cstackCOMRAM
   540  000028                     __pcstackCOMRAM:
   541                           	opt stack 0
   542  000028                     ??i2_get_rx_ch:
   543  000028                     ?i2_modbus_CRC16:
   544                           	opt stack 0
   545  000028                     i2modbus_CRC16@buf:
   546                           	opt stack 0
   547                           
   548                           ; 2 bytes @ 0x0
   549  000028                     	ds	1
   550  000029                     i2get_rx_ch@rch:
   551                           	opt stack 0
   552                           
   553                           ; 1 bytes @ 0x1
   554  000029                     	ds	1
   555  00002A                     i2modbus_CRC16@len:
   556                           	opt stack 0
   557                           
   558                           ; 1 bytes @ 0x2
   559  00002A                     	ds	1
   560  00002B                     ??i2_modbus_CRC16:
   561                           
   562                           ; 0 bytes @ 0x3
   563  00002B                     	ds	7
   564  000032                     i2modbus_CRC16@pos:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0xA
   568  000032                     	ds	1
   569  000033                     i2modbus_CRC16@i:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0xB
   573  000033                     	ds	1
   574  000034                     i2modbus_CRC16@crc:
   575                           	opt stack 0
   576                           
   577                           ; 2 bytes @ 0xC
   578  000034                     	ds	2
   579  000036                     ??i2_modbus_rx_sm:
   580                           
   581                           ; 0 bytes @ 0xE
   582  000036                     	ds	3
   583  000039                     ??_ISR:
   584                           
   585                           ; 0 bytes @ 0x11
   586  000039                     	ds	3
   587  00003C                     ??_modbus_refresh:
   588  00003C                     ??_get_rx_ch:
   589  00003C                     ?_modbus_CRC16:
   590                           	opt stack 0
   591  00003C                     uart_send_hex@temp:
   592                           	opt stack 0
   593  00003C                     modbus_CRC16@buf:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x14
   597  00003C                     	ds	1
   598  00003D                     get_rx_ch@rch:
   599                           	opt stack 0
   600                           
   601                           ; 1 bytes @ 0x15
   602  00003D                     	ds	1
   603  00003E                     modbus_refresh@cmd_type:
   604                           	opt stack 0
   605  00003E                     modbus_CRC16@len:
   606                           	opt stack 0
   607                           
   608                           ; 1 bytes @ 0x16
   609  00003E                     	ds	1
   610  00003F                     modbus_CRC16@pos:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x17
   614  00003F                     	ds	1
   615  000040                     modbus_CRC16@i:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x18
   619  000040                     	ds	1
   620  000041                     modbus_CRC16@crc:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x19
   624  000041                     	ds	2
   625                           tblptru	equ	0xFF8
   626                           tblptrh	equ	0xFF7
   627                           tblptrl	equ	0xFF6
   628                           tablat	equ	0xFF5
   629                           prodl	equ	0xFF3
   630                           intcon	equ	0xFF2
   631                           intcon2	equ	0xFF1
   632                           intcon3	equ	0xFF0
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           indf1	equ	0xFE7
   636                           postinc1	equ	0xFE6
   637                           postdec1	equ	0xFE5
   638                           fsr1h	equ	0xFE2
   639                           fsr1l	equ	0xFE1
   640                           indf2	equ	0xFDF
   641                           postinc2	equ	0xFDE
   642                           postdec2	equ	0xFDD
   643                           fsr2h	equ	0xFDA
   644                           fsr2l	equ	0xFD9
   645                           status	equ	0xFD8
   646                           
   647 ;;
   648 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   649 ;;
   650 ;; *************** function _main *****************
   651 ;; Defined at:
   652 ;;		line 779 in file "Turn_counter.c"
   653 ;; Parameters:    Size  Location     Type
   654 ;;		None
   655 ;; Auto vars:     Size  Location     Type
   656 ;;  i               2   18[BANK0 ] int 
   657 ;;  result          2    0        unsigned int 
   658 ;; Return value:  Size  Location     Type
   659 ;;                  2  321[COMRAM] unsigned int 
   660 ;; Registers used:
   661 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   662 ;; Tracked objects:
   663 ;;		On entry : 0/0
   664 ;;		On exit  : 0/0
   665 ;;		Unchanged: 0/0
   666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   667 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   668 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   669 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   670 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   671 ;;Total ram usage:        4 bytes
   672 ;; Hardware stack levels required when called:    6
   673 ;; This function calls:
   674 ;;		_ADC_Init
   675 ;;		_GPIO_init
   676 ;;		_Hold_reg_Inint
   677 ;;		_Interrupt_Init
   678 ;;		_Timer1_init
   679 ;;		_UART_Init
   680 ;;		_modbus_poll
   681 ;;		_modbus_rx_sm
   682 ;; This function is called by:
   683 ;;		Startup code after reset
   684 ;; This function uses a non-reentrant model
   685 ;;
   686                           
   687                           	psect	text0
   688  00065C                     __ptext0:
   689                           	opt stack 0
   690  00065C                     _main:
   691                           	opt stack 25
   692                           
   693                           ;Turn_counter.c: 784: Hold_reg_Inint();
   694                           
   695                           ;incstack = 0
   696  00065C  ECCD  F004         	call	_Hold_reg_Inint	;wreg free
   697                           
   698                           ;Turn_counter.c: 786: Timer1_init();
   699  000660  ECD7  F004         	call	_Timer1_init	;wreg free
   700                           
   701                           ; BSR set to: 0
   702                           ;Turn_counter.c: 787: GPIO_init();
   703  000664  EC77  F004         	call	_GPIO_init	;wreg free
   704                           
   705                           ; BSR set to: 15
   706                           ;Turn_counter.c: 788: ADC_Init();
   707  000668  EC9F  F004         	call	_ADC_Init	;wreg free
   708                           
   709                           ; BSR set to: 15
   710                           ;Turn_counter.c: 789: UART_Init();
   711  00066C  EC8E  F004         	call	_UART_Init	;wreg free
   712                           
   713                           ; BSR set to: 15
   714                           ;Turn_counter.c: 790: Interrupt_Init();
   715  000670  ECB0  F004         	call	_Interrupt_Init	;wreg free
   716                           
   717                           ; BSR set to: 15
   718                           ;Turn_counter.c: 804: for(int i = 0; i < 125; i++) holding_register[i] = 0;
   719  000674  0100               	movlb	0	; () banked
   720  000676  6B72               	clrf	main@i& (0+255),b
   721  000678  6B73               	clrf	(main@i+1)& (0+255),b
   722  00067A                     l2334:
   723                           
   724                           ; BSR set to: 0
   725  00067A  0E00               	movlw	low _holding_register	;volatile
   726  00067C  6F70               	movwf	??_main& (0+255),b
   727  00067E  0E01               	movlw	high _holding_register	;volatile
   728  000680  6F71               	movwf	(??_main+1)& (0+255),b
   729  000682  90D8               	bcf	status,0,c
   730  000684  3572               	rlcf	main@i& (0+255),w,b
   731  000686  6ED9               	movwf	fsr2l,c
   732  000688  3573               	rlcf	(main@i+1)& (0+255),w,b
   733  00068A  6EDA               	movwf	fsr2h,c
   734  00068C  5170               	movf	??_main& (0+255),w,b
   735  00068E  26D9               	addwf	fsr2l,f,c
   736  000690  5171               	movf	(??_main+1)& (0+255),w,b
   737  000692  22DA               	addwfc	fsr2h,f,c
   738  000694  6ADE               	clrf	postinc2,c
   739  000696  6ADD               	clrf	postdec2,c
   740                           
   741                           ; BSR set to: 0
   742  000698  4B72               	infsnz	main@i& (0+255),f,b
   743  00069A  2B73               	incf	(main@i+1)& (0+255),f,b
   744                           
   745                           ; BSR set to: 0
   746  00069C  5173               	movf	(main@i+1)& (0+255),w,b
   747  00069E  0A80               	xorlw	128
   748  0006A0  0F80               	addlw	-128
   749  0006A2  0E7D               	movlw	125
   750  0006A4  B4D8               	btfsc	status,2,c
   751  0006A6  5D72               	subwf	main@i& (0+255),w,b
   752  0006A8  E3E8               	bnc	l2334
   753                           
   754                           ; BSR set to: 0
   755                           ;Turn_counter.c: 806: T1CONbits.TMR1ON = 1;
   756  0006AA  80CD               	bsf	4045,0,c	;volatile
   757  0006AC                     l324:
   758                           
   759                           ;Turn_counter.c: 809: {
   760                           ;Turn_counter.c: 811: if(PORTBbits.RB3)
   761  0006AC  5081               	movf	3969,w,c	;volatile
   762                           
   763                           ;Turn_counter.c: 820: }
   764                           ;Turn_counter.c: 849: INTCON3bits.INT1IE = 0;
   765                           
   766                           ;Turn_counter.c: 817: else
   767                           ;Turn_counter.c: 818: {
   768  0006AE  96F0               	bcf	intcon3,3,c	;volatile
   769                           
   770                           ;Turn_counter.c: 850: INTCONbits.TMR0IE = 0;
   771  0006B0  9AF2               	bcf	intcon,5,c	;volatile
   772                           
   773                           ;Turn_counter.c: 851: PIE1bits.TMR1IE = 0;
   774  0006B2  909D               	bcf	3997,0,c	;volatile
   775                           
   776                           ;Turn_counter.c: 853: modbus_rx_sm();
   777  0006B4  EC3E  F000         	call	_modbus_rx_sm	;wreg free
   778                           
   779                           ;Turn_counter.c: 854: modbus_poll();
   780  0006B8  ECE2  F003         	call	_modbus_poll	;wreg free
   781                           
   782                           ;Turn_counter.c: 856: INTCON3bits.INT1IE = 1;
   783  0006BC  86F0               	bsf	intcon3,3,c	;volatile
   784                           
   785                           ;Turn_counter.c: 857: INTCONbits.TMR0IE = 1;
   786  0006BE  8AF2               	bsf	intcon,5,c	;volatile
   787                           
   788                           ;Turn_counter.c: 858: PIE1bits.TMR1IE = 1;
   789  0006C0  809D               	bsf	3997,0,c	;volatile
   790                           
   791                           ;Turn_counter.c: 860: led_cnt++;
   792  0006C2  4A45               	infsnz	_led_cnt,f,c
   793  0006C4  2A46               	incf	_led_cnt+1,f,c
   794                           
   795                           ;Turn_counter.c: 861: if(led_cnt > 5)
   796  0006C6  0E06               	movlw	6
   797  0006C8  5C45               	subwf	_led_cnt,w,c
   798  0006CA  0E00               	movlw	0
   799  0006CC  5846               	subwfb	_led_cnt+1,w,c
   800  0006CE  E3EE               	bnc	l324
   801                           
   802                           ;Turn_counter.c: 862: {
   803                           ;Turn_counter.c: 863: led_cnt = 0;
   804  0006D0  6A45               	clrf	_led_cnt,c
   805  0006D2  6A46               	clrf	_led_cnt+1,c
   806                           
   807                           ;Turn_counter.c: 864: LATCbits.LATC4 = 0;
   808  0006D4  988B               	bcf	3979,4,c	;volatile
   809                           
   810                           ;Turn_counter.c: 865: LATCbits.LATC5 = 0;
   811  0006D6  9A8B               	bcf	3979,5,c	;volatile
   812  0006D8  D7E9               	goto	l324
   813  0006DA                     __end_of_main:
   814                           	opt stack 0
   815                           tblptru	equ	0xFF8
   816                           tblptrh	equ	0xFF7
   817                           tblptrl	equ	0xFF6
   818                           tablat	equ	0xFF5
   819                           prodl	equ	0xFF3
   820                           intcon	equ	0xFF2
   821                           intcon2	equ	0xFF1
   822                           intcon3	equ	0xFF0
   823                           postinc0	equ	0xFEE
   824                           wreg	equ	0xFE8
   825                           indf1	equ	0xFE7
   826                           postinc1	equ	0xFE6
   827                           postdec1	equ	0xFE5
   828                           fsr1h	equ	0xFE2
   829                           fsr1l	equ	0xFE1
   830                           indf2	equ	0xFDF
   831                           postinc2	equ	0xFDE
   832                           postdec2	equ	0xFDD
   833                           fsr2h	equ	0xFDA
   834                           fsr2l	equ	0xFD9
   835                           status	equ	0xFD8
   836                           
   837 ;; *************** function _modbus_rx_sm *****************
   838 ;; Defined at:
   839 ;;		line 360 in file "Turn_counter.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;		None
   842 ;; Auto vars:     Size  Location     Type
   843 ;;		None
   844 ;; Return value:  Size  Location     Type
   845 ;;		None               void
   846 ;; Registers used:
   847 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   848 ;; Tracked objects:
   849 ;;		On entry : 0/0
   850 ;;		On exit  : 0/0
   851 ;;		Unchanged: 0/0
   852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   854 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   855 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   856 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   857 ;;Total ram usage:        3 bytes
   858 ;; Hardware stack levels used:    1
   859 ;; Hardware stack levels required when called:    4
   860 ;; This function calls:
   861 ;;		_get_rx_ch
   862 ;;		_modbus_CRC16
   863 ;; This function is called by:
   864 ;;		_main
   865 ;; This function uses a non-reentrant model
   866 ;;
   867                           
   868                           	psect	text1
   869  00007C                     __ptext1:
   870                           	opt stack 0
   871  00007C                     _modbus_rx_sm:
   872                           	opt stack 26
   873                           
   874                           ;Turn_counter.c: 364: while(rd_ptr < wr_ptr)
   875                           
   876                           ;incstack = 0
   877  00007C  D0A2               	goto	l2246
   878  00007E                     l2146:
   879                           
   880                           ;Turn_counter.c: 365: {
   881                           ;Turn_counter.c: 366: rx_byte = get_rx_ch();
   882  00007E  EC41  F004         	call	_get_rx_ch	;wreg free
   883  000082  6E26               	movwf	_rx_byte,c	;volatile
   884                           
   885                           ;Turn_counter.c: 367: switch(rd_state)
   886  000084  D092               	goto	l2244
   887  000086                     l2148:
   888                           
   889                           ;Turn_counter.c: 371: if(rx_byte == dev_id)
   890  000086  5047               	movf	_dev_id,w,c
   891  000088  6226               	cpfseq	_rx_byte,c	;volatile
   892  00008A  D002               	goto	l2152
   893                           
   894                           ;Turn_counter.c: 372: {
   895                           ;Turn_counter.c: 374: rd_state = 11;
   896  00008C  0E0B               	movlw	11
   897  00008E  6E48               	movwf	_rd_state,c	;volatile
   898  000090                     l2152:
   899                           
   900                           ;Turn_counter.c: 376: }
   901                           ;Turn_counter.c: 377: if(rx_byte == 0)
   902  000090  6626               	tstfsz	_rx_byte,c	;volatile
   903  000092  D097               	goto	l2246
   904                           
   905                           ;Turn_counter.c: 378: {
   906                           ;Turn_counter.c: 380: rd_state = 11;
   907  000094  0E0B               	movlw	11
   908  000096  D00B               	goto	L4
   909  000098                     l2156:
   910                           
   911                           ;Turn_counter.c: 389: reg_addr_flag = 1;
   912  000098  0E01               	movlw	1
   913  00009A  6E23               	movwf	_reg_addr_flag,c	;volatile
   914  00009C                     l2158:
   915                           
   916                           ;Turn_counter.c: 390: regs2read = 0;
   917  00009C  6A17               	clrf	_regs2read,c	;volatile
   918  00009E  6A18               	clrf	_regs2read+1,c	;volatile
   919                           
   920                           ;Turn_counter.c: 391: reg_wr_data = 0;
   921  0000A0  6A15               	clrf	_reg_wr_data,c	;volatile
   922  0000A2  6A16               	clrf	_reg_wr_data+1,c	;volatile
   923  0000A4  D031               	goto	L6
   924  0000A6                     l2162:
   925                           
   926                           ;Turn_counter.c: 396: reg_addr_flag = 1;
   927  0000A6  0E01               	movlw	1
   928  0000A8  6E23               	movwf	_reg_addr_flag,c	;volatile
   929                           
   930                           ;Turn_counter.c: 397: reg_wr_flag = 1;
   931  0000AA  6E25               	movwf	_reg_wr_flag,c	;volatile
   932  0000AC  D7F7               	goto	l2158
   933  0000AE                     L4:
   934  0000AE  6E48               	movwf	_rd_state,c	;volatile
   935                           
   936                           ;Turn_counter.c: 405: }
   937  0000B0  D088               	goto	l2246
   938  0000B2                     l2170:
   939  0000B2  5026               	movf	_rx_byte,w,c	;volatile
   940                           
   941                           ; Switch size 1, requested type "space"
   942                           ; Number of cases is 2, Range of values is 3 to 6
   943                           ; switch strategies available:
   944                           ; Name         Instructions Cycles
   945                           ; simple_byte            7     4 (average)
   946                           ;	Chosen strategy is simple_byte
   947  0000B4  0A03               	xorlw	3	; case 3
   948  0000B6  E0F0               	bz	l2156
   949  0000B8  0A05               	xorlw	5	; case 6
   950  0000BA  E0F5               	bz	l2162
   951  0000BC  D074               	goto	l2242
   952  0000BE                     l249:
   953                           
   954                           ;Turn_counter.c: 409: temp_buf = (unsigned int)rx_byte;
   955  0000BE  C026  F01D         	movff	_rx_byte,_temp_buf	;volatile
   956  0000C2  6A1E               	clrf	_temp_buf+1,c	;volatile
   957                           
   958                           ;Turn_counter.c: 410: temp_buf = temp_buf << 8;
   959  0000C4  501D               	movf	_temp_buf,w,c	;volatile
   960  0000C6  6E1E               	movwf	_temp_buf+1,c	;volatile
   961  0000C8  6A1D               	clrf	_temp_buf,c	;volatile
   962                           
   963                           ;Turn_counter.c: 411: rd_state = 13;
   964  0000CA  0E0D               	movlw	13
   965  0000CC  D7F0               	goto	L4
   966  0000CE                     l2174:
   967                           
   968                           ;Turn_counter.c: 415: temp_buf |= (unsigned int)rx_byte;
   969  0000CE  5026               	movf	_rx_byte,w,c	;volatile
   970  0000D0  121D               	iorwf	_temp_buf,f,c	;volatile
   971                           
   972                           ;Turn_counter.c: 417: if(reg_addr_flag)
   973  0000D2  5023               	movf	_reg_addr_flag,w,c	;volatile
   974  0000D4  E010               	bz	l2188
   975                           
   976                           ;Turn_counter.c: 418: {
   977                           ;Turn_counter.c: 419: modbus_reg_addr = temp_buf;
   978  0000D6  C01D  F013         	movff	_temp_buf,_modbus_reg_addr	;volatile
   979  0000DA  C01E  F014         	movff	_temp_buf+1,_modbus_reg_addr+1	;volatile
   980                           
   981                           ;Turn_counter.c: 420: reg_addr_flag = 0;
   982  0000DE  6A23               	clrf	_reg_addr_flag,c	;volatile
   983                           
   984                           ;Turn_counter.c: 421: if(reg_wr_flag) reg_qty_flag = 0;
   985  0000E0  5025               	movf	_reg_wr_flag,w,c	;volatile
   986  0000E2  E002               	bz	l2184
   987  0000E4  6A24               	clrf	_reg_qty_flag,c	;volatile
   988  0000E6  D002               	goto	l253
   989  0000E8                     l2184:
   990                           
   991                           ;Turn_counter.c: 422: else reg_qty_flag = 1;
   992  0000E8  0E01               	movlw	1
   993  0000EA  6E24               	movwf	_reg_qty_flag,c	;volatile
   994  0000EC                     l253:
   995                           
   996                           ;Turn_counter.c: 423: rd_state = 12;
   997  0000EC  0E0C               	movlw	12
   998  0000EE  6E48               	movwf	_rd_state,c	;volatile
   999                           
  1000                           ;Turn_counter.c: 424: temp_buf = 0;
  1001  0000F0  6A1D               	clrf	_temp_buf,c	;volatile
  1002  0000F2  6A1E               	clrf	_temp_buf+1,c	;volatile
  1003                           
  1004                           ;Turn_counter.c: 425: break;
  1005  0000F4  D066               	goto	l2246
  1006  0000F6                     l2188:
  1007                           
  1008                           ;Turn_counter.c: 426: }
  1009                           ;Turn_counter.c: 428: if(reg_wr_flag)
  1010  0000F6  5025               	movf	_reg_wr_flag,w,c	;volatile
  1011  0000F8  E009               	bz	l2194
  1012                           
  1013                           ;Turn_counter.c: 429: {
  1014                           ;Turn_counter.c: 430: reg_wr_data = temp_buf;
  1015  0000FA  C01D  F015         	movff	_temp_buf,_reg_wr_data	;volatile
  1016  0000FE  C01E  F016         	movff	_temp_buf+1,_reg_wr_data+1	;volatile
  1017                           
  1018                           ;Turn_counter.c: 431: reg_wr_flag = 0;
  1019  000102  6A25               	clrf	_reg_wr_flag,c	;volatile
  1020                           
  1021                           ;Turn_counter.c: 432: get_crc_flag = 0x06;
  1022  000104  0E06               	movlw	6
  1023  000106  6E20               	movwf	_get_crc_flag,c	;volatile
  1024  000108                     L6:
  1025                           
  1026                           ;Turn_counter.c: 433: rd_state = 12;
  1027  000108  0E0C               	movlw	12
  1028  00010A  D7D1               	goto	L4
  1029  00010C                     l2194:
  1030                           
  1031                           ;Turn_counter.c: 435: }
  1032                           ;Turn_counter.c: 437: if(reg_qty_flag)
  1033  00010C  5024               	movf	_reg_qty_flag,w,c	;volatile
  1034  00010E  E011               	bz	l2206
  1035                           
  1036                           ;Turn_counter.c: 438: {
  1037                           ;Turn_counter.c: 439: if(temp_buf < 125)
  1038  000110  0E7D               	movlw	125
  1039  000112  5C1D               	subwf	_temp_buf,w,c	;volatile
  1040  000114  0E00               	movlw	0
  1041  000116  581E               	subwfb	_temp_buf+1,w,c	;volatile
  1042  000118  E208               	bc	l2202
  1043                           
  1044                           ;Turn_counter.c: 440: {
  1045                           ;Turn_counter.c: 441: regs2read = temp_buf;
  1046  00011A  C01D  F017         	movff	_temp_buf,_regs2read	;volatile
  1047  00011E  C01E  F018         	movff	_temp_buf+1,_regs2read+1	;volatile
  1048                           
  1049                           ;Turn_counter.c: 442: get_crc_flag = 0x03;
  1050  000122  0E03               	movlw	3
  1051  000124  6E20               	movwf	_get_crc_flag,c	;volatile
  1052                           
  1053                           ;Turn_counter.c: 443: rd_state = 12;
  1054  000126  0E0C               	movlw	12
  1055  000128  D001               	goto	L2
  1056  00012A                     l2202:
  1057                           
  1058                           ;Turn_counter.c: 446: else rd_state = 10;
  1059  00012A  0E0A               	movlw	10
  1060  00012C                     L2:
  1061  00012C  6E48               	movwf	_rd_state,c	;volatile
  1062                           
  1063                           ;Turn_counter.c: 447: reg_qty_flag = 0;
  1064  00012E  6A24               	clrf	_reg_qty_flag,c	;volatile
  1065                           
  1066                           ;Turn_counter.c: 448: break;
  1067  000130  D048               	goto	l2246
  1068  000132                     l2206:
  1069                           
  1070                           ;Turn_counter.c: 449: }
  1071                           ;Turn_counter.c: 451: if(get_crc_flag == 0x03)
  1072  000132  5020               	movf	_get_crc_flag,w,c	;volatile
  1073  000134  0A03               	xorlw	3
  1074  000136  E11B               	bnz	l2224
  1075                           
  1076                           ;Turn_counter.c: 452: {
  1077                           ;Turn_counter.c: 453: crc_buf[0] = dev_id;
  1078  000138  C047  F200         	movff	_dev_id,_crc_buf	;volatile
  1079                           
  1080                           ;Turn_counter.c: 454: crc_buf[1] = 0x03;
  1081  00013C  0E03               	movlw	3
  1082                           
  1083                           ;Turn_counter.c: 455: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  1084                           
  1085                           ; BSR set to: 2
  1086                           ;Turn_counter.c: 456: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  1087  00013E  D846               	call	PL2	;call to abstracted procedure
  1088                           
  1089                           ;Turn_counter.c: 457: crc_buf[4] = (unsigned char)(regs2read >> 8);
  1090  000140  C018  F067         	movff	_regs2read+1,??_modbus_rx_sm	;volatile
  1091  000144  D858               	call	PL10	;call to abstracted procedure
  1092                           
  1093                           ; BSR set to: 2
  1094                           ;Turn_counter.c: 458: crc_buf[5] = (unsigned char)(regs2read & 0x00ff);
  1095  000146  C017  F205         	movff	_regs2read,_crc_buf+5	;volatile
  1096                           
  1097                           ; BSR set to: 2
  1098                           ;Turn_counter.c: 459: CRC16 = modbus_CRC16(crc_buf,6);
  1099  00014A  D84E               	call	PL8	;call to abstracted procedure
  1100  00014C  EC6D  F003         	call	_modbus_CRC16	;wreg free
  1101  000150  C03C  F00B         	movff	?_modbus_CRC16,_CRC16	;volatile
  1102  000154  C03D  F00C         	movff	?_modbus_CRC16+1,_CRC16+1	;volatile
  1103                           
  1104                           ; BSR set to: 0
  1105                           ;Turn_counter.c: 460: if(CRC16 == temp_buf)
  1106  000158  501E               	movf	_temp_buf+1,w,c	;volatile
  1107  00015A  180C               	xorwf	_CRC16+1,w,c	;volatile
  1108  00015C  E102               	bnz	u1225
  1109  00015E  501D               	movf	_temp_buf,w,c	;volatile
  1110  000160  180B               	xorwf	_CRC16,w,c	;volatile
  1111  000162                     u1225:
  1112  000162  E102               	bnz	l259
  1113                           
  1114                           ; BSR set to: 0
  1115                           ;Turn_counter.c: 461: answer = 0x03;
  1116  000164  0E03               	movlw	3
  1117  000166  6E1F               	movwf	_answer,c	;volatile
  1118  000168                     l259:
  1119                           
  1120                           ; BSR set to: 0
  1121                           ;Turn_counter.c: 463: rd_state = 10;
  1122  000168  0E0A               	movlw	10
  1123  00016A  6E48               	movwf	_rd_state,c	;volatile
  1124                           
  1125                           ; BSR set to: 0
  1126                           ;Turn_counter.c: 464: get_crc_flag = 0;
  1127  00016C  6A20               	clrf	_get_crc_flag,c	;volatile
  1128  00016E                     l2224:
  1129                           
  1130                           ;Turn_counter.c: 465: }
  1131                           ;Turn_counter.c: 467: if(get_crc_flag == 0x06)
  1132  00016E  5020               	movf	_get_crc_flag,w,c	;volatile
  1133  000170  0A06               	xorlw	6
  1134  000172  E127               	bnz	l2246
  1135                           
  1136                           ;Turn_counter.c: 468: {
  1137                           ;Turn_counter.c: 469: crc_buf[0] = dev_id;
  1138  000174  C047  F200         	movff	_dev_id,_crc_buf	;volatile
  1139                           
  1140                           ;Turn_counter.c: 470: crc_buf[1] = 0x06;
  1141  000178  0E06               	movlw	6
  1142                           
  1143                           ;Turn_counter.c: 471: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  1144                           
  1145                           ; BSR set to: 2
  1146                           ;Turn_counter.c: 472: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  1147  00017A  D828               	call	PL2	;call to abstracted procedure
  1148                           
  1149                           ;Turn_counter.c: 473: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  1150  00017C  C016  F067         	movff	_reg_wr_data+1,??_modbus_rx_sm	;volatile
  1151  000180  D83A               	call	PL10	;call to abstracted procedure
  1152                           
  1153                           ; BSR set to: 2
  1154                           ;Turn_counter.c: 474: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  1155  000182  C015  F205         	movff	_reg_wr_data,_crc_buf+5	;volatile
  1156                           
  1157                           ; BSR set to: 2
  1158                           ;Turn_counter.c: 476: CRC16 = modbus_CRC16(crc_buf,6);
  1159  000186  D830               	call	PL8	;call to abstracted procedure
  1160  000188  EC6D  F003         	call	_modbus_CRC16	;wreg free
  1161  00018C  C03C  F00B         	movff	?_modbus_CRC16,_CRC16	;volatile
  1162  000190  C03D  F00C         	movff	?_modbus_CRC16+1,_CRC16+1	;volatile
  1163                           
  1164                           ; BSR set to: 0
  1165                           ;Turn_counter.c: 477: if(CRC16 == temp_buf)
  1166  000194  501E               	movf	_temp_buf+1,w,c	;volatile
  1167  000196  180C               	xorwf	_CRC16+1,w,c	;volatile
  1168  000198  E102               	bnz	u1245
  1169  00019A  501D               	movf	_temp_buf,w,c	;volatile
  1170  00019C  180B               	xorwf	_CRC16,w,c	;volatile
  1171  00019E                     u1245:
  1172  00019E  E102               	bnz	l2240
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;Turn_counter.c: 478: answer = 0x06;
  1176  0001A0  0E06               	movlw	6
  1177  0001A2  6E1F               	movwf	_answer,c	;volatile
  1178  0001A4                     l2240:
  1179                           
  1180                           ; BSR set to: 0
  1181                           ;Turn_counter.c: 480: get_crc_flag = 0;
  1182  0001A4  6A20               	clrf	_get_crc_flag,c	;volatile
  1183  0001A6                     l2242:
  1184  0001A6  0E0A               	movlw	10
  1185  0001A8  D782               	goto	L4
  1186  0001AA                     l2244:
  1187  0001AA  5048               	movf	_rd_state,w,c	;volatile
  1188                           
  1189                           ; Switch size 1, requested type "space"
  1190                           ; Number of cases is 4, Range of values is 10 to 13
  1191                           ; switch strategies available:
  1192                           ; Name         Instructions Cycles
  1193                           ; simple_byte           13     7 (average)
  1194                           ;	Chosen strategy is simple_byte
  1195  0001AC  0A0A               	xorlw	10	; case 10
  1196  0001AE  E101 D76A          	bz	l2148
  1197  0001B2  0A01               	xorlw	1	; case 11
  1198  0001B4  E101 D77D          	bz	l2170
  1199  0001B8  0A07               	xorlw	7	; case 12
  1200  0001BA  E081               	bz	l249
  1201  0001BC  0A01               	xorlw	1	; case 13
  1202  0001BE  E087               	bz	l2174
  1203  0001C0  D7F2               	goto	l2242
  1204  0001C2                     l2246:
  1205  0001C2  5027               	movf	_wr_ptr,w,c
  1206  0001C4  5C22               	subwf	_rd_ptr,w,c
  1207  0001C6  B0D8               	btfsc	status,0,c
  1208  0001C8  0012               	return	
  1209  0001CA  D759               	goto	l2146
  1210  0001CC                     __end_of_modbus_rx_sm:
  1211                           	opt stack 0
  1212  0001CC                     PL2:
  1213                           	opt stack 26
  1214  0001CC  0102               	movlb	2	; () banked
  1215  0001CE  6F01               	movwf	(_crc_buf+1)& (0+255),b	;volatile
  1216  0001D0  C014  F067         	movff	_modbus_reg_addr+1,??_modbus_rx_sm	;volatile
  1217  0001D4  C067  F068         	movff	??_modbus_rx_sm,??_modbus_rx_sm+1
  1218  0001D8  0100               	movlb	0	; () banked
  1219  0001DA  6B69               	clrf	(??_modbus_rx_sm+2)& (0+255),b
  1220  0001DC  5168               	movf	(??_modbus_rx_sm+1)& (0+255),w,b
  1221  0001DE  0102               	movlb	2	; () banked
  1222  0001E0  6F02               	movwf	(_crc_buf+2)& (0+255),b	;volatile
  1223  0001E2  C013  F203         	movff	_modbus_reg_addr,_crc_buf+3	;volatile
  1224  0001E6  0012               	return	
  1225  0001E8                     __end_ofPL2:
  1226                           	opt stack 0
  1227  0001E8                     PL8:
  1228                           	opt stack 26
  1229  0001E8  0E02               	movlw	high _crc_buf	;volatile
  1230  0001EA  6E3D               	movwf	modbus_CRC16@buf+1,c
  1231  0001EC  0E00               	movlw	low _crc_buf	;volatile
  1232  0001EE  6E3C               	movwf	modbus_CRC16@buf,c
  1233  0001F0  0E06               	movlw	6
  1234  0001F2  6E3E               	movwf	modbus_CRC16@len,c
  1235  0001F4  0C06               	retlw	6
  1236  0001F6                     __end_ofPL8:
  1237                           	opt stack 0
  1238  0001F6                     PL10:
  1239                           	opt stack 26
  1240  0001F6  C067  F068         	movff	??_modbus_rx_sm,??_modbus_rx_sm+1
  1241  0001FA  0100               	movlb	0	; () banked
  1242  0001FC  6B69               	clrf	(??_modbus_rx_sm+2)& (0+255),b
  1243  0001FE  5168               	movf	(??_modbus_rx_sm+1)& (0+255),w,b
  1244  000200  0102               	movlb	2	; () banked
  1245  000202  6F04               	movwf	(_crc_buf+4)& (0+255),b	;volatile
  1246  000204  0012               	return	
  1247  000206                     __end_ofPL10:
  1248                           	opt stack 0
  1249                           tblptru	equ	0xFF8
  1250                           tblptrh	equ	0xFF7
  1251                           tblptrl	equ	0xFF6
  1252                           tablat	equ	0xFF5
  1253                           prodl	equ	0xFF3
  1254                           intcon	equ	0xFF2
  1255                           intcon2	equ	0xFF1
  1256                           intcon3	equ	0xFF0
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           indf1	equ	0xFE7
  1260                           postinc1	equ	0xFE6
  1261                           postdec1	equ	0xFE5
  1262                           fsr1h	equ	0xFE2
  1263                           fsr1l	equ	0xFE1
  1264                           indf2	equ	0xFDF
  1265                           postinc2	equ	0xFDE
  1266                           postdec2	equ	0xFDD
  1267                           fsr2h	equ	0xFDA
  1268                           fsr2l	equ	0xFD9
  1269                           status	equ	0xFD8
  1270                           
  1271 ;; *************** function _get_rx_ch *****************
  1272 ;; Defined at:
  1273 ;;		line 241 in file "Turn_counter.c"
  1274 ;; Parameters:    Size  Location     Type
  1275 ;;		None
  1276 ;; Auto vars:     Size  Location     Type
  1277 ;;  rch             1   21[COMRAM] unsigned char 
  1278 ;; Return value:  Size  Location     Type
  1279 ;;                  1    wreg      unsigned char 
  1280 ;; Registers used:
  1281 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1282 ;; Tracked objects:
  1283 ;;		On entry : 0/0
  1284 ;;		On exit  : 0/0
  1285 ;;		Unchanged: 0/0
  1286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1291 ;;Total ram usage:        2 bytes
  1292 ;; Hardware stack levels used:    1
  1293 ;; Hardware stack levels required when called:    3
  1294 ;; This function calls:
  1295 ;;		Nothing
  1296 ;; This function is called by:
  1297 ;;		_modbus_rx_sm
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text2
  1302  000882                     __ptext2:
  1303                           	opt stack 0
  1304  000882                     _get_rx_ch:
  1305                           	opt stack 26
  1306                           
  1307                           ;Turn_counter.c: 243: unsigned char rch;
  1308                           ;Turn_counter.c: 245: if (rd_ptr < wr_ptr)
  1309                           
  1310                           ;incstack = 0
  1311  000882  5027               	movf	_wr_ptr,w,c
  1312  000884  5C22               	subwf	_rd_ptr,w,c
  1313  000886  E20C               	bc	l2054
  1314                           
  1315                           ;Turn_counter.c: 246: {
  1316                           ;Turn_counter.c: 247: rd_ptr++;
  1317  000888  2A22               	incf	_rd_ptr,f,c
  1318                           
  1319                           ;Turn_counter.c: 248: rch = rx_buf[rd_ptr & 0x0f];
  1320  00088A  C022  F03C         	movff	_rd_ptr,??_get_rx_ch
  1321  00088E  0E0F               	movlw	15
  1322  000890  163C               	andwf	??_get_rx_ch,f,c
  1323  000892  503C               	movf	??_get_rx_ch,w,c
  1324  000894  0100               	movlb	0	; () banked
  1325  000896  0F74               	addlw	low _rx_buf
  1326  000898  6ED9               	movwf	fsr2l,c
  1327  00089A  6ADA               	clrf	fsr2h,c
  1328  00089C  50DF               	movf	indf2,w,c
  1329  00089E  D001               	goto	L7
  1330  0008A0                     l2054:
  1331                           
  1332                           ;Turn_counter.c: 250: else rch = 'x';
  1333  0008A0  0E78               	movlw	120
  1334  0008A2                     L7:
  1335  0008A2  6E3D               	movwf	get_rx_ch@rch,c
  1336                           
  1337                           ;Turn_counter.c: 256: if ((wr_ptr==rd_ptr) && (wr_ptr > 16))
  1338  0008A4  5022               	movf	_rd_ptr,w,c
  1339  0008A6  6227               	cpfseq	_wr_ptr,c
  1340  0008A8  D005               	goto	l2060
  1341  0008AA  0E10               	movlw	16
  1342  0008AC  6427               	cpfsgt	_wr_ptr,c
  1343  0008AE  D002               	goto	l2060
  1344                           
  1345                           ;Turn_counter.c: 257: {
  1346                           ;Turn_counter.c: 258: wr_ptr=0;
  1347  0008B0  6A27               	clrf	_wr_ptr,c
  1348                           
  1349                           ;Turn_counter.c: 259: rd_ptr=0;
  1350  0008B2  6A22               	clrf	_rd_ptr,c
  1351  0008B4                     l2060:
  1352                           
  1353                           ;Turn_counter.c: 261: }
  1354                           ;Turn_counter.c: 264: return rch;
  1355  0008B4  503D               	movf	get_rx_ch@rch,w,c
  1356  0008B6  0012               	return	
  1357  0008B8                     __end_of_get_rx_ch:
  1358                           	opt stack 0
  1359                           tblptru	equ	0xFF8
  1360                           tblptrh	equ	0xFF7
  1361                           tblptrl	equ	0xFF6
  1362                           tablat	equ	0xFF5
  1363                           prodl	equ	0xFF3
  1364                           intcon	equ	0xFF2
  1365                           intcon2	equ	0xFF1
  1366                           intcon3	equ	0xFF0
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           indf1	equ	0xFE7
  1370                           postinc1	equ	0xFE6
  1371                           postdec1	equ	0xFE5
  1372                           fsr1h	equ	0xFE2
  1373                           fsr1l	equ	0xFE1
  1374                           indf2	equ	0xFDF
  1375                           postinc2	equ	0xFDE
  1376                           postdec2	equ	0xFDD
  1377                           fsr2h	equ	0xFDA
  1378                           fsr2l	equ	0xFD9
  1379                           status	equ	0xFD8
  1380                           
  1381 ;; *************** function _modbus_poll *****************
  1382 ;; Defined at:
  1383 ;;		line 495 in file "Turn_counter.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;		None               void
  1390 ;; Registers used:
  1391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1399 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1401 ;;Total ram usage:        2 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    5
  1404 ;; This function calls:
  1405 ;;		_modbus_refresh
  1406 ;;		_modbus_rhr_answer
  1407 ;;		_modbus_wsr_answer
  1408 ;; This function is called by:
  1409 ;;		_main
  1410 ;; This function uses a non-reentrant model
  1411 ;;
  1412                           
  1413                           	psect	text3
  1414  0007C4                     __ptext3:
  1415                           	opt stack 0
  1416  0007C4                     _modbus_poll:
  1417                           	opt stack 25
  1418                           
  1419                           ;Turn_counter.c: 501: if(answer == 0x03)
  1420                           
  1421                           ;incstack = 0
  1422  0007C4  501F               	movf	_answer,w,c	;volatile
  1423  0007C6  0A03               	xorlw	3
  1424  0007C8  E10C               	bnz	l2258
  1425                           
  1426                           ;Turn_counter.c: 502: {
  1427                           ;Turn_counter.c: 504: addr_buf_1 = modbus_reg_addr - 1000;
  1428  0007CA  0E18               	movlw	24
  1429  0007CC  2413               	addwf	_modbus_reg_addr,w,c	;volatile
  1430  0007CE  6E0F               	movwf	_addr_buf_1,c	;volatile
  1431  0007D0  0EFC               	movlw	252
  1432  0007D2  2014               	addwfc	_modbus_reg_addr+1,w,c	;volatile
  1433  0007D4  6E10               	movwf	_addr_buf_1+1,c	;volatile
  1434                           
  1435                           ;Turn_counter.c: 505: modbus_refresh(0x03);
  1436  0007D6  0E03               	movlw	3
  1437  0007D8  ECDA  F002         	call	_modbus_refresh
  1438                           
  1439                           ;Turn_counter.c: 506: modbus_rhr_answer();
  1440  0007DC  ECC8  F001         	call	_modbus_rhr_answer	;wreg free
  1441                           
  1442                           ;Turn_counter.c: 507: answer = 0;
  1443  0007E0  6A1F               	clrf	_answer,c	;volatile
  1444  0007E2                     l2258:
  1445                           
  1446                           ;Turn_counter.c: 508: }
  1447                           ;Turn_counter.c: 511: if(answer == 0x06)
  1448  0007E2  501F               	movf	_answer,w,c	;volatile
  1449  0007E4  0A06               	xorlw	6
  1450  0007E6  A4D8               	btfss	status,2,c
  1451  0007E8  0012               	return	
  1452                           
  1453                           ;Turn_counter.c: 512: {
  1454                           ;Turn_counter.c: 515: addr_buf_1 = modbus_reg_addr - 1000;
  1455  0007EA  0E18               	movlw	24
  1456  0007EC  2413               	addwf	_modbus_reg_addr,w,c	;volatile
  1457  0007EE  6E0F               	movwf	_addr_buf_1,c	;volatile
  1458  0007F0  0EFC               	movlw	252
  1459  0007F2  2014               	addwfc	_modbus_reg_addr+1,w,c	;volatile
  1460  0007F4  6E10               	movwf	_addr_buf_1+1,c	;volatile
  1461                           
  1462                           ;Turn_counter.c: 516: holding_register[addr_buf_1] = reg_wr_data;
  1463  0007F6  0E00               	movlw	low _holding_register	;volatile
  1464  0007F8  0100               	movlb	0	; () banked
  1465  0007FA  6F6E               	movwf	??_modbus_poll& (0+255),b
  1466  0007FC  0E01               	movlw	high _holding_register	;volatile
  1467  0007FE  6F6F               	movwf	(??_modbus_poll+1)& (0+255),b
  1468  000800  90D8               	bcf	status,0,c
  1469  000802  340F               	rlcf	_addr_buf_1,w,c	;volatile
  1470  000804  6ED9               	movwf	fsr2l,c
  1471  000806  3410               	rlcf	_addr_buf_1+1,w,c	;volatile
  1472  000808  6EDA               	movwf	fsr2h,c
  1473  00080A  516E               	movf	??_modbus_poll& (0+255),w,b
  1474  00080C  26D9               	addwf	fsr2l,f,c
  1475  00080E  516F               	movf	(??_modbus_poll+1)& (0+255),w,b
  1476  000810  22DA               	addwfc	fsr2h,f,c
  1477  000812  C015  FFDE         	movff	_reg_wr_data,postinc2	;volatile
  1478  000816  C016  FFDD         	movff	_reg_wr_data+1,postdec2	;volatile
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;Turn_counter.c: 517: modbus_refresh(0x06);
  1482  00081A  0E06               	movlw	6
  1483  00081C  ECDA  F002         	call	_modbus_refresh
  1484                           
  1485                           ;Turn_counter.c: 518: modbus_wsr_answer();
  1486  000820  EC79  F002         	call	_modbus_wsr_answer	;wreg free
  1487                           
  1488                           ;Turn_counter.c: 519: answer = 0;
  1489  000824  6A1F               	clrf	_answer,c	;volatile
  1490  000826  0012               	return	
  1491  000828                     __end_of_modbus_poll:
  1492                           	opt stack 0
  1493                           tblptru	equ	0xFF8
  1494                           tblptrh	equ	0xFF7
  1495                           tblptrl	equ	0xFF6
  1496                           tablat	equ	0xFF5
  1497                           prodl	equ	0xFF3
  1498                           intcon	equ	0xFF2
  1499                           intcon2	equ	0xFF1
  1500                           intcon3	equ	0xFF0
  1501                           postinc0	equ	0xFEE
  1502                           wreg	equ	0xFE8
  1503                           indf1	equ	0xFE7
  1504                           postinc1	equ	0xFE6
  1505                           postdec1	equ	0xFE5
  1506                           fsr1h	equ	0xFE2
  1507                           fsr1l	equ	0xFE1
  1508                           indf2	equ	0xFDF
  1509                           postinc2	equ	0xFDE
  1510                           postdec2	equ	0xFDD
  1511                           fsr2h	equ	0xFDA
  1512                           fsr2l	equ	0xFD9
  1513                           status	equ	0xFD8
  1514                           
  1515 ;; *************** function _modbus_wsr_answer *****************
  1516 ;; Defined at:
  1517 ;;		line 293 in file "Turn_counter.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;		None
  1522 ;; Return value:  Size  Location     Type
  1523 ;;		None               void
  1524 ;; Registers used:
  1525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1532 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1533 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1534 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1535 ;;Total ram usage:        3 bytes
  1536 ;; Hardware stack levels used:    1
  1537 ;; Hardware stack levels required when called:    4
  1538 ;; This function calls:
  1539 ;;		_modbus_CRC16
  1540 ;;		_uart_send_hex
  1541 ;; This function is called by:
  1542 ;;		_modbus_poll
  1543 ;; This function uses a non-reentrant model
  1544 ;;
  1545                           
  1546                           	psect	text4
  1547  0004F2                     __ptext4:
  1548                           	opt stack 0
  1549  0004F2                     _modbus_wsr_answer:
  1550                           	opt stack 25
  1551                           
  1552                           ;Turn_counter.c: 295: crc_buf[0] = dev_id;
  1553                           
  1554                           ;incstack = 0
  1555  0004F2  C047  F200         	movff	_dev_id,_crc_buf	;volatile
  1556                           
  1557                           ;Turn_counter.c: 296: crc_buf[1] = 0x06;
  1558  0004F6  0E06               	movlw	6
  1559  0004F8  0102               	movlb	2	; () banked
  1560  0004FA  6F01               	movwf	(_crc_buf+1)& (0+255),b	;volatile
  1561                           
  1562                           ;Turn_counter.c: 297: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  1563  0004FC  C014  F067         	movff	_modbus_reg_addr+1,??_modbus_wsr_answer	;volatile
  1564  000500  C067  F068         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1565  000504  0100               	movlb	0	; () banked
  1566  000506  6B69               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1567  000508  5168               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1568  00050A  0102               	movlb	2	; () banked
  1569  00050C  6F02               	movwf	(_crc_buf+2)& (0+255),b	;volatile
  1570                           
  1571                           ; BSR set to: 2
  1572                           ;Turn_counter.c: 298: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  1573  00050E  C013  F203         	movff	_modbus_reg_addr,_crc_buf+3	;volatile
  1574                           
  1575                           ;Turn_counter.c: 299: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  1576  000512  C016  F067         	movff	_reg_wr_data+1,??_modbus_wsr_answer	;volatile
  1577  000516  C067  F068         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1578  00051A  0100               	movlb	0	; () banked
  1579  00051C  6B69               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1580  00051E  5168               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1581  000520  0102               	movlb	2	; () banked
  1582  000522  6F04               	movwf	(_crc_buf+4)& (0+255),b	;volatile
  1583                           
  1584                           ; BSR set to: 2
  1585                           ;Turn_counter.c: 300: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  1586  000524  C015  F205         	movff	_reg_wr_data,_crc_buf+5	;volatile
  1587                           
  1588                           ; BSR set to: 2
  1589                           ;Turn_counter.c: 301: CRC16 = modbus_CRC16(crc_buf, 6);
  1590  000528  ECF4  F000         	call	PL8	;call to abstracted procedure
  1591  00052C  EC6D  F003         	call	_modbus_CRC16	;wreg free
  1592  000530  C03C  F00B         	movff	?_modbus_CRC16,_CRC16	;volatile
  1593  000534  C03D  F00C         	movff	?_modbus_CRC16+1,_CRC16+1	;volatile
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;Turn_counter.c: 304: LATCbits.LATC3=1;
  1597  000538  868B               	bsf	3979,3,c	;volatile
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;Turn_counter.c: 306: _delay((unsigned long)((300)*(40000000/4000000.0)));
  1601  00053A  0E04               	movlw	4
  1602  00053C  6F67               	movwf	??_modbus_wsr_answer& (0+255),b
  1603  00053E  0EE4               	movlw	228
  1604  000540                     u1307:
  1605  000540  2EE8               	decfsz	wreg,f,c
  1606  000542  D7FE               	goto	u1307
  1607  000544  2F67               	decfsz	??_modbus_wsr_answer& (0+255),f,b
  1608  000546  D7FC               	goto	u1307
  1609  000548  D000               	nop2	
  1610                           
  1611                           ;Turn_counter.c: 307: uart_send_hex((unsigned char)dev_id);
  1612  00054A  5047               	movf	_dev_id,w,c
  1613  00054C  ECC0  F004         	call	_uart_send_hex
  1614                           
  1615                           ;Turn_counter.c: 308: uart_send_hex(0x06);
  1616  000550  0E06               	movlw	6
  1617  000552  ECC0  F004         	call	_uart_send_hex
  1618                           
  1619                           ;Turn_counter.c: 309: uart_send_hex((unsigned char)(modbus_reg_addr >> 8));
  1620  000556  C014  F067         	movff	_modbus_reg_addr+1,??_modbus_wsr_answer	;volatile
  1621  00055A  C067  F068         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1622  00055E  0100               	movlb	0	; () banked
  1623  000560  6B69               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1624  000562  5168               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1625  000564  ECC0  F004         	call	_uart_send_hex
  1626                           
  1627                           ;Turn_counter.c: 310: uart_send_hex((unsigned char)(modbus_reg_addr & 0x00ff));
  1628  000568  5013               	movf	_modbus_reg_addr,w,c	;volatile
  1629  00056A  ECC0  F004         	call	_uart_send_hex
  1630                           
  1631                           ;Turn_counter.c: 311: uart_send_hex((unsigned char)(reg_wr_data >> 8));
  1632  00056E  C016  F067         	movff	_reg_wr_data+1,??_modbus_wsr_answer	;volatile
  1633  000572  C067  F068         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1634  000576  0100               	movlb	0	; () banked
  1635  000578  6B69               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1636  00057A  5168               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1637  00057C  ECC0  F004         	call	_uart_send_hex
  1638                           
  1639                           ;Turn_counter.c: 312: uart_send_hex((unsigned char)(reg_wr_data & 0x00ff));
  1640  000580  5015               	movf	_reg_wr_data,w,c	;volatile
  1641  000582  ECC0  F004         	call	_uart_send_hex
  1642                           
  1643                           ;Turn_counter.c: 314: uart_send_hex((unsigned char)(CRC16 >> 8));
  1644  000586  C00C  F067         	movff	_CRC16+1,??_modbus_wsr_answer	;volatile
  1645  00058A  C067  F068         	movff	??_modbus_wsr_answer,??_modbus_wsr_answer+1
  1646  00058E  0100               	movlb	0	; () banked
  1647  000590  6B69               	clrf	(??_modbus_wsr_answer+2)& (0+255),b
  1648  000592  5168               	movf	(??_modbus_wsr_answer+1)& (0+255),w,b
  1649  000594  ECC0  F004         	call	_uart_send_hex
  1650                           
  1651                           ;Turn_counter.c: 315: uart_send_hex((unsigned char)(CRC16 & 0x00ff));
  1652  000598  500B               	movf	_CRC16,w,c	;volatile
  1653  00059A  ECC0  F004         	call	_uart_send_hex
  1654                           
  1655                           ;Turn_counter.c: 316: _delay((unsigned long)((300)*(40000000/4000000.0)));
  1656  00059E  0E04               	movlw	4
  1657  0005A0  0100               	movlb	0	; () banked
  1658  0005A2  6F67               	movwf	??_modbus_wsr_answer& (0+255),b
  1659  0005A4  0EE4               	movlw	228
  1660  0005A6                     u1317:
  1661  0005A6  2EE8               	decfsz	wreg,f,c
  1662  0005A8  D7FE               	goto	u1317
  1663  0005AA  2F67               	decfsz	??_modbus_wsr_answer& (0+255),f,b
  1664  0005AC  D7FC               	goto	u1317
  1665  0005AE  D000               	nop2	
  1666                           
  1667                           ;Turn_counter.c: 317: LATCbits.LATC3=0;
  1668  0005B0  968B               	bcf	3979,3,c	;volatile
  1669  0005B2  0012               	return	
  1670  0005B4                     __end_of_modbus_wsr_answer:
  1671                           	opt stack 0
  1672                           tblptru	equ	0xFF8
  1673                           tblptrh	equ	0xFF7
  1674                           tblptrl	equ	0xFF6
  1675                           tablat	equ	0xFF5
  1676                           prodl	equ	0xFF3
  1677                           intcon	equ	0xFF2
  1678                           intcon2	equ	0xFF1
  1679                           intcon3	equ	0xFF0
  1680                           postinc0	equ	0xFEE
  1681                           wreg	equ	0xFE8
  1682                           indf1	equ	0xFE7
  1683                           postinc1	equ	0xFE6
  1684                           postdec1	equ	0xFE5
  1685                           fsr1h	equ	0xFE2
  1686                           fsr1l	equ	0xFE1
  1687                           indf2	equ	0xFDF
  1688                           postinc2	equ	0xFDE
  1689                           postdec2	equ	0xFDD
  1690                           fsr2h	equ	0xFDA
  1691                           fsr2l	equ	0xFD9
  1692                           status	equ	0xFD8
  1693                           
  1694 ;; *************** function _modbus_rhr_answer *****************
  1695 ;; Defined at:
  1696 ;;		line 321 in file "Turn_counter.c"
  1697 ;; Parameters:    Size  Location     Type
  1698 ;;		None
  1699 ;; Auto vars:     Size  Location     Type
  1700 ;;  j               1   12[BANK0 ] unsigned char 
  1701 ;;  i               1   11[BANK0 ] unsigned char 
  1702 ;;  cnt             1   13[BANK0 ] unsigned char 
  1703 ;; Return value:  Size  Location     Type
  1704 ;;		None               void
  1705 ;; Registers used:
  1706 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1713 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1714 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1715 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1716 ;;Total ram usage:        7 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    4
  1719 ;; This function calls:
  1720 ;;		_modbus_CRC16
  1721 ;;		_uart_send_hex
  1722 ;; This function is called by:
  1723 ;;		_modbus_poll
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text5
  1728  000390                     __ptext5:
  1729                           	opt stack 0
  1730  000390                     _modbus_rhr_answer:
  1731                           	opt stack 25
  1732                           
  1733                           ;Turn_counter.c: 323: addr_buf_2 = addr_buf_1;
  1734                           
  1735                           ;incstack = 0
  1736  000390  C00F  F011         	movff	_addr_buf_1,_addr_buf_2	;volatile
  1737  000394  C010  F012         	movff	_addr_buf_1+1,_addr_buf_2+1	;volatile
  1738                           
  1739                           ;Turn_counter.c: 325: crc_buf[0] = dev_id;
  1740  000398  C047  F200         	movff	_dev_id,_crc_buf	;volatile
  1741                           
  1742                           ;Turn_counter.c: 326: crc_buf[1] = 0x03;
  1743  00039C  0E03               	movlw	3
  1744  00039E  0102               	movlb	2	; () banked
  1745  0003A0  6F01               	movwf	(_crc_buf+1)& (0+255),b	;volatile
  1746                           
  1747                           ; BSR set to: 2
  1748                           ;Turn_counter.c: 327: crc_buf[2] = regs2read*2;
  1749  0003A2  5017               	movf	_regs2read,w,c	;volatile
  1750  0003A4  2417               	addwf	_regs2read,w,c	;volatile
  1751  0003A6  6F02               	movwf	(_crc_buf+2)& (0+255),b	;volatile
  1752                           
  1753                           ; BSR set to: 2
  1754                           ;Turn_counter.c: 329: unsigned char cnt = 3;
  1755  0003A8  0E03               	movlw	3
  1756  0003AA  0100               	movlb	0	; () banked
  1757  0003AC  6F6D               	movwf	modbus_rhr_answer@cnt& (0+255),b
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;Turn_counter.c: 331: for(unsigned char i = 0; i < regs2read; i++)
  1761  0003AE  6B6B               	clrf	modbus_rhr_answer@i& (0+255),b
  1762  0003B0  D02D               	goto	l2114
  1763  0003B2                     l2108:
  1764                           
  1765                           ; BSR set to: 0
  1766                           ;Turn_counter.c: 332: {
  1767                           ;Turn_counter.c: 333: crc_buf[cnt++] = (unsigned char)(holding_register[addr_buf_1] >> 8
      +                          );
  1768  0003B2  0E00               	movlw	low _crc_buf	;volatile
  1769  0003B4  0100               	movlb	0	; () banked
  1770  0003B6  256D               	addwf	modbus_rhr_answer@cnt& (0+255),w,b
  1771  0003B8  6ED9               	movwf	fsr2l,c
  1772  0003BA  6ADA               	clrf	fsr2h,c
  1773  0003BC  0E02               	movlw	high _crc_buf	;volatile
  1774  0003BE  22DA               	addwfc	fsr2h,f,c
  1775  0003C0  D88A               	call	PL12	;call to abstracted procedure
  1776  0003C2  6EE1               	movwf	fsr1l,c
  1777  0003C4  3410               	rlcf	_addr_buf_1+1,w,c	;volatile
  1778  0003C6  6EE2               	movwf	fsr1h,c
  1779  0003C8  5167               	movf	??_modbus_rhr_answer& (0+255),w,b
  1780  0003CA  26E1               	addwf	fsr1l,f,c
  1781  0003CC  5168               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1782  0003CE  22E2               	addwfc	fsr1h,f,c
  1783  0003D0  CFE6 F069          	movff	postinc1,??_modbus_rhr_answer+2
  1784  0003D4  CFE5 F06A          	movff	postdec1,??_modbus_rhr_answer+3
  1785  0003D8  C06A  F069         	movff	??_modbus_rhr_answer+3,??_modbus_rhr_answer+2
  1786  0003DC  6B6A               	clrf	(??_modbus_rhr_answer+3)& (0+255),b
  1787  0003DE  5169               	movf	(??_modbus_rhr_answer+2)& (0+255),w,b
  1788  0003E0  6EDF               	movwf	indf2,c
  1789                           
  1790                           ; BSR set to: 0
  1791  0003E2  2B6D               	incf	modbus_rhr_answer@cnt& (0+255),f,b
  1792                           
  1793                           ; BSR set to: 0
  1794                           ;Turn_counter.c: 334: crc_buf[cnt++] = (unsigned char)(holding_register[addr_buf_1] & 0x
      +                          00ff);
  1795  0003E4  D878               	call	PL12	;call to abstracted procedure
  1796  0003E6  6ED9               	movwf	fsr2l,c
  1797  0003E8  3410               	rlcf	_addr_buf_1+1,w,c	;volatile
  1798  0003EA  6EDA               	movwf	fsr2h,c
  1799  0003EC  5167               	movf	??_modbus_rhr_answer& (0+255),w,b
  1800  0003EE  26D9               	addwf	fsr2l,f,c
  1801  0003F0  5168               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1802  0003F2  22DA               	addwfc	fsr2h,f,c
  1803  0003F4  0E00               	movlw	low _crc_buf	;volatile
  1804  0003F6  256D               	addwf	modbus_rhr_answer@cnt& (0+255),w,b
  1805  0003F8  6EE1               	movwf	fsr1l,c
  1806  0003FA  6AE2               	clrf	fsr1h,c
  1807  0003FC  0E02               	movlw	high _crc_buf	;volatile
  1808  0003FE  22E2               	addwfc	fsr1h,f,c
  1809  000400  CFDF FFE7          	movff	indf2,indf1
  1810  000404  2B6D               	incf	modbus_rhr_answer@cnt& (0+255),f,b
  1811                           
  1812                           ;Turn_counter.c: 335: ++addr_buf_1;
  1813  000406  4A0F               	infsnz	_addr_buf_1,f,c	;volatile
  1814  000408  2A10               	incf	_addr_buf_1+1,f,c	;volatile
  1815  00040A  2B6B               	incf	modbus_rhr_answer@i& (0+255),f,b
  1816  00040C                     l2114:
  1817                           
  1818                           ; BSR set to: 0
  1819  00040C  516B               	movf	modbus_rhr_answer@i& (0+255),w,b
  1820  00040E  D86A               	call	PL16	;call to abstracted procedure
  1821  000410  E3D0               	bnc	l2108
  1822                           
  1823                           ; BSR set to: 0
  1824                           ;Turn_counter.c: 336: }
  1825                           ;Turn_counter.c: 338: CRC16 = modbus_CRC16(crc_buf,(regs2read*2)+3);
  1826  000412  0102               	movlb	2	; () banked
  1827  000414  0E02               	movlw	high _crc_buf	;volatile
  1828  000416  6E3D               	movwf	modbus_CRC16@buf+1,c
  1829  000418  0E00               	movlw	low _crc_buf	;volatile
  1830  00041A  6E3C               	movwf	modbus_CRC16@buf,c
  1831  00041C  5017               	movf	_regs2read,w,c	;volatile
  1832  00041E  0D02               	mullw	2
  1833  000420  50F3               	movf	prodl,w,c
  1834  000422  0F03               	addlw	3
  1835  000424  6E3E               	movwf	modbus_CRC16@len,c
  1836  000426  EC6D  F003         	call	_modbus_CRC16	;wreg free
  1837  00042A  C03C  F00B         	movff	?_modbus_CRC16,_CRC16	;volatile
  1838  00042E  C03D  F00C         	movff	?_modbus_CRC16+1,_CRC16+1	;volatile
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;Turn_counter.c: 341: LATCbits.LATC3=1;
  1842  000432  868B               	bsf	3979,3,c	;volatile
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;Turn_counter.c: 342: _delay((unsigned long)((300)*(40000000/4000000.0)));
  1846  000434  0E04               	movlw	4
  1847  000436  6F67               	movwf	??_modbus_rhr_answer& (0+255),b
  1848  000438  0EE4               	movlw	228
  1849  00043A                     u1327:
  1850  00043A  2EE8               	decfsz	wreg,f,c
  1851  00043C  D7FE               	goto	u1327
  1852  00043E  2F67               	decfsz	??_modbus_rhr_answer& (0+255),f,b
  1853  000440  D7FC               	goto	u1327
  1854  000442  D000               	nop2	
  1855                           
  1856                           ;Turn_counter.c: 343: uart_send_hex((unsigned char)dev_id);
  1857  000444  5047               	movf	_dev_id,w,c
  1858  000446  ECC0  F004         	call	_uart_send_hex
  1859                           
  1860                           ;Turn_counter.c: 344: uart_send_hex(0x03);
  1861  00044A  0E03               	movlw	3
  1862  00044C  ECC0  F004         	call	_uart_send_hex
  1863                           
  1864                           ;Turn_counter.c: 345: uart_send_hex(regs2read*2);
  1865  000450  5017               	movf	_regs2read,w,c	;volatile
  1866  000452  2417               	addwf	_regs2read,w,c	;volatile
  1867  000454  ECC0  F004         	call	_uart_send_hex
  1868                           
  1869                           ;Turn_counter.c: 346: for(unsigned char j = 0; j < regs2read; j++)
  1870  000458  0100               	movlb	0	; () banked
  1871  00045A  6B6C               	clrf	modbus_rhr_answer@j& (0+255),b
  1872  00045C  D016               	goto	l2136
  1873  00045E                     l2130:
  1874                           
  1875                           ; BSR set to: 0
  1876                           ;Turn_counter.c: 347: {
  1877                           ;Turn_counter.c: 348: uart_send_hex((unsigned char)(holding_register[addr_buf_2] >> 8));
  1878  00045E  0E00               	movlw	low _holding_register	;volatile
  1879  000460  D82D               	call	PL4	;call to abstracted procedure
  1880  000462  CFDE F069          	movff	postinc2,??_modbus_rhr_answer+2
  1881  000466  CFDD F06A          	movff	postdec2,??_modbus_rhr_answer+3
  1882  00046A  C06A  F069         	movff	??_modbus_rhr_answer+3,??_modbus_rhr_answer+2
  1883  00046E  6B6A               	clrf	(??_modbus_rhr_answer+3)& (0+255),b
  1884  000470  5169               	movf	(??_modbus_rhr_answer+2)& (0+255),w,b
  1885  000472  ECC0  F004         	call	_uart_send_hex
  1886                           
  1887                           ;Turn_counter.c: 349: uart_send_hex((unsigned char)(holding_register[addr_buf_2] & 0x00f
      +                          f));
  1888  000476  0E00               	movlw	low _holding_register	;volatile
  1889  000478  0100               	movlb	0	; () banked
  1890  00047A  D820               	call	PL4	;call to abstracted procedure
  1891  00047C  50DF               	movf	indf2,w,c
  1892  00047E  ECC0  F004         	call	_uart_send_hex
  1893                           
  1894                           ;Turn_counter.c: 350: ++addr_buf_2;
  1895  000482  4A11               	infsnz	_addr_buf_2,f,c	;volatile
  1896  000484  2A12               	incf	_addr_buf_2+1,f,c	;volatile
  1897  000486  0100               	movlb	0	; () banked
  1898  000488  2B6C               	incf	modbus_rhr_answer@j& (0+255),f,b
  1899  00048A                     l2136:
  1900                           
  1901                           ; BSR set to: 0
  1902  00048A  516C               	movf	modbus_rhr_answer@j& (0+255),w,b
  1903  00048C  D82B               	call	PL16	;call to abstracted procedure
  1904  00048E  E3E7               	bnc	l2130
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;Turn_counter.c: 351: }
  1908                           ;Turn_counter.c: 353: uart_send_hex((unsigned char)(CRC16 >> 8));
  1909  000490  C00C  F067         	movff	_CRC16+1,??_modbus_rhr_answer	;volatile
  1910  000494  C067  F068         	movff	??_modbus_rhr_answer,??_modbus_rhr_answer+1
  1911  000498  6B69               	clrf	(??_modbus_rhr_answer+2)& (0+255),b
  1912  00049A  5168               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1913  00049C  ECC0  F004         	call	_uart_send_hex
  1914                           
  1915                           ;Turn_counter.c: 354: uart_send_hex((unsigned char)(CRC16 & 0x00ff));
  1916  0004A0  500B               	movf	_CRC16,w,c	;volatile
  1917  0004A2  ECC0  F004         	call	_uart_send_hex
  1918                           
  1919                           ;Turn_counter.c: 355: _delay((unsigned long)((300)*(40000000/4000000.0)));
  1920  0004A6  0E04               	movlw	4
  1921  0004A8  0100               	movlb	0	; () banked
  1922  0004AA  6F67               	movwf	??_modbus_rhr_answer& (0+255),b
  1923  0004AC  0EE4               	movlw	228
  1924  0004AE                     u1337:
  1925  0004AE  2EE8               	decfsz	wreg,f,c
  1926  0004B0  D7FE               	goto	u1337
  1927  0004B2  2F67               	decfsz	??_modbus_rhr_answer& (0+255),f,b
  1928  0004B4  D7FC               	goto	u1337
  1929  0004B6  D000               	nop2	
  1930                           
  1931                           ;Turn_counter.c: 356: LATCbits.LATC3=0;
  1932  0004B8  968B               	bcf	3979,3,c	;volatile
  1933  0004BA  0012               	return	
  1934  0004BC                     __end_of_modbus_rhr_answer:
  1935                           	opt stack 0
  1936  0004BC                     PL4:
  1937                           	opt stack 25
  1938  0004BC  6F67               	movwf	??_modbus_rhr_answer& (0+255),b
  1939  0004BE  0E01               	movlw	high _holding_register	;volatile
  1940  0004C0  6F68               	movwf	(??_modbus_rhr_answer+1)& (0+255),b
  1941  0004C2  90D8               	bcf	status,0,c
  1942  0004C4  3411               	rlcf	_addr_buf_2,w,c	;volatile
  1943  0004C6  6ED9               	movwf	fsr2l,c
  1944  0004C8  3412               	rlcf	_addr_buf_2+1,w,c	;volatile
  1945  0004CA  6EDA               	movwf	fsr2h,c
  1946  0004CC  5167               	movf	??_modbus_rhr_answer& (0+255),w,b
  1947  0004CE  26D9               	addwf	fsr2l,f,c
  1948  0004D0  5168               	movf	(??_modbus_rhr_answer+1)& (0+255),w,b
  1949  0004D2  22DA               	addwfc	fsr2h,f,c
  1950  0004D4  0012               	return	
  1951  0004D6                     __end_ofPL4:
  1952                           	opt stack 0
  1953  0004D6                     PL12:
  1954                           	opt stack 25
  1955  0004D6  0E00               	movlw	low _holding_register	;volatile
  1956  0004D8  6F67               	movwf	??_modbus_rhr_answer& (0+255),b
  1957  0004DA  0E01               	movlw	high _holding_register	;volatile
  1958  0004DC  6F68               	movwf	(??_modbus_rhr_answer+1)& (0+255),b
  1959  0004DE  90D8               	bcf	status,0,c
  1960  0004E0  340F               	rlcf	_addr_buf_1,w,c	;volatile
  1961  0004E2  0012               	return	
  1962  0004E4                     __end_ofPL12:
  1963                           	opt stack 0
  1964  0004E4                     PL16:
  1965                           	opt stack 25
  1966  0004E4  6F67               	movwf	??_modbus_rhr_answer& (0+255),b
  1967  0004E6  6B68               	clrf	(??_modbus_rhr_answer+1)& (0+255),b
  1968  0004E8  5017               	movf	_regs2read,w,c	;volatile
  1969  0004EA  5D67               	subwf	??_modbus_rhr_answer& (0+255),w,b
  1970  0004EC  5018               	movf	_regs2read+1,w,c	;volatile
  1971  0004EE  5968               	subwfb	(??_modbus_rhr_answer+1)& (0+255),w,b
  1972  0004F0  0012               	return	
  1973  0004F2                     __end_ofPL16:
  1974                           	opt stack 0
  1975                           tblptru	equ	0xFF8
  1976                           tblptrh	equ	0xFF7
  1977                           tblptrl	equ	0xFF6
  1978                           tablat	equ	0xFF5
  1979                           prodl	equ	0xFF3
  1980                           intcon	equ	0xFF2
  1981                           intcon2	equ	0xFF1
  1982                           intcon3	equ	0xFF0
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           indf1	equ	0xFE7
  1986                           postinc1	equ	0xFE6
  1987                           postdec1	equ	0xFE5
  1988                           fsr1h	equ	0xFE2
  1989                           fsr1l	equ	0xFE1
  1990                           indf2	equ	0xFDF
  1991                           postinc2	equ	0xFDE
  1992                           postdec2	equ	0xFDD
  1993                           fsr2h	equ	0xFDA
  1994                           fsr2l	equ	0xFD9
  1995                           status	equ	0xFD8
  1996                           
  1997 ;; *************** function _uart_send_hex *****************
  1998 ;; Defined at:
  1999 ;;		line 164 in file "Turn_counter.c"
  2000 ;; Parameters:    Size  Location     Type
  2001 ;;  temp            1    wreg     unsigned char 
  2002 ;; Auto vars:     Size  Location     Type
  2003 ;;  temp            1   20[COMRAM] unsigned char 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;		None               void
  2006 ;; Registers used:
  2007 ;;		wreg, status,2, status,0
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2014 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2016 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2017 ;;Total ram usage:        1 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:    3
  2020 ;; This function calls:
  2021 ;;		Nothing
  2022 ;; This function is called by:
  2023 ;;		_modbus_wsr_answer
  2024 ;;		_modbus_rhr_answer
  2025 ;; This function uses a non-reentrant model
  2026 ;;
  2027                           
  2028                           	psect	text6
  2029  000980                     __ptext6:
  2030                           	opt stack 0
  2031  000980                     _uart_send_hex:
  2032                           	opt stack 25
  2033                           
  2034                           ;incstack = 0
  2035                           ;uart_send_hex@temp stored from wreg
  2036  000980  6E3C               	movwf	uart_send_hex@temp,c
  2037  000982                     l182:
  2038  000982  A2AC               	btfss	4012,1,c	;volatile
  2039  000984  D7FE               	goto	l182
  2040                           
  2041                           ;Turn_counter.c: 169: TXREG1bits.TXREG1 = temp;
  2042  000986  50AD               	movf	4013,w,c	;volatile
  2043  000988  183C               	xorwf	uart_send_hex@temp,w,c
  2044  00098A  0B00               	andlw	-256
  2045  00098C  183C               	xorwf	uart_send_hex@temp,w,c
  2046  00098E  6EAD               	movwf	4013,c	;volatile
  2047                           
  2048                           ;Turn_counter.c: 170: _delay((unsigned long)((100)*(40000000/4000000.0)));
  2049  000990  0EFA               	movlw	250
  2050  000992                     u1347:
  2051  000992  F000               	nop	
  2052  000994  2EE8               	decfsz	wreg,f,c
  2053  000996  D7FD               	goto	u1347
  2054  000998  0012               	return	
  2055  00099A                     __end_of_uart_send_hex:
  2056                           	opt stack 0
  2057                           tblptru	equ	0xFF8
  2058                           tblptrh	equ	0xFF7
  2059                           tblptrl	equ	0xFF6
  2060                           tablat	equ	0xFF5
  2061                           prodl	equ	0xFF3
  2062                           intcon	equ	0xFF2
  2063                           intcon2	equ	0xFF1
  2064                           intcon3	equ	0xFF0
  2065                           postinc0	equ	0xFEE
  2066                           wreg	equ	0xFE8
  2067                           indf1	equ	0xFE7
  2068                           postinc1	equ	0xFE6
  2069                           postdec1	equ	0xFE5
  2070                           fsr1h	equ	0xFE2
  2071                           fsr1l	equ	0xFE1
  2072                           indf2	equ	0xFDF
  2073                           postinc2	equ	0xFDE
  2074                           postdec2	equ	0xFDD
  2075                           fsr2h	equ	0xFDA
  2076                           fsr2l	equ	0xFD9
  2077                           status	equ	0xFD8
  2078                           
  2079 ;; *************** function _modbus_CRC16 *****************
  2080 ;; Defined at:
  2081 ;;		line 267 in file "Turn_counter.c"
  2082 ;; Parameters:    Size  Location     Type
  2083 ;;  buf             2   20[COMRAM] PTR unsigned char 
  2084 ;;		 -> crc_buf(250), 
  2085 ;;  len             1   22[COMRAM] unsigned char 
  2086 ;; Auto vars:     Size  Location     Type
  2087 ;;  i               1   24[COMRAM] unsigned char 
  2088 ;;  pos             1   23[COMRAM] unsigned char 
  2089 ;;  crc             2   25[COMRAM] unsigned int 
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  2   20[COMRAM] unsigned int 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2094 ;; Tracked objects:
  2095 ;;		On entry : F/2
  2096 ;;		On exit  : F/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2099 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2100 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2101 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2102 ;;      Totals:         7       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2103 ;;Total ram usage:       14 bytes
  2104 ;; Hardware stack levels used:    1
  2105 ;; Hardware stack levels required when called:    3
  2106 ;; This function calls:
  2107 ;;		Nothing
  2108 ;; This function is called by:
  2109 ;;		_modbus_wsr_answer
  2110 ;;		_modbus_rhr_answer
  2111 ;;		_modbus_rx_sm
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text7
  2116  0006DA                     __ptext7:
  2117                           	opt stack 0
  2118  0006DA                     _modbus_CRC16:
  2119                           	opt stack 26
  2120                           
  2121                           ; BSR set to: 2
  2122                           ;Turn_counter.c: 268: unsigned int crc = 0xFFFF;
  2123                           
  2124                           ;incstack = 0
  2125  0006DA  6841               	setf	modbus_CRC16@crc,c
  2126  0006DC  6842               	setf	modbus_CRC16@crc+1,c
  2127                           
  2128                           ;Turn_counter.c: 270: for (unsigned char pos = 0; pos < len; pos++)
  2129  0006DE  6A3F               	clrf	modbus_CRC16@pos,c
  2130  0006E0  D01B               	goto	l2024
  2131  0006E2                     l2006:
  2132                           
  2133                           ; BSR set to: 2
  2134                           ;Turn_counter.c: 271: {
  2135                           ;Turn_counter.c: 272: crc ^= (unsigned int)buf[pos];
  2136  0006E2  503F               	movf	modbus_CRC16@pos,w,c
  2137  0006E4  243C               	addwf	modbus_CRC16@buf,w,c
  2138  0006E6  6ED9               	movwf	fsr2l,c
  2139  0006E8  0E00               	movlw	0
  2140  0006EA  203D               	addwfc	modbus_CRC16@buf+1,w,c
  2141  0006EC  6EDA               	movwf	fsr2h,c
  2142  0006EE  50DF               	movf	indf2,w,c
  2143  0006F0  1A41               	xorwf	modbus_CRC16@crc,f,c
  2144                           
  2145                           ; BSR set to: 2
  2146                           ;Turn_counter.c: 273: for (unsigned char i = 8; i != 0; i--)
  2147  0006F2  0E08               	movlw	8
  2148  0006F4  6E40               	movwf	modbus_CRC16@i,c
  2149  0006F6                     l216:
  2150                           
  2151                           ; BSR set to: 2
  2152                           ;Turn_counter.c: 274: {
  2153                           ;Turn_counter.c: 275: if ((crc & 0x0001) != 0)
  2154  0006F6  A041               	btfss	modbus_CRC16@crc,0,c
  2155  0006F8  D008               	goto	l2018
  2156                           
  2157                           ; BSR set to: 2
  2158                           ;Turn_counter.c: 276: {
  2159                           ;Turn_counter.c: 277: crc >>= 1;
  2160  0006FA  90D8               	bcf	status,0,c
  2161  0006FC  3242               	rrcf	modbus_CRC16@crc+1,f,c
  2162  0006FE  3241               	rrcf	modbus_CRC16@crc,f,c
  2163                           
  2164                           ; BSR set to: 2
  2165                           ;Turn_counter.c: 278: crc ^= 0xA001;
  2166  000700  0E01               	movlw	1
  2167  000702  1A41               	xorwf	modbus_CRC16@crc,f,c
  2168  000704  0EA0               	movlw	160
  2169  000706  1A42               	xorwf	modbus_CRC16@crc+1,f,c
  2170                           
  2171                           ;Turn_counter.c: 279: }
  2172  000708  D003               	goto	l219
  2173  00070A                     l2018:
  2174                           
  2175                           ; BSR set to: 2
  2176                           ;Turn_counter.c: 280: else
  2177                           ;Turn_counter.c: 281: crc >>= 1;
  2178  00070A  90D8               	bcf	status,0,c
  2179  00070C  3242               	rrcf	modbus_CRC16@crc+1,f,c
  2180  00070E  3241               	rrcf	modbus_CRC16@crc,f,c
  2181  000710                     l219:
  2182                           
  2183                           ; BSR set to: 2
  2184  000710  0640               	decf	modbus_CRC16@i,f,c
  2185                           
  2186                           ; BSR set to: 2
  2187  000712  6640               	tstfsz	modbus_CRC16@i,c
  2188  000714  D7F0               	goto	l216
  2189                           
  2190                           ; BSR set to: 2
  2191  000716  2A3F               	incf	modbus_CRC16@pos,f,c
  2192  000718                     l2024:
  2193                           
  2194                           ; BSR set to: 2
  2195  000718  503E               	movf	modbus_CRC16@len,w,c
  2196  00071A  5C3F               	subwf	modbus_CRC16@pos,w,c
  2197  00071C  E3E2               	bnc	l2006
  2198                           
  2199                           ; BSR set to: 2
  2200                           ;Turn_counter.c: 282: }
  2201                           ;Turn_counter.c: 283: }
  2202                           ;Turn_counter.c: 288: crc = ((crc<<8)&0xff00)|((crc>>8)&0x00ff);
  2203  00071E  0100               	movlb	0	; () banked
  2204  000720  6B60               	clrf	??_modbus_CRC16& (0+255),b
  2205  000722  6961               	setf	(??_modbus_CRC16+1)& (0+255),b
  2206  000724  5041               	movf	modbus_CRC16@crc,w,c
  2207  000726  6F63               	movwf	(??_modbus_CRC16+3)& (0+255),b
  2208  000728  6B62               	clrf	(??_modbus_CRC16+2)& (0+255),b
  2209  00072A  5160               	movf	??_modbus_CRC16& (0+255),w,b
  2210  00072C  1762               	andwf	(??_modbus_CRC16+2)& (0+255),f,b
  2211  00072E  5161               	movf	(??_modbus_CRC16+1)& (0+255),w,b
  2212  000730  1763               	andwf	(??_modbus_CRC16+3)& (0+255),f,b
  2213  000732  C042  F064         	movff	modbus_CRC16@crc+1,??_modbus_CRC16+4
  2214  000736  C064  F065         	movff	??_modbus_CRC16+4,??_modbus_CRC16+5
  2215  00073A  6B66               	clrf	(??_modbus_CRC16+6)& (0+255),b
  2216  00073C  5165               	movf	(??_modbus_CRC16+5)& (0+255),w,b
  2217  00073E  1162               	iorwf	(??_modbus_CRC16+2)& (0+255),w,b
  2218  000740  6E41               	movwf	modbus_CRC16@crc,c
  2219  000742  5163               	movf	(??_modbus_CRC16+3)& (0+255),w,b
  2220  000744  6E42               	movwf	modbus_CRC16@crc+1,c
  2221                           
  2222                           ; BSR set to: 0
  2223                           ;Turn_counter.c: 290: return crc;
  2224  000746  C041  F03C         	movff	modbus_CRC16@crc,?_modbus_CRC16
  2225  00074A  C042  F03D         	movff	modbus_CRC16@crc+1,?_modbus_CRC16+1
  2226                           
  2227                           ; BSR set to: 0
  2228  00074E  0012               	return	
  2229  000750                     __end_of_modbus_CRC16:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           prodl	equ	0xFF3
  2236                           intcon	equ	0xFF2
  2237                           intcon2	equ	0xFF1
  2238                           intcon3	equ	0xFF0
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           indf1	equ	0xFE7
  2242                           postinc1	equ	0xFE6
  2243                           postdec1	equ	0xFE5
  2244                           fsr1h	equ	0xFE2
  2245                           fsr1l	equ	0xFE1
  2246                           indf2	equ	0xFDF
  2247                           postinc2	equ	0xFDE
  2248                           postdec2	equ	0xFDD
  2249                           fsr2h	equ	0xFDA
  2250                           fsr2l	equ	0xFD9
  2251                           status	equ	0xFD8
  2252                           
  2253 ;; *************** function _modbus_refresh *****************
  2254 ;; Defined at:
  2255 ;;		line 187 in file "Turn_counter.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  cmd_type        1    wreg     unsigned char 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  cmd_type        1   22[COMRAM] unsigned char 
  2260 ;; Return value:  Size  Location     Type
  2261 ;;		None               void
  2262 ;; Registers used:
  2263 ;;		wreg, status,2, status,0
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2270 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2271 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2272 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2273 ;;Total ram usage:        3 bytes
  2274 ;; Hardware stack levels used:    1
  2275 ;; Hardware stack levels required when called:    3
  2276 ;; This function calls:
  2277 ;;		Nothing
  2278 ;; This function is called by:
  2279 ;;		_modbus_poll
  2280 ;; This function uses a non-reentrant model
  2281 ;;
  2282                           
  2283                           	psect	text8
  2284  0005B4                     __ptext8:
  2285                           	opt stack 0
  2286  0005B4                     _modbus_refresh:
  2287                           	opt stack 26
  2288                           
  2289                           ; BSR set to: 0
  2290                           ;incstack = 0
  2291                           ;modbus_refresh@cmd_type stored from wreg
  2292  0005B4  6E3E               	movwf	modbus_refresh@cmd_type,c
  2293                           
  2294                           ;Turn_counter.c: 190: if(cmd_type == 0x03)
  2295  0005B6  503E               	movf	modbus_refresh@cmd_type,w,c
  2296  0005B8  0A03               	xorlw	3
  2297  0005BA  E12B               	bnz	l2036
  2298                           
  2299                           ;Turn_counter.c: 191: {
  2300                           ;Turn_counter.c: 192: holding_register[0] = set_zero;
  2301  0005BC  C019  F100         	movff	_set_zero,_holding_register	;volatile
  2302  0005C0  C01A  F101         	movff	_set_zero+1,_holding_register+1	;volatile
  2303                           
  2304                           ;Turn_counter.c: 193: holding_register[1] = offset;
  2305  0005C4  0101               	movlb	1	; () banked
  2306  0005C6  6B02               	clrf	(_holding_register+2)& (0+255),b	;volatile
  2307  0005C8  6B03               	clrf	(_holding_register+3)& (0+255),b	;volatile
  2308                           
  2309                           ;Turn_counter.c: 194: holding_register[2] = num_of_turns;
  2310  0005CA  C084  F104         	movff	_num_of_turns,_holding_register+4	;volatile
  2311  0005CE  C085  F105         	movff	_num_of_turns+1,_holding_register+5	;volatile
  2312                           
  2313                           ;Turn_counter.c: 195: holding_register[3] = grad;
  2314  0005D2  6B06               	clrf	(_holding_register+6)& (0+255),b	;volatile
  2315  0005D4  6B07               	clrf	(_holding_register+7)& (0+255),b	;volatile
  2316                           
  2317                           ;Turn_counter.c: 196: holding_register[4] = turns_percent;
  2318  0005D6  6B08               	clrf	(_holding_register+8)& (0+255),b	;volatile
  2319  0005D8  6B09               	clrf	(_holding_register+9)& (0+255),b	;volatile
  2320                           
  2321                           ;Turn_counter.c: 197: holding_register[5] = V_detect;
  2322  0005DA  C00D  F10A         	movff	_V_detect,_holding_register+10	;volatile
  2323  0005DE  C00E  F10B         	movff	_V_detect+1,_holding_register+11	;volatile
  2324                           
  2325                           ;Turn_counter.c: 198: holding_register[6] = current_max;
  2326  0005E2  C049  F10C         	movff	_current_max,_holding_register+12	;volatile
  2327  0005E6  C04A  F10D         	movff	_current_max+1,_holding_register+13	;volatile
  2328                           
  2329                           ;Turn_counter.c: 199: holding_register[7] = ADC_current_rms;
  2330  0005EA  C007  F10E         	movff	_ADC_current_rms,_holding_register+14	;volatile
  2331  0005EE  C008  F10F         	movff	_ADC_current_rms+1,_holding_register+15	;volatile
  2332                           
  2333                           ;Turn_counter.c: 200: holding_register[8] = overcurrent;
  2334  0005F2  6B10               	clrf	(_holding_register+16)& (0+255),b	;volatile
  2335  0005F4  6B11               	clrf	(_holding_register+17)& (0+255),b	;volatile
  2336                           
  2337                           ;Turn_counter.c: 203: holding_register[11] = read_turns;
  2338  0005F6  6B16               	clrf	(_holding_register+22)& (0+255),b	;volatile
  2339  0005F8  6B17               	clrf	(_holding_register+23)& (0+255),b	;volatile
  2340                           
  2341                           ;Turn_counter.c: 204: holding_register[12] = ADC_current_result;
  2342  0005FA  C005  F118         	movff	_ADC_current_result,_holding_register+24	;volatile
  2343  0005FE  C006  F119         	movff	_ADC_current_result+1,_holding_register+25	;volatile
  2344                           
  2345                           ;Turn_counter.c: 205: holding_register[13] = ADC_current_max;
  2346  000602  C003  F11A         	movff	_ADC_current_max,_holding_register+26	;volatile
  2347  000606  C004  F11B         	movff	_ADC_current_max+1,_holding_register+27	;volatile
  2348                           
  2349                           ;Turn_counter.c: 206: holding_register[14] = ADC_current_min;
  2350  00060A  C043  F11C         	movff	_ADC_current_min,_holding_register+28	;volatile
  2351  00060E  C044  F11D         	movff	_ADC_current_min+1,_holding_register+29	;volatile
  2352  000612                     l2036:
  2353                           
  2354                           ;Turn_counter.c: 207: }
  2355                           ;Turn_counter.c: 210: if(cmd_type == 0x06)
  2356  000612  503E               	movf	modbus_refresh@cmd_type,w,c
  2357  000614  0A06               	xorlw	6
  2358  000616  E010               	bz	l2042
  2359  000618  D01C               	goto	l197
  2360  00061A                     l199:
  2361                           
  2362                           ;Turn_counter.c: 214: set_zero = holding_register[0];
  2363  00061A  C100  F019         	movff	_holding_register,_set_zero	;volatile
  2364  00061E  C101  F01A         	movff	_holding_register+1,_set_zero+1	;volatile
  2365                           
  2366                           ;Turn_counter.c: 215: break;
  2367  000622  D017               	goto	l197
  2368  000624                     l201:
  2369                           
  2370                           ;Turn_counter.c: 218: num_of_turns = holding_register[2];
  2371  000624  C104  F084         	movff	_holding_register+4,_num_of_turns	;volatile
  2372  000628  C105  F085         	movff	_holding_register+5,_num_of_turns+1	;volatile
  2373                           
  2374                           ;Turn_counter.c: 219: break;
  2375  00062C  D012               	goto	l197
  2376  00062E                     l202:
  2377                           
  2378                           ;Turn_counter.c: 222: current_max = holding_register[6];
  2379  00062E  C10C  F049         	movff	_holding_register+12,_current_max	;volatile
  2380  000632  C10D  F04A         	movff	_holding_register+13,_current_max+1	;volatile
  2381                           
  2382                           ;Turn_counter.c: 223: break;
  2383  000636  D00D               	goto	l197
  2384  000638                     l2042:
  2385  000638  C00F  F03C         	movff	_addr_buf_1,??_modbus_refresh	;volatile
  2386  00063C  C010  F03D         	movff	_addr_buf_1+1,??_modbus_refresh+1	;volatile
  2387                           
  2388                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2389                           ; Switch size 1, requested type "space"
  2390                           ; Number of cases is 1, Range of values is 0 to 0
  2391                           ; switch strategies available:
  2392                           ; Name         Instructions Cycles
  2393                           ; simple_byte            4     3 (average)
  2394                           ;	Chosen strategy is simple_byte
  2395  000640  503D               	movf	??_modbus_refresh+1,w,c
  2396  000642  E107               	bnz	l197
  2397                           
  2398                           ; Switch size 1, requested type "space"
  2399                           ; Number of cases is 4, Range of values is 0 to 100
  2400                           ; switch strategies available:
  2401                           ; Name         Instructions Cycles
  2402                           ; simple_byte           13     7 (average)
  2403                           ;	Chosen strategy is simple_byte
  2404  000644  503C               	movf	??_modbus_refresh,w,c
  2405  000646  E0E9               	bz	l199
  2406  000648  0A02               	xorlw	2	; case 2
  2407  00064A  E0EC               	bz	l201
  2408  00064C  0A04               	xorlw	4	; case 6
  2409  00064E  E0EF               	bz	l202
  2410  000650  0A62               	xorlw	98	; case 100
  2411  000652                     l197:
  2412                           
  2413                           ;Turn_counter.c: 233: }
  2414                           ;Turn_counter.c: 235: LATCbits.LATC4 = 1;
  2415  000652  888B               	bsf	3979,4,c	;volatile
  2416                           
  2417                           ;Turn_counter.c: 236: LATCbits.LATC5 = 1;
  2418  000654  8A8B               	bsf	3979,5,c	;volatile
  2419                           
  2420                           ;Turn_counter.c: 237: led_cnt = 0;
  2421  000656  6A45               	clrf	_led_cnt,c
  2422  000658  6A46               	clrf	_led_cnt+1,c
  2423  00065A  0012               	return	
  2424  00065C                     __end_of_modbus_refresh:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           prodl	equ	0xFF3
  2431                           intcon	equ	0xFF2
  2432                           intcon2	equ	0xFF1
  2433                           intcon3	equ	0xFF0
  2434                           postinc0	equ	0xFEE
  2435                           wreg	equ	0xFE8
  2436                           indf1	equ	0xFE7
  2437                           postinc1	equ	0xFE6
  2438                           postdec1	equ	0xFE5
  2439                           fsr1h	equ	0xFE2
  2440                           fsr1l	equ	0xFE1
  2441                           indf2	equ	0xFDF
  2442                           postinc2	equ	0xFDE
  2443                           postdec2	equ	0xFDD
  2444                           fsr2h	equ	0xFDA
  2445                           fsr2l	equ	0xFD9
  2446                           status	equ	0xFD8
  2447                           
  2448 ;; *************** function _UART_Init *****************
  2449 ;; Defined at:
  2450 ;;		line 587 in file "Turn_counter.c"
  2451 ;; Parameters:    Size  Location     Type
  2452 ;;		None
  2453 ;; Auto vars:     Size  Location     Type
  2454 ;;		None
  2455 ;; Return value:  Size  Location     Type
  2456 ;;		None               void
  2457 ;; Registers used:
  2458 ;;		wreg, status,2
  2459 ;; Tracked objects:
  2460 ;;		On entry : F/F
  2461 ;;		On exit  : F/F
  2462 ;;		Unchanged: E/0
  2463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2465 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2467 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2468 ;;Total ram usage:        0 bytes
  2469 ;; Hardware stack levels used:    1
  2470 ;; Hardware stack levels required when called:    3
  2471 ;; This function calls:
  2472 ;;		Nothing
  2473 ;; This function is called by:
  2474 ;;		_main
  2475 ;; This function uses a non-reentrant model
  2476 ;;
  2477                           
  2478                           	psect	text9
  2479  00091C                     __ptext9:
  2480                           	opt stack 0
  2481  00091C                     _UART_Init:
  2482                           	opt stack 27
  2483                           
  2484                           ; BSR set to: 15
  2485                           ;Turn_counter.c: 591: SPBRG1 = 10;
  2486                           
  2487                           ;incstack = 0
  2488  00091C  0E0A               	movlw	10
  2489  00091E  6EAF               	movwf	4015,c	;volatile
  2490                           
  2491                           ; BSR set to: 15
  2492                           ;Turn_counter.c: 593: TXSTA1bits.SYNC = 0;
  2493  000920  98AC               	bcf	4012,4,c	;volatile
  2494                           
  2495                           ; BSR set to: 15
  2496                           ;Turn_counter.c: 594: TXSTA1bits.TX9 = 0;
  2497  000922  9CAC               	bcf	4012,6,c	;volatile
  2498                           
  2499                           ; BSR set to: 15
  2500                           ;Turn_counter.c: 595: TXSTA1bits.TXEN = 1;
  2501  000924  8AAC               	bsf	4012,5,c	;volatile
  2502                           
  2503                           ; BSR set to: 15
  2504                           ;Turn_counter.c: 596: TXSTA1bits.BRGH = 1;
  2505  000926  84AC               	bsf	4012,2,c	;volatile
  2506                           
  2507                           ; BSR set to: 15
  2508                           ;Turn_counter.c: 599: RCSTA1bits.CREN1 = 1;
  2509  000928  88AB               	bsf	4011,4,c	;volatile
  2510                           
  2511                           ; BSR set to: 15
  2512                           ;Turn_counter.c: 600: RCSTA1bits.RX9 = 0;
  2513  00092A  9CAB               	bcf	4011,6,c	;volatile
  2514                           
  2515                           ; BSR set to: 15
  2516                           ;Turn_counter.c: 601: RCSTA1bits.SPEN = 1;
  2517  00092C  8EAB               	bsf	4011,7,c	;volatile
  2518                           
  2519                           ; BSR set to: 15
  2520                           ;Turn_counter.c: 602: RCSTA1bits.CREN1 = 1;
  2521  00092E  88AB               	bsf	4011,4,c	;volatile
  2522                           
  2523                           ; BSR set to: 15
  2524                           ;Turn_counter.c: 603: RCSTA1bits.FERR = 0;
  2525  000930  94AB               	bcf	4011,2,c	;volatile
  2526                           
  2527                           ; BSR set to: 15
  2528                           ;Turn_counter.c: 604: RCSTA1bits.OERR =0;
  2529  000932  92AB               	bcf	4011,1,c	;volatile
  2530                           
  2531                           ; BSR set to: 15
  2532                           ;Turn_counter.c: 607: BAUDCON1bits.RXDTP1 = 0;
  2533  000934  9AA7               	bcf	4007,5,c	;volatile
  2534                           
  2535                           ; BSR set to: 15
  2536                           ;Turn_counter.c: 608: BAUDCON1bits.TXCKP1 = 0;
  2537  000936  98A7               	bcf	4007,4,c	;volatile
  2538                           
  2539                           ; BSR set to: 15
  2540                           ;Turn_counter.c: 609: BAUDCON1bits.BRG16 = 0;
  2541  000938  96A7               	bcf	4007,3,c	;volatile
  2542                           
  2543                           ; BSR set to: 15
  2544                           ;Turn_counter.c: 611: BAUDCON1bits.ABDEN1 = 0;
  2545  00093A  90A7               	bcf	4007,0,c	;volatile
  2546                           
  2547                           ; BSR set to: 15
  2548  00093C  0C0A               	retlw	10
  2549  00093E                     __end_of_UART_Init:
  2550                           	opt stack 0
  2551                           tblptru	equ	0xFF8
  2552                           tblptrh	equ	0xFF7
  2553                           tblptrl	equ	0xFF6
  2554                           tablat	equ	0xFF5
  2555                           prodl	equ	0xFF3
  2556                           intcon	equ	0xFF2
  2557                           intcon2	equ	0xFF1
  2558                           intcon3	equ	0xFF0
  2559                           postinc0	equ	0xFEE
  2560                           wreg	equ	0xFE8
  2561                           indf1	equ	0xFE7
  2562                           postinc1	equ	0xFE6
  2563                           postdec1	equ	0xFE5
  2564                           fsr1h	equ	0xFE2
  2565                           fsr1l	equ	0xFE1
  2566                           indf2	equ	0xFDF
  2567                           postinc2	equ	0xFDE
  2568                           postdec2	equ	0xFDD
  2569                           fsr2h	equ	0xFDA
  2570                           fsr2l	equ	0xFD9
  2571                           status	equ	0xFD8
  2572                           
  2573 ;; *************** function _Timer1_init *****************
  2574 ;; Defined at:
  2575 ;;		line 762 in file "Turn_counter.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;		None
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;		None               void
  2582 ;; Registers used:
  2583 ;;		wreg, status,2
  2584 ;; Tracked objects:
  2585 ;;		On entry : F/0
  2586 ;;		On exit  : F/0
  2587 ;;		Unchanged: F/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2593 ;;Total ram usage:        0 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    3
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_main
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text10
  2604  0009AE                     __ptext10:
  2605                           	opt stack 0
  2606  0009AE                     _Timer1_init:
  2607                           	opt stack 27
  2608                           
  2609                           ; BSR set to: 0
  2610                           ;Turn_counter.c: 764: T1GCONbits.TMR1GE = 0;
  2611                           
  2612                           ; BSR set to: 15
  2613                           ;incstack = 0
  2614  0009AE  9EAA               	bcf	4010,7,c	;volatile
  2615                           
  2616                           ;Turn_counter.c: 765: T1CONbits.SOSCEN = 1;
  2617  0009B0  86CD               	bsf	4045,3,c	;volatile
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;Turn_counter.c: 766: T1CONbits.TMR1CS = 0;
  2621  0009B2  0E3F               	movlw	-193
  2622  0009B4  16CD               	andwf	4045,f,c	;volatile
  2623                           
  2624                           ;Turn_counter.c: 767: T1CONbits.T1CKPS = 3;
  2625  0009B6  0E30               	movlw	48
  2626  0009B8  12CD               	iorwf	4045,f,c	;volatile
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;Turn_counter.c: 768: T1CONbits.nT1SYNC = 0;
  2630  0009BA  94CD               	bcf	4045,2,c	;volatile
  2631                           
  2632                           ; BSR set to: 0
  2633  0009BC  0C30               	retlw	48
  2634  0009BE                     __end_of_Timer1_init:
  2635                           	opt stack 0
  2636                           tblptru	equ	0xFF8
  2637                           tblptrh	equ	0xFF7
  2638                           tblptrl	equ	0xFF6
  2639                           tablat	equ	0xFF5
  2640                           prodl	equ	0xFF3
  2641                           intcon	equ	0xFF2
  2642                           intcon2	equ	0xFF1
  2643                           intcon3	equ	0xFF0
  2644                           postinc0	equ	0xFEE
  2645                           wreg	equ	0xFE8
  2646                           indf1	equ	0xFE7
  2647                           postinc1	equ	0xFE6
  2648                           postdec1	equ	0xFE5
  2649                           fsr1h	equ	0xFE2
  2650                           fsr1l	equ	0xFE1
  2651                           indf2	equ	0xFDF
  2652                           postinc2	equ	0xFDE
  2653                           postdec2	equ	0xFDD
  2654                           fsr2h	equ	0xFDA
  2655                           fsr2l	equ	0xFD9
  2656                           status	equ	0xFD8
  2657                           
  2658 ;; *************** function _Interrupt_Init *****************
  2659 ;; Defined at:
  2660 ;;		line 615 in file "Turn_counter.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;		None
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;		None               void
  2667 ;; Registers used:
  2668 ;;		None
  2669 ;; Tracked objects:
  2670 ;;		On entry : F/F
  2671 ;;		On exit  : F/F
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2678 ;;Total ram usage:        0 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:    3
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text11
  2689  000960                     __ptext11:
  2690                           	opt stack 0
  2691  000960                     _Interrupt_Init:
  2692                           	opt stack 27
  2693                           
  2694                           ; BSR set to: 15
  2695                           ;Turn_counter.c: 617: RCONbits.IPEN = 0;
  2696                           
  2697                           ; BSR set to: 0
  2698                           ;incstack = 0
  2699  000960  9ED0               	bcf	4048,7,c	;volatile
  2700                           
  2701                           ;Turn_counter.c: 618: INTCONbits.GIEH = 1;
  2702  000962  8EF2               	bsf	intcon,7,c	;volatile
  2703                           
  2704                           ;Turn_counter.c: 619: INTCONbits.GIEL = 1;
  2705  000964  8CF2               	bsf	intcon,6,c	;volatile
  2706                           
  2707                           ;Turn_counter.c: 620: INTCONbits.TMR0IE = 0;
  2708  000966  9AF2               	bcf	intcon,5,c	;volatile
  2709                           
  2710                           ;Turn_counter.c: 622: INTCONbits.RBIE = 0;
  2711  000968  96F2               	bcf	intcon,3,c	;volatile
  2712                           
  2713                           ;Turn_counter.c: 623: INTCONbits.RBIF = 0;
  2714  00096A  90F2               	bcf	intcon,0,c	;volatile
  2715                           
  2716                           ;Turn_counter.c: 625: INTCONbits.INT0IF = 0;
  2717  00096C  92F2               	bcf	intcon,1,c	;volatile
  2718                           
  2719                           ;Turn_counter.c: 626: IOCB = 0;
  2720  00096E  6B5A               	clrf	90,b	;volatile
  2721                           
  2722                           ;Turn_counter.c: 627: INTCON2bits.nRBPU = 1;
  2723  000970  8EF1               	bsf	intcon2,7,c	;volatile
  2724                           
  2725                           ;Turn_counter.c: 630: PIE1bits.ADIE = 0;
  2726  000972  9C9D               	bcf	3997,6,c	;volatile
  2727                           
  2728                           ;Turn_counter.c: 631: INTCON2bits.INTEDG1 = 1;
  2729  000974  8AF1               	bsf	intcon2,5,c	;volatile
  2730                           
  2731                           ;Turn_counter.c: 633: INTCON3bits.INT1IE = 1;
  2732  000976  86F0               	bsf	intcon3,3,c	;volatile
  2733                           
  2734                           ;Turn_counter.c: 634: PIE1bits.RC1IE = 1;
  2735  000978  8A9D               	bsf	3997,5,c	;volatile
  2736                           
  2737                           ;Turn_counter.c: 635: INTCONbits.TMR0IE = 1;
  2738  00097A  8AF2               	bsf	intcon,5,c	;volatile
  2739                           
  2740                           ;Turn_counter.c: 636: PIE1bits.TMR1IE = 1;
  2741  00097C  809D               	bsf	3997,0,c	;volatile
  2742                           
  2743                           ; BSR set to: 15
  2744  00097E  0012               	return	
  2745  000980                     __end_of_Interrupt_Init:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodl	equ	0xFF3
  2752                           intcon	equ	0xFF2
  2753                           intcon2	equ	0xFF1
  2754                           intcon3	equ	0xFF0
  2755                           postinc0	equ	0xFEE
  2756                           wreg	equ	0xFE8
  2757                           indf1	equ	0xFE7
  2758                           postinc1	equ	0xFE6
  2759                           postdec1	equ	0xFE5
  2760                           fsr1h	equ	0xFE2
  2761                           fsr1l	equ	0xFE1
  2762                           indf2	equ	0xFDF
  2763                           postinc2	equ	0xFDE
  2764                           postdec2	equ	0xFDD
  2765                           fsr2h	equ	0xFDA
  2766                           fsr2l	equ	0xFD9
  2767                           status	equ	0xFD8
  2768                           
  2769 ;; *************** function _Hold_reg_Inint *****************
  2770 ;; Defined at:
  2771 ;;		line 568 in file "Turn_counter.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;		None
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;		None
  2776 ;; Return value:  Size  Location     Type
  2777 ;;		None               void
  2778 ;; Registers used:
  2779 ;;		wreg, status,2
  2780 ;; Tracked objects:
  2781 ;;		On entry : 0/0
  2782 ;;		On exit  : F/0
  2783 ;;		Unchanged: 0/0
  2784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2789 ;;Total ram usage:        0 bytes
  2790 ;; Hardware stack levels used:    1
  2791 ;; Hardware stack levels required when called:    3
  2792 ;; This function calls:
  2793 ;;		Nothing
  2794 ;; This function is called by:
  2795 ;;		_main
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           	psect	text12
  2800  00099A                     __ptext12:
  2801                           	opt stack 0
  2802  00099A                     _Hold_reg_Inint:
  2803                           	opt stack 27
  2804                           
  2805                           ;Turn_counter.c: 570: num_of_turns = 5;
  2806                           
  2807                           ; BSR set to: 15
  2808                           ;incstack = 0
  2809  00099A  0E00               	movlw	0
  2810  00099C  0100               	movlb	0	; () banked
  2811  00099E  6F85               	movwf	(_num_of_turns+1)& (0+255),b
  2812  0009A0  0E05               	movlw	5
  2813  0009A2  6F84               	movwf	_num_of_turns& (0+255),b
  2814                           
  2815                           ;Turn_counter.c: 571: current_max = 700;
  2816  0009A4  0E02               	movlw	2
  2817  0009A6  6E4A               	movwf	_current_max+1,c
  2818  0009A8  0EBC               	movlw	188
  2819  0009AA  6E49               	movwf	_current_max,c
  2820                           
  2821                           ; BSR set to: 0
  2822  0009AC  0CBC               	retlw	188
  2823  0009AE                     __end_of_Hold_reg_Inint:
  2824                           	opt stack 0
  2825                           tblptru	equ	0xFF8
  2826                           tblptrh	equ	0xFF7
  2827                           tblptrl	equ	0xFF6
  2828                           tablat	equ	0xFF5
  2829                           prodl	equ	0xFF3
  2830                           intcon	equ	0xFF2
  2831                           intcon2	equ	0xFF1
  2832                           intcon3	equ	0xFF0
  2833                           postinc0	equ	0xFEE
  2834                           wreg	equ	0xFE8
  2835                           indf1	equ	0xFE7
  2836                           postinc1	equ	0xFE6
  2837                           postdec1	equ	0xFE5
  2838                           fsr1h	equ	0xFE2
  2839                           fsr1l	equ	0xFE1
  2840                           indf2	equ	0xFDF
  2841                           postinc2	equ	0xFDE
  2842                           postdec2	equ	0xFDD
  2843                           fsr2h	equ	0xFDA
  2844                           fsr2l	equ	0xFD9
  2845                           status	equ	0xFD8
  2846                           
  2847 ;; *************** function _GPIO_init *****************
  2848 ;; Defined at:
  2849 ;;		line 540 in file "Turn_counter.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;		None               void
  2856 ;; Registers used:
  2857 ;;		None
  2858 ;; Tracked objects:
  2859 ;;		On entry : F/0
  2860 ;;		On exit  : F/F
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2863 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:    3
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_main
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text13
  2878  0008EE                     __ptext13:
  2879                           	opt stack 0
  2880  0008EE                     _GPIO_init:
  2881                           	opt stack 27
  2882                           
  2883                           ; BSR set to: 0
  2884                           ;Turn_counter.c: 543: TRISAbits.TRISA0 = 1;
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;incstack = 0
  2888  0008EE  8092               	bsf	3986,0,c	;volatile
  2889                           
  2890                           ;Turn_counter.c: 544: TRISAbits.TRISA1 = 0;
  2891  0008F0  9292               	bcf	3986,1,c	;volatile
  2892                           
  2893                           ;Turn_counter.c: 545: TRISAbits.TRISA2 = 0;
  2894  0008F2  9492               	bcf	3986,2,c	;volatile
  2895                           
  2896                           ;Turn_counter.c: 546: TRISAbits.TRISA3 = 0;
  2897  0008F4  9692               	bcf	3986,3,c	;volatile
  2898                           
  2899                           ;Turn_counter.c: 548: TRISBbits.TRISB0 = 0;
  2900  0008F6  9093               	bcf	3987,0,c	;volatile
  2901                           
  2902                           ;Turn_counter.c: 549: TRISBbits.TRISB1 = 1;
  2903  0008F8  8293               	bsf	3987,1,c	;volatile
  2904                           
  2905                           ;Turn_counter.c: 550: TRISBbits.TRISB2 = 1;
  2906  0008FA  8493               	bsf	3987,2,c	;volatile
  2907                           
  2908                           ;Turn_counter.c: 551: TRISBbits.TRISB3 = 1;
  2909  0008FC  8693               	bsf	3987,3,c	;volatile
  2910                           
  2911                           ;Turn_counter.c: 552: TRISBbits.TRISB4 = 1;
  2912  0008FE  8893               	bsf	3987,4,c	;volatile
  2913                           
  2914                           ;Turn_counter.c: 553: TRISBbits.TRISB5 = 0;
  2915  000900  9A93               	bcf	3987,5,c	;volatile
  2916                           
  2917                           ;Turn_counter.c: 555: TRISCbits.TRISC1 = 0;
  2918  000902  9294               	bcf	3988,1,c	;volatile
  2919                           
  2920                           ;Turn_counter.c: 556: TRISCbits.TRISC2 = 0;
  2921  000904  9494               	bcf	3988,2,c	;volatile
  2922                           
  2923                           ;Turn_counter.c: 557: TRISCbits.TRISC3 = 0;
  2924  000906  9694               	bcf	3988,3,c	;volatile
  2925                           
  2926                           ;Turn_counter.c: 558: TRISCbits.TRISC4 = 0;
  2927  000908  9894               	bcf	3988,4,c	;volatile
  2928                           
  2929                           ;Turn_counter.c: 559: TRISCbits.TRISC5 = 0;
  2930  00090A  9A94               	bcf	3988,5,c	;volatile
  2931                           
  2932                           ;Turn_counter.c: 560: TRISCbits.TRISC6 = 0;
  2933  00090C  9C94               	bcf	3988,6,c	;volatile
  2934                           
  2935                           ;Turn_counter.c: 561: TRISCbits.TRISC7 = 1;
  2936  00090E  8E94               	bsf	3988,7,c	;volatile
  2937                           
  2938                           ;Turn_counter.c: 563: ANCON0bits.ANSEL0 = 1;
  2939  000910  010F               	movlb	15	; () banked
  2940  000912  815D               	bsf	93,0,b	;volatile
  2941                           
  2942                           ;Turn_counter.c: 564: ANCON0bits.ANSEL1 = 1;
  2943  000914  835D               	bsf	93,1,b	;volatile
  2944                           
  2945                           ;Turn_counter.c: 565: ANCON1bits.ANSEL8 = 0;
  2946  000916  915C               	bcf	92,0,b	;volatile
  2947                           
  2948                           ;Turn_counter.c: 566: ANCON1bits.ANSEL10 = 0;
  2949  000918  955C               	bcf	92,2,b	;volatile
  2950                           
  2951                           ; BSR set to: 15
  2952  00091A  0012               	return	
  2953  00091C                     __end_of_GPIO_init:
  2954                           	opt stack 0
  2955                           tblptru	equ	0xFF8
  2956                           tblptrh	equ	0xFF7
  2957                           tblptrl	equ	0xFF6
  2958                           tablat	equ	0xFF5
  2959                           prodl	equ	0xFF3
  2960                           intcon	equ	0xFF2
  2961                           intcon2	equ	0xFF1
  2962                           intcon3	equ	0xFF0
  2963                           postinc0	equ	0xFEE
  2964                           wreg	equ	0xFE8
  2965                           indf1	equ	0xFE7
  2966                           postinc1	equ	0xFE6
  2967                           postdec1	equ	0xFE5
  2968                           fsr1h	equ	0xFE2
  2969                           fsr1l	equ	0xFE1
  2970                           indf2	equ	0xFDF
  2971                           postinc2	equ	0xFDE
  2972                           postdec2	equ	0xFDD
  2973                           fsr2h	equ	0xFDA
  2974                           fsr2l	equ	0xFD9
  2975                           status	equ	0xFD8
  2976                           
  2977 ;; *************** function _ADC_Init *****************
  2978 ;; Defined at:
  2979 ;;		line 574 in file "Turn_counter.c"
  2980 ;; Parameters:    Size  Location     Type
  2981 ;;		None
  2982 ;; Auto vars:     Size  Location     Type
  2983 ;;		None
  2984 ;; Return value:  Size  Location     Type
  2985 ;;		None               void
  2986 ;; Registers used:
  2987 ;;		wreg, status,2
  2988 ;; Tracked objects:
  2989 ;;		On entry : F/F
  2990 ;;		On exit  : F/F
  2991 ;;		Unchanged: E/0
  2992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2997 ;;Total ram usage:        0 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    3
  3000 ;; This function calls:
  3001 ;;		Nothing
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           	psect	text14
  3008  00093E                     __ptext14:
  3009                           	opt stack 0
  3010  00093E                     _ADC_Init:
  3011                           	opt stack 27
  3012                           
  3013                           ; BSR set to: 15
  3014                           ;Turn_counter.c: 576: ADCON0bits.ADON = 1;
  3015                           
  3016                           ; BSR set to: 15
  3017                           ;incstack = 0
  3018  00093E  80C2               	bsf	4034,0,c	;volatile
  3019                           
  3020                           ;Turn_counter.c: 577: ADCON0bits.GO_nDONE = 0;
  3021  000940  92C2               	bcf	4034,1,c	;volatile
  3022                           
  3023                           ; BSR set to: 15
  3024                           ;Turn_counter.c: 578: ADCON0bits.CHS = 0;
  3025  000942  0E83               	movlw	-125
  3026  000944  16C2               	andwf	4034,f,c	;volatile
  3027                           
  3028                           ;Turn_counter.c: 579: ADCON1bits.CHSN = 0;
  3029  000946  0EF8               	movlw	-8
  3030  000948  16C1               	andwf	4033,f,c	;volatile
  3031                           
  3032                           ;Turn_counter.c: 580: ADCON1bits.VCFG = 0;
  3033  00094A  0ECF               	movlw	-49
  3034  00094C  16C1               	andwf	4033,f,c	;volatile
  3035                           
  3036                           ; BSR set to: 15
  3037                           ;Turn_counter.c: 581: ADCON1bits.VNCFG = 0;
  3038  00094E  96C1               	bcf	4033,3,c	;volatile
  3039                           
  3040                           ;Turn_counter.c: 582: ADCON2bits.ACQT = 7;
  3041  000950  0E38               	movlw	56
  3042  000952  12C0               	iorwf	4032,f,c	;volatile
  3043                           
  3044                           ;Turn_counter.c: 583: ADCON2bits.ADCS = 2;
  3045  000954  50C0               	movf	4032,w,c	;volatile
  3046  000956  0BF8               	andlw	-8
  3047  000958  0902               	iorlw	2
  3048  00095A  6EC0               	movwf	4032,c	;volatile
  3049                           
  3050                           ; BSR set to: 15
  3051                           ;Turn_counter.c: 584: ADCON2bits.ADFM = 1;
  3052  00095C  8EC0               	bsf	4032,7,c	;volatile
  3053                           
  3054                           ; BSR set to: 15
  3055  00095E  0012               	return	
  3056  000960                     __end_of_ADC_Init:
  3057                           	opt stack 0
  3058                           tblptru	equ	0xFF8
  3059                           tblptrh	equ	0xFF7
  3060                           tblptrl	equ	0xFF6
  3061                           tablat	equ	0xFF5
  3062                           prodl	equ	0xFF3
  3063                           intcon	equ	0xFF2
  3064                           intcon2	equ	0xFF1
  3065                           intcon3	equ	0xFF0
  3066                           postinc0	equ	0xFEE
  3067                           wreg	equ	0xFE8
  3068                           indf1	equ	0xFE7
  3069                           postinc1	equ	0xFE6
  3070                           postdec1	equ	0xFE5
  3071                           fsr1h	equ	0xFE2
  3072                           fsr1l	equ	0xFE1
  3073                           indf2	equ	0xFDF
  3074                           postinc2	equ	0xFDE
  3075                           postdec2	equ	0xFDD
  3076                           fsr2h	equ	0xFDA
  3077                           fsr2l	equ	0xFD9
  3078                           status	equ	0xFD8
  3079                           
  3080 ;; *************** function _ISR *****************
  3081 ;; Defined at:
  3082 ;;		line 689 in file "Turn_counter.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;		None
  3085 ;; Auto vars:     Size  Location     Type
  3086 ;;		None
  3087 ;; Return value:  Size  Location     Type
  3088 ;;		None               void
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3098 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3099 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3100 ;;Total ram usage:        3 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    2
  3103 ;; This function calls:
  3104 ;;		i2_modbus_rx_sm
  3105 ;; This function is called by:
  3106 ;;		Interrupt level 2
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	intcode
  3111  000008                     __pintcode:
  3112                           	opt stack 0
  3113  000008                     _ISR:
  3114                           	opt stack 25
  3115                           
  3116                           ; BSR set to: 15
  3117                           ;incstack = 0
  3118  000008  CFD9 F03A          	movff	fsr2l,??_ISR+1
  3119  00000C  CFDA F03B          	movff	fsr2h,??_ISR+2
  3120                           
  3121                           ;Turn_counter.c: 691: if(INTCON3bits.INT1IF)
  3122  000010  A0F0               	btfss	intcon3,0,c	;volatile
  3123  000012  D005               	goto	i2l1914
  3124                           
  3125                           ;Turn_counter.c: 692: {
  3126                           ;Turn_counter.c: 694: TMR1L = 0x00;
  3127  000014  6ACE               	clrf	4046,c	;volatile
  3128                           
  3129                           ;Turn_counter.c: 695: TMR1H = 0xC0;
  3130  000016  0EC0               	movlw	192
  3131  000018  6ECF               	movwf	4047,c	;volatile
  3132                           
  3133                           ;Turn_counter.c: 696: T1CONbits.TMR1ON = 1;
  3134  00001A  80CD               	bsf	4045,0,c	;volatile
  3135                           
  3136                           ;Turn_counter.c: 698: INTCON3bits.INT1IF = 0;
  3137  00001C  90F0               	bcf	intcon3,0,c	;volatile
  3138  00001E                     i2l1914:
  3139                           
  3140                           ;Turn_counter.c: 700: }
  3141                           ;Turn_counter.c: 702: if (PIR1bits.RC1IF)
  3142  00001E  AA9E               	btfss	3998,5,c	;volatile
  3143  000020  D011               	goto	i2l1924
  3144                           
  3145                           ;Turn_counter.c: 703: {
  3146                           ;Turn_counter.c: 706: if (RCSTA1bits.OERR == 1)
  3147  000022  A2AB               	btfss	4011,1,c	;volatile
  3148  000024  D003               	goto	i2l1920
  3149                           
  3150                           ;Turn_counter.c: 707: {
  3151                           ;Turn_counter.c: 708: RCSTA1bits.OERR = 0;
  3152  000026  92AB               	bcf	4011,1,c	;volatile
  3153                           
  3154                           ;Turn_counter.c: 709: RCSTA1bits.CREN = 0;
  3155  000028  98AB               	bcf	4011,4,c	;volatile
  3156                           
  3157                           ;Turn_counter.c: 710: RCSTA1bits.CREN = 1;
  3158  00002A  88AB               	bsf	4011,4,c	;volatile
  3159  00002C                     i2l1920:
  3160                           
  3161                           ;Turn_counter.c: 711: }
  3162                           ;Turn_counter.c: 713: wr_ptr++;
  3163  00002C  2A27               	incf	_wr_ptr,f,c
  3164                           
  3165                           ;Turn_counter.c: 714: rx_buf[wr_ptr & 0x0F] = RCREG1;
  3166  00002E  C027  F039         	movff	_wr_ptr,??_ISR
  3167  000032  0E0F               	movlw	15
  3168  000034  1639               	andwf	??_ISR,f,c
  3169  000036  5039               	movf	??_ISR,w,c
  3170  000038  0100               	movlb	0	; () banked
  3171  00003A  0F74               	addlw	low _rx_buf
  3172  00003C  6ED9               	movwf	fsr2l,c
  3173  00003E  6ADA               	clrf	fsr2h,c
  3174  000040  CFAE FFDF          	movff	4014,indf2	;volatile
  3175  000044                     i2l1924:
  3176                           
  3177                           ;Turn_counter.c: 716: }
  3178                           ;Turn_counter.c: 718: if (PIR1bits.TMR1IF)
  3179  000044  A09E               	btfss	3998,0,c	;volatile
  3180  000046  D00B               	goto	i2l309
  3181                           
  3182                           ;Turn_counter.c: 719: {
  3183                           ;Turn_counter.c: 720: T1CONbits.TMR1ON = 0;
  3184  000048  90CD               	bcf	4045,0,c	;volatile
  3185                           
  3186                           ;Turn_counter.c: 722: if(!PORTBbits.RB1)
  3187  00004A  B281               	btfsc	3969,1,c	;volatile
  3188  00004C  D005               	goto	i2l310
  3189                           
  3190                           ;Turn_counter.c: 723: V_detect = 1;
  3191  00004E  0E00               	movlw	0
  3192  000050  6E0E               	movwf	_V_detect+1,c
  3193  000052  0E01               	movlw	1
  3194  000054  6E0D               	movwf	_V_detect,c
  3195  000056  D002               	goto	i2l311
  3196  000058                     i2l310:
  3197                           
  3198                           ;Turn_counter.c: 724: else
  3199                           ;Turn_counter.c: 725: V_detect = 0;
  3200  000058  6A0D               	clrf	_V_detect,c
  3201  00005A  6A0E               	clrf	_V_detect+1,c
  3202  00005C                     i2l311:
  3203                           
  3204                           ;Turn_counter.c: 726: PIR1bits.TMR1IF = 0;
  3205  00005C  909E               	bcf	3998,0,c	;volatile
  3206  00005E                     i2l309:
  3207                           
  3208                           ;Turn_counter.c: 727: }
  3209                           ;Turn_counter.c: 730: if (INTCONbits.TMR0IF)
  3210  00005E  A4F2               	btfss	intcon,2,c	;volatile
  3211  000060  D006               	goto	i2l313
  3212                           
  3213                           ;Turn_counter.c: 731: {
  3214                           ;Turn_counter.c: 739: modbus_rx_sm();
  3215  000062  EC03  F001         	call	i2_modbus_rx_sm	;wreg free
  3216                           
  3217                           ;Turn_counter.c: 743: INTCONbits.TMR0IF = 0;
  3218  000066  94F2               	bcf	intcon,2,c	;volatile
  3219                           
  3220                           ;Turn_counter.c: 744: TMR0L = 0x0f;
  3221  000068  0E0F               	movlw	15
  3222  00006A  6ED6               	movwf	4054,c	;volatile
  3223                           
  3224                           ;Turn_counter.c: 745: TMR0H = 0xff;
  3225  00006C  68D7               	setf	4055,c	;volatile
  3226  00006E                     i2l313:
  3227  00006E  C03B  FFDA         	movff	??_ISR+2,fsr2h
  3228  000072  C03A  FFD9         	movff	??_ISR+1,fsr2l
  3229  000076  0011               	retfie		f
  3230  000078                     __end_of_ISR:
  3231                           	opt stack 0
  3232                           tblptru	equ	0xFF8
  3233                           tblptrh	equ	0xFF7
  3234                           tblptrl	equ	0xFF6
  3235                           tablat	equ	0xFF5
  3236                           prodl	equ	0xFF3
  3237                           intcon	equ	0xFF2
  3238                           intcon2	equ	0xFF1
  3239                           intcon3	equ	0xFF0
  3240                           postinc0	equ	0xFEE
  3241                           wreg	equ	0xFE8
  3242                           indf1	equ	0xFE7
  3243                           postinc1	equ	0xFE6
  3244                           postdec1	equ	0xFE5
  3245                           fsr1h	equ	0xFE2
  3246                           fsr1l	equ	0xFE1
  3247                           indf2	equ	0xFDF
  3248                           postinc2	equ	0xFDE
  3249                           postdec2	equ	0xFDD
  3250                           fsr2h	equ	0xFDA
  3251                           fsr2l	equ	0xFD9
  3252                           status	equ	0xFD8
  3253                           
  3254 ;; *************** function i2_modbus_rx_sm *****************
  3255 ;; Defined at:
  3256 ;;		line 360 in file "Turn_counter.c"
  3257 ;; Parameters:    Size  Location     Type
  3258 ;;		None
  3259 ;; Auto vars:     Size  Location     Type
  3260 ;;		None
  3261 ;; Return value:  Size  Location     Type
  3262 ;;		None               void
  3263 ;; Registers used:
  3264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3265 ;; Tracked objects:
  3266 ;;		On entry : 0/0
  3267 ;;		On exit  : 0/0
  3268 ;;		Unchanged: 0/0
  3269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3270 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3272 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3273 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3274 ;;Total ram usage:        3 bytes
  3275 ;; Hardware stack levels used:    1
  3276 ;; Hardware stack levels required when called:    1
  3277 ;; This function calls:
  3278 ;;		i2_get_rx_ch
  3279 ;;		i2_modbus_CRC16
  3280 ;; This function is called by:
  3281 ;;		_ISR
  3282 ;; This function uses a non-reentrant model
  3283 ;;
  3284                           
  3285                           	psect	text16
  3286  000206                     __ptext16:
  3287                           	opt stack 0
  3288  000206                     i2_modbus_rx_sm:
  3289                           	opt stack 25
  3290                           
  3291                           ;Turn_counter.c: 364: while(rd_ptr < wr_ptr)
  3292                           
  3293                           ;incstack = 0
  3294  000206  D0AC               	goto	i2l1902
  3295  000208                     i2l1802:
  3296                           
  3297                           ;Turn_counter.c: 365: {
  3298                           ;Turn_counter.c: 366: rx_byte = get_rx_ch();
  3299  000208  EC5C  F004         	call	i2_get_rx_ch	;wreg free
  3300  00020C  6E26               	movwf	_rx_byte,c	;volatile
  3301                           
  3302                           ;Turn_counter.c: 367: switch(rd_state)
  3303  00020E  D09A               	goto	i2l1900
  3304  000210                     i2l1804:
  3305                           
  3306                           ;Turn_counter.c: 371: if(rx_byte == dev_id)
  3307  000210  5047               	movf	_dev_id,w,c
  3308  000212  6226               	cpfseq	_rx_byte,c	;volatile
  3309  000214  D002               	goto	i2l1808
  3310                           
  3311                           ;Turn_counter.c: 372: {
  3312                           ;Turn_counter.c: 374: rd_state = 11;
  3313  000216  0E0B               	movlw	11
  3314  000218  6E48               	movwf	_rd_state,c	;volatile
  3315  00021A                     i2l1808:
  3316                           
  3317                           ;Turn_counter.c: 376: }
  3318                           ;Turn_counter.c: 377: if(rx_byte == 0)
  3319  00021A  6626               	tstfsz	_rx_byte,c	;volatile
  3320  00021C  D0A1               	goto	i2l1902
  3321                           
  3322                           ;Turn_counter.c: 378: {
  3323                           ;Turn_counter.c: 380: rd_state = 11;
  3324  00021E  0E0B               	movlw	11
  3325  000220  D00B               	goto	L11
  3326  000222                     i2l1812:
  3327                           
  3328                           ;Turn_counter.c: 389: reg_addr_flag = 1;
  3329  000222  0E01               	movlw	1
  3330  000224  6E23               	movwf	_reg_addr_flag,c	;volatile
  3331  000226                     i2l1814:
  3332                           
  3333                           ;Turn_counter.c: 390: regs2read = 0;
  3334  000226  6A17               	clrf	_regs2read,c	;volatile
  3335  000228  6A18               	clrf	_regs2read+1,c	;volatile
  3336                           
  3337                           ;Turn_counter.c: 391: reg_wr_data = 0;
  3338  00022A  6A15               	clrf	_reg_wr_data,c	;volatile
  3339  00022C  6A16               	clrf	_reg_wr_data+1,c	;volatile
  3340  00022E  D031               	goto	L13
  3341  000230                     i2l1818:
  3342                           
  3343                           ;Turn_counter.c: 396: reg_addr_flag = 1;
  3344  000230  0E01               	movlw	1
  3345  000232  6E23               	movwf	_reg_addr_flag,c	;volatile
  3346                           
  3347                           ;Turn_counter.c: 397: reg_wr_flag = 1;
  3348  000234  6E25               	movwf	_reg_wr_flag,c	;volatile
  3349  000236  D7F7               	goto	i2l1814
  3350  000238                     L11:
  3351  000238  6E48               	movwf	_rd_state,c	;volatile
  3352                           
  3353                           ;Turn_counter.c: 405: }
  3354  00023A  D092               	goto	i2l1902
  3355  00023C                     i2l1826:
  3356  00023C  5026               	movf	_rx_byte,w,c	;volatile
  3357                           
  3358                           ; Switch size 1, requested type "space"
  3359                           ; Number of cases is 2, Range of values is 3 to 6
  3360                           ; switch strategies available:
  3361                           ; Name         Instructions Cycles
  3362                           ; simple_byte            7     4 (average)
  3363                           ;	Chosen strategy is simple_byte
  3364  00023E  0A03               	xorlw	3	; case 3
  3365  000240  E0F0               	bz	i2l1812
  3366  000242  0A05               	xorlw	5	; case 6
  3367  000244  E0F5               	bz	i2l1818
  3368  000246  D07C               	goto	i2l1898
  3369  000248                     i2l249:
  3370                           
  3371                           ;Turn_counter.c: 409: temp_buf = (unsigned int)rx_byte;
  3372  000248  C026  F01D         	movff	_rx_byte,_temp_buf	;volatile
  3373  00024C  6A1E               	clrf	_temp_buf+1,c	;volatile
  3374                           
  3375                           ;Turn_counter.c: 410: temp_buf = temp_buf << 8;
  3376  00024E  501D               	movf	_temp_buf,w,c	;volatile
  3377  000250  6E1E               	movwf	_temp_buf+1,c	;volatile
  3378  000252  6A1D               	clrf	_temp_buf,c	;volatile
  3379                           
  3380                           ;Turn_counter.c: 411: rd_state = 13;
  3381  000254  0E0D               	movlw	13
  3382  000256  D7F0               	goto	L11
  3383  000258                     i2l1830:
  3384                           
  3385                           ;Turn_counter.c: 415: temp_buf |= (unsigned int)rx_byte;
  3386  000258  5026               	movf	_rx_byte,w,c	;volatile
  3387  00025A  121D               	iorwf	_temp_buf,f,c	;volatile
  3388                           
  3389                           ;Turn_counter.c: 417: if(reg_addr_flag)
  3390  00025C  5023               	movf	_reg_addr_flag,w,c	;volatile
  3391  00025E  E010               	bz	i2l1844
  3392                           
  3393                           ;Turn_counter.c: 418: {
  3394                           ;Turn_counter.c: 419: modbus_reg_addr = temp_buf;
  3395  000260  C01D  F013         	movff	_temp_buf,_modbus_reg_addr	;volatile
  3396  000264  C01E  F014         	movff	_temp_buf+1,_modbus_reg_addr+1	;volatile
  3397                           
  3398                           ;Turn_counter.c: 420: reg_addr_flag = 0;
  3399  000268  6A23               	clrf	_reg_addr_flag,c	;volatile
  3400                           
  3401                           ;Turn_counter.c: 421: if(reg_wr_flag) reg_qty_flag = 0;
  3402  00026A  5025               	movf	_reg_wr_flag,w,c	;volatile
  3403  00026C  E002               	bz	i2l1840
  3404  00026E  6A24               	clrf	_reg_qty_flag,c	;volatile
  3405  000270  D002               	goto	i2l253
  3406  000272                     i2l1840:
  3407                           
  3408                           ;Turn_counter.c: 422: else reg_qty_flag = 1;
  3409  000272  0E01               	movlw	1
  3410  000274  6E24               	movwf	_reg_qty_flag,c	;volatile
  3411  000276                     i2l253:
  3412                           
  3413                           ;Turn_counter.c: 423: rd_state = 12;
  3414  000276  0E0C               	movlw	12
  3415  000278  6E48               	movwf	_rd_state,c	;volatile
  3416                           
  3417                           ;Turn_counter.c: 424: temp_buf = 0;
  3418  00027A  6A1D               	clrf	_temp_buf,c	;volatile
  3419  00027C  6A1E               	clrf	_temp_buf+1,c	;volatile
  3420                           
  3421                           ;Turn_counter.c: 425: break;
  3422  00027E  D070               	goto	i2l1902
  3423  000280                     i2l1844:
  3424                           
  3425                           ;Turn_counter.c: 426: }
  3426                           ;Turn_counter.c: 428: if(reg_wr_flag)
  3427  000280  5025               	movf	_reg_wr_flag,w,c	;volatile
  3428  000282  E009               	bz	i2l1850
  3429                           
  3430                           ;Turn_counter.c: 429: {
  3431                           ;Turn_counter.c: 430: reg_wr_data = temp_buf;
  3432  000284  C01D  F015         	movff	_temp_buf,_reg_wr_data	;volatile
  3433  000288  C01E  F016         	movff	_temp_buf+1,_reg_wr_data+1	;volatile
  3434                           
  3435                           ;Turn_counter.c: 431: reg_wr_flag = 0;
  3436  00028C  6A25               	clrf	_reg_wr_flag,c	;volatile
  3437                           
  3438                           ;Turn_counter.c: 432: get_crc_flag = 0x06;
  3439  00028E  0E06               	movlw	6
  3440  000290  6E20               	movwf	_get_crc_flag,c	;volatile
  3441  000292                     L13:
  3442                           
  3443                           ;Turn_counter.c: 433: rd_state = 12;
  3444  000292  0E0C               	movlw	12
  3445  000294  D7D1               	goto	L11
  3446  000296                     i2l1850:
  3447                           
  3448                           ;Turn_counter.c: 435: }
  3449                           ;Turn_counter.c: 437: if(reg_qty_flag)
  3450  000296  5024               	movf	_reg_qty_flag,w,c	;volatile
  3451  000298  E011               	bz	i2l1862
  3452                           
  3453                           ;Turn_counter.c: 438: {
  3454                           ;Turn_counter.c: 439: if(temp_buf < 125)
  3455  00029A  0E7D               	movlw	125
  3456  00029C  5C1D               	subwf	_temp_buf,w,c	;volatile
  3457  00029E  0E00               	movlw	0
  3458  0002A0  581E               	subwfb	_temp_buf+1,w,c	;volatile
  3459  0002A2  E208               	bc	i2l1858
  3460                           
  3461                           ;Turn_counter.c: 440: {
  3462                           ;Turn_counter.c: 441: regs2read = temp_buf;
  3463  0002A4  C01D  F017         	movff	_temp_buf,_regs2read	;volatile
  3464  0002A8  C01E  F018         	movff	_temp_buf+1,_regs2read+1	;volatile
  3465                           
  3466                           ;Turn_counter.c: 442: get_crc_flag = 0x03;
  3467  0002AC  0E03               	movlw	3
  3468  0002AE  6E20               	movwf	_get_crc_flag,c	;volatile
  3469                           
  3470                           ;Turn_counter.c: 443: rd_state = 12;
  3471  0002B0  0E0C               	movlw	12
  3472  0002B2  D001               	goto	L9
  3473  0002B4                     i2l1858:
  3474                           
  3475                           ;Turn_counter.c: 446: else rd_state = 10;
  3476  0002B4  0E0A               	movlw	10
  3477  0002B6                     L9:
  3478  0002B6  6E48               	movwf	_rd_state,c	;volatile
  3479                           
  3480                           ;Turn_counter.c: 447: reg_qty_flag = 0;
  3481  0002B8  6A24               	clrf	_reg_qty_flag,c	;volatile
  3482                           
  3483                           ;Turn_counter.c: 448: break;
  3484  0002BA  D052               	goto	i2l1902
  3485  0002BC                     i2l1862:
  3486                           
  3487                           ;Turn_counter.c: 449: }
  3488                           ;Turn_counter.c: 451: if(get_crc_flag == 0x03)
  3489  0002BC  5020               	movf	_get_crc_flag,w,c	;volatile
  3490  0002BE  0A03               	xorlw	3
  3491  0002C0  E11F               	bnz	i2l1880
  3492                           
  3493                           ;Turn_counter.c: 452: {
  3494                           ;Turn_counter.c: 453: crc_buf[0] = dev_id;
  3495  0002C2  C047  F200         	movff	_dev_id,_crc_buf	;volatile
  3496                           
  3497                           ;Turn_counter.c: 454: crc_buf[1] = 0x03;
  3498  0002C6  0E03               	movlw	3
  3499                           
  3500                           ;Turn_counter.c: 455: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  3501                           
  3502                           ; BSR set to: 2
  3503                           ;Turn_counter.c: 456: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  3504  0002C8  D850               	call	PL6	;call to abstracted procedure
  3505                           
  3506                           ;Turn_counter.c: 457: crc_buf[4] = (unsigned char)(regs2read >> 8);
  3507  0002CA  C018  F036         	movff	_regs2read+1,??i2_modbus_rx_sm	;volatile
  3508  0002CE  C036  F037         	movff	??i2_modbus_rx_sm,??i2_modbus_rx_sm+1
  3509  0002D2  6A38               	clrf	(??i2_modbus_rx_sm+2)& (0+255),c
  3510  0002D4  5037               	movf	??i2_modbus_rx_sm+1,w,c
  3511  0002D6  6F04               	movwf	(_crc_buf+4)& (0+255),b	;volatile
  3512                           
  3513                           ; BSR set to: 2
  3514                           ;Turn_counter.c: 458: crc_buf[5] = (unsigned char)(regs2read & 0x00ff);
  3515  0002D8  C017  F205         	movff	_regs2read,_crc_buf+5	;volatile
  3516                           
  3517                           ; BSR set to: 2
  3518                           ;Turn_counter.c: 459: CRC16 = modbus_CRC16(crc_buf,6);
  3519  0002DC  D852               	call	PL14	;call to abstracted procedure
  3520  0002DE  ECA8  F003         	call	i2_modbus_CRC16	;wreg free
  3521  0002E2  C028  F00B         	movff	?i2_modbus_CRC16,_CRC16	;volatile
  3522  0002E6  C029  F00C         	movff	?i2_modbus_CRC16+1,_CRC16+1	;volatile
  3523                           
  3524                           ; BSR set to: 2
  3525                           ;Turn_counter.c: 460: if(CRC16 == temp_buf)
  3526  0002EA  501E               	movf	_temp_buf+1,w,c	;volatile
  3527  0002EC  180C               	xorwf	_CRC16+1,w,c	;volatile
  3528  0002EE  E102               	bnz	i2u91_45
  3529  0002F0  501D               	movf	_temp_buf,w,c	;volatile
  3530  0002F2  180B               	xorwf	_CRC16,w,c	;volatile
  3531  0002F4                     i2u91_45:
  3532  0002F4  E102               	bnz	i2l259
  3533                           
  3534                           ; BSR set to: 2
  3535                           ;Turn_counter.c: 461: answer = 0x03;
  3536  0002F6  0E03               	movlw	3
  3537  0002F8  6E1F               	movwf	_answer,c	;volatile
  3538  0002FA                     i2l259:
  3539                           
  3540                           ; BSR set to: 2
  3541                           ;Turn_counter.c: 463: rd_state = 10;
  3542  0002FA  0E0A               	movlw	10
  3543  0002FC  6E48               	movwf	_rd_state,c	;volatile
  3544                           
  3545                           ; BSR set to: 2
  3546                           ;Turn_counter.c: 464: get_crc_flag = 0;
  3547  0002FE  6A20               	clrf	_get_crc_flag,c	;volatile
  3548  000300                     i2l1880:
  3549                           
  3550                           ;Turn_counter.c: 465: }
  3551                           ;Turn_counter.c: 467: if(get_crc_flag == 0x06)
  3552  000300  5020               	movf	_get_crc_flag,w,c	;volatile
  3553  000302  0A06               	xorlw	6
  3554  000304  E12D               	bnz	i2l1902
  3555                           
  3556                           ;Turn_counter.c: 468: {
  3557                           ;Turn_counter.c: 469: crc_buf[0] = dev_id;
  3558  000306  C047  F200         	movff	_dev_id,_crc_buf	;volatile
  3559                           
  3560                           ;Turn_counter.c: 470: crc_buf[1] = 0x06;
  3561  00030A  0E06               	movlw	6
  3562                           
  3563                           ;Turn_counter.c: 471: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  3564                           
  3565                           ; BSR set to: 2
  3566                           ;Turn_counter.c: 472: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  3567  00030C  D82E               	call	PL6	;call to abstracted procedure
  3568                           
  3569                           ;Turn_counter.c: 473: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  3570  00030E  C016  F036         	movff	_reg_wr_data+1,??i2_modbus_rx_sm	;volatile
  3571  000312  C036  F037         	movff	??i2_modbus_rx_sm,??i2_modbus_rx_sm+1
  3572  000316  6A38               	clrf	(??i2_modbus_rx_sm+2)& (0+255),c
  3573  000318  5037               	movf	??i2_modbus_rx_sm+1,w,c
  3574  00031A  6F04               	movwf	(_crc_buf+4)& (0+255),b	;volatile
  3575                           
  3576                           ; BSR set to: 2
  3577                           ;Turn_counter.c: 474: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  3578  00031C  C015  F205         	movff	_reg_wr_data,_crc_buf+5	;volatile
  3579                           
  3580                           ; BSR set to: 2
  3581                           ;Turn_counter.c: 476: CRC16 = modbus_CRC16(crc_buf,6);
  3582  000320  D830               	call	PL14	;call to abstracted procedure
  3583  000322  ECA8  F003         	call	i2_modbus_CRC16	;wreg free
  3584  000326  C028  F00B         	movff	?i2_modbus_CRC16,_CRC16	;volatile
  3585  00032A  C029  F00C         	movff	?i2_modbus_CRC16+1,_CRC16+1	;volatile
  3586                           
  3587                           ; BSR set to: 2
  3588                           ;Turn_counter.c: 477: if(CRC16 == temp_buf)
  3589  00032E  501E               	movf	_temp_buf+1,w,c	;volatile
  3590  000330  180C               	xorwf	_CRC16+1,w,c	;volatile
  3591  000332  E102               	bnz	i2u93_45
  3592  000334  501D               	movf	_temp_buf,w,c	;volatile
  3593  000336  180B               	xorwf	_CRC16,w,c	;volatile
  3594  000338                     i2u93_45:
  3595  000338  E102               	bnz	i2l1896
  3596                           
  3597                           ; BSR set to: 2
  3598                           ;Turn_counter.c: 478: answer = 0x06;
  3599  00033A  0E06               	movlw	6
  3600  00033C  6E1F               	movwf	_answer,c	;volatile
  3601  00033E                     i2l1896:
  3602                           
  3603                           ; BSR set to: 2
  3604                           ;Turn_counter.c: 480: get_crc_flag = 0;
  3605  00033E  6A20               	clrf	_get_crc_flag,c	;volatile
  3606  000340                     i2l1898:
  3607  000340  0E0A               	movlw	10
  3608  000342  D77A               	goto	L11
  3609  000344                     i2l1900:
  3610  000344  5048               	movf	_rd_state,w,c	;volatile
  3611                           
  3612                           ; Switch size 1, requested type "space"
  3613                           ; Number of cases is 4, Range of values is 10 to 13
  3614                           ; switch strategies available:
  3615                           ; Name         Instructions Cycles
  3616                           ; simple_byte           13     7 (average)
  3617                           ;	Chosen strategy is simple_byte
  3618  000346  0A0A               	xorlw	10	; case 10
  3619  000348  E101 D762          	bz	i2l1804
  3620  00034C  0A01               	xorlw	1	; case 11
  3621  00034E  E101 D775          	bz	i2l1826
  3622  000352  0A07               	xorlw	7	; case 12
  3623  000354  E101 D778          	bz	i2l249
  3624  000358  0A01               	xorlw	1	; case 13
  3625  00035A  E101 D77D          	bz	i2l1830
  3626  00035E  D7F0               	goto	i2l1898
  3627  000360                     i2l1902:
  3628  000360  5027               	movf	_wr_ptr,w,c
  3629  000362  5C22               	subwf	_rd_ptr,w,c
  3630  000364  B0D8               	btfsc	status,0,c
  3631  000366  0012               	return	
  3632  000368  D74F               	goto	i2l1802
  3633  00036A                     __end_ofi2_modbus_rx_sm:
  3634                           	opt stack 0
  3635  00036A                     PL6:
  3636                           	opt stack 25
  3637  00036A  0102               	movlb	2	; () banked
  3638  00036C  6F01               	movwf	(_crc_buf+1)& (0+255),b	;volatile
  3639  00036E  C014  F036         	movff	_modbus_reg_addr+1,??i2_modbus_rx_sm	;volatile
  3640  000372  C036  F037         	movff	??i2_modbus_rx_sm,??i2_modbus_rx_sm+1
  3641  000376  6A38               	clrf	(??i2_modbus_rx_sm+2)& (0+255),c
  3642  000378  5037               	movf	??i2_modbus_rx_sm+1,w,c
  3643  00037A  6F02               	movwf	(_crc_buf+2)& (0+255),b	;volatile
  3644  00037C  C013  F203         	movff	_modbus_reg_addr,_crc_buf+3	;volatile
  3645  000380  0012               	return	
  3646  000382                     __end_ofPL6:
  3647                           	opt stack 0
  3648  000382                     PL14:
  3649                           	opt stack 25
  3650  000382  0E02               	movlw	high _crc_buf	;volatile
  3651  000384  6E29               	movwf	i2modbus_CRC16@buf+1,c
  3652  000386  0E00               	movlw	low _crc_buf	;volatile
  3653  000388  6E28               	movwf	i2modbus_CRC16@buf,c
  3654  00038A  0E06               	movlw	6
  3655  00038C  6E2A               	movwf	i2modbus_CRC16@len,c
  3656  00038E  0C06               	retlw	6
  3657  000390                     __end_ofPL14:
  3658                           	opt stack 0
  3659                           tblptru	equ	0xFF8
  3660                           tblptrh	equ	0xFF7
  3661                           tblptrl	equ	0xFF6
  3662                           tablat	equ	0xFF5
  3663                           prodl	equ	0xFF3
  3664                           intcon	equ	0xFF2
  3665                           intcon2	equ	0xFF1
  3666                           intcon3	equ	0xFF0
  3667                           postinc0	equ	0xFEE
  3668                           wreg	equ	0xFE8
  3669                           indf1	equ	0xFE7
  3670                           postinc1	equ	0xFE6
  3671                           postdec1	equ	0xFE5
  3672                           fsr1h	equ	0xFE2
  3673                           fsr1l	equ	0xFE1
  3674                           indf2	equ	0xFDF
  3675                           postinc2	equ	0xFDE
  3676                           postdec2	equ	0xFDD
  3677                           fsr2h	equ	0xFDA
  3678                           fsr2l	equ	0xFD9
  3679                           status	equ	0xFD8
  3680                           
  3681 ;; *************** function i2_modbus_CRC16 *****************
  3682 ;; Defined at:
  3683 ;;		line 267 in file "Turn_counter.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;  buf             2    0[COMRAM] PTR unsigned char 
  3686 ;;		 -> crc_buf(250), 
  3687 ;;  len             1    2[COMRAM] unsigned char 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  modbus_CRC16    2   12[COMRAM] unsigned int 
  3690 ;;  modbus_CRC16    1   11[COMRAM] unsigned char 
  3691 ;;  modbus_CRC16    1   10[COMRAM] unsigned char 
  3692 ;; Return value:  Size  Location     Type
  3693 ;;                  2    0[COMRAM] unsigned int 
  3694 ;; Registers used:
  3695 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3696 ;; Tracked objects:
  3697 ;;		On entry : F/2
  3698 ;;		On exit  : F/2
  3699 ;;		Unchanged: F/0
  3700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3701 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3702 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3703 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3704 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3705 ;;Total ram usage:       14 bytes
  3706 ;; Hardware stack levels used:    1
  3707 ;; This function calls:
  3708 ;;		Nothing
  3709 ;; This function is called by:
  3710 ;;		i2_modbus_rx_sm
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text17
  3715  000750                     __ptext17:
  3716                           	opt stack 0
  3717  000750                     i2_modbus_CRC16:
  3718                           	opt stack 25
  3719                           
  3720                           ; BSR set to: 2
  3721                           ;Turn_counter.c: 268: unsigned int crc = 0xFFFF;
  3722                           
  3723                           ;incstack = 0
  3724  000750  6834               	setf	i2modbus_CRC16@crc,c
  3725  000752  6835               	setf	i2modbus_CRC16@crc+1,c
  3726                           
  3727                           ;Turn_counter.c: 270: for (unsigned char pos = 0; pos < len; pos++)
  3728  000754  6A32               	clrf	i2modbus_CRC16@pos,c
  3729  000756  D01B               	goto	i2l1666
  3730  000758                     i2l1648:
  3731                           
  3732                           ; BSR set to: 2
  3733                           ;Turn_counter.c: 271: {
  3734                           ;Turn_counter.c: 272: crc ^= (unsigned int)buf[pos];
  3735  000758  5032               	movf	i2modbus_CRC16@pos,w,c
  3736  00075A  2428               	addwf	i2modbus_CRC16@buf,w,c
  3737  00075C  6ED9               	movwf	fsr2l,c
  3738  00075E  0E00               	movlw	0
  3739  000760  2029               	addwfc	i2modbus_CRC16@buf+1,w,c
  3740  000762  6EDA               	movwf	fsr2h,c
  3741  000764  50DF               	movf	indf2,w,c
  3742  000766  1A34               	xorwf	i2modbus_CRC16@crc,f,c
  3743                           
  3744                           ; BSR set to: 2
  3745                           ;Turn_counter.c: 273: for (unsigned char i = 8; i != 0; i--)
  3746  000768  0E08               	movlw	8
  3747  00076A  6E33               	movwf	i2modbus_CRC16@i,c
  3748  00076C                     i2l216:
  3749                           
  3750                           ; BSR set to: 2
  3751                           ;Turn_counter.c: 274: {
  3752                           ;Turn_counter.c: 275: if ((crc & 0x0001) != 0)
  3753  00076C  A034               	btfss	i2modbus_CRC16@crc,0,c
  3754  00076E  D008               	goto	i2l1660
  3755                           
  3756                           ; BSR set to: 2
  3757                           ;Turn_counter.c: 276: {
  3758                           ;Turn_counter.c: 277: crc >>= 1;
  3759  000770  90D8               	bcf	status,0,c
  3760  000772  3235               	rrcf	i2modbus_CRC16@crc+1,f,c
  3761  000774  3234               	rrcf	i2modbus_CRC16@crc,f,c
  3762                           
  3763                           ; BSR set to: 2
  3764                           ;Turn_counter.c: 278: crc ^= 0xA001;
  3765  000776  0E01               	movlw	1
  3766  000778  1A34               	xorwf	i2modbus_CRC16@crc,f,c
  3767  00077A  0EA0               	movlw	160
  3768  00077C  1A35               	xorwf	i2modbus_CRC16@crc+1,f,c
  3769                           
  3770                           ;Turn_counter.c: 279: }
  3771  00077E  D003               	goto	i2l219
  3772  000780                     i2l1660:
  3773                           
  3774                           ; BSR set to: 2
  3775                           ;Turn_counter.c: 280: else
  3776                           ;Turn_counter.c: 281: crc >>= 1;
  3777  000780  90D8               	bcf	status,0,c
  3778  000782  3235               	rrcf	i2modbus_CRC16@crc+1,f,c
  3779  000784  3234               	rrcf	i2modbus_CRC16@crc,f,c
  3780  000786                     i2l219:
  3781                           
  3782                           ; BSR set to: 2
  3783  000786  0633               	decf	i2modbus_CRC16@i,f,c
  3784                           
  3785                           ; BSR set to: 2
  3786  000788  6633               	tstfsz	i2modbus_CRC16@i,c
  3787  00078A  D7F0               	goto	i2l216
  3788                           
  3789                           ; BSR set to: 2
  3790  00078C  2A32               	incf	i2modbus_CRC16@pos,f,c
  3791  00078E                     i2l1666:
  3792                           
  3793                           ; BSR set to: 2
  3794  00078E  502A               	movf	i2modbus_CRC16@len,w,c
  3795  000790  5C32               	subwf	i2modbus_CRC16@pos,w,c
  3796  000792  E3E2               	bnc	i2l1648
  3797                           
  3798                           ; BSR set to: 2
  3799                           ;Turn_counter.c: 282: }
  3800                           ;Turn_counter.c: 283: }
  3801                           ;Turn_counter.c: 288: crc = ((crc<<8)&0xff00)|((crc>>8)&0x00ff);
  3802  000794  6A2B               	clrf	??i2_modbus_CRC16& (0+255),c
  3803  000796  682C               	setf	(??i2_modbus_CRC16+1)& (0+255),c
  3804  000798  5034               	movf	i2modbus_CRC16@crc,w,c
  3805  00079A  6E2E               	movwf	(??i2_modbus_CRC16+3)& (0+255),c
  3806  00079C  6A2D               	clrf	(??i2_modbus_CRC16+2)& (0+255),c
  3807  00079E  502B               	movf	??i2_modbus_CRC16,w,c
  3808  0007A0  162D               	andwf	??i2_modbus_CRC16+2,f,c
  3809  0007A2  502C               	movf	??i2_modbus_CRC16+1,w,c
  3810  0007A4  162E               	andwf	??i2_modbus_CRC16+3,f,c
  3811  0007A6  C035  F02F         	movff	i2modbus_CRC16@crc+1,??i2_modbus_CRC16+4
  3812  0007AA  C02F  F030         	movff	??i2_modbus_CRC16+4,??i2_modbus_CRC16+5
  3813  0007AE  6A31               	clrf	(??i2_modbus_CRC16+6)& (0+255),c
  3814  0007B0  5030               	movf	??i2_modbus_CRC16+5,w,c
  3815  0007B2  102D               	iorwf	??i2_modbus_CRC16+2,w,c
  3816  0007B4  6E34               	movwf	i2modbus_CRC16@crc,c
  3817  0007B6  502E               	movf	??i2_modbus_CRC16+3,w,c
  3818  0007B8  6E35               	movwf	i2modbus_CRC16@crc+1,c
  3819                           
  3820                           ; BSR set to: 2
  3821                           ;Turn_counter.c: 290: return crc;
  3822  0007BA  C034  F028         	movff	i2modbus_CRC16@crc,?i2_modbus_CRC16
  3823  0007BE  C035  F029         	movff	i2modbus_CRC16@crc+1,?i2_modbus_CRC16+1
  3824                           
  3825                           ; BSR set to: 2
  3826  0007C2  0012               	return	
  3827  0007C4                     __end_ofi2_modbus_CRC16:
  3828                           	opt stack 0
  3829                           tblptru	equ	0xFF8
  3830                           tblptrh	equ	0xFF7
  3831                           tblptrl	equ	0xFF6
  3832                           tablat	equ	0xFF5
  3833                           prodl	equ	0xFF3
  3834                           intcon	equ	0xFF2
  3835                           intcon2	equ	0xFF1
  3836                           intcon3	equ	0xFF0
  3837                           postinc0	equ	0xFEE
  3838                           wreg	equ	0xFE8
  3839                           indf1	equ	0xFE7
  3840                           postinc1	equ	0xFE6
  3841                           postdec1	equ	0xFE5
  3842                           fsr1h	equ	0xFE2
  3843                           fsr1l	equ	0xFE1
  3844                           indf2	equ	0xFDF
  3845                           postinc2	equ	0xFDE
  3846                           postdec2	equ	0xFDD
  3847                           fsr2h	equ	0xFDA
  3848                           fsr2l	equ	0xFD9
  3849                           status	equ	0xFD8
  3850                           
  3851 ;; *************** function i2_get_rx_ch *****************
  3852 ;; Defined at:
  3853 ;;		line 241 in file "Turn_counter.c"
  3854 ;; Parameters:    Size  Location     Type
  3855 ;;		None
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  get_rx_ch       1    1[COMRAM] unsigned char 
  3858 ;; Return value:  Size  Location     Type
  3859 ;;                  1    wreg      unsigned char 
  3860 ;; Registers used:
  3861 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3862 ;; Tracked objects:
  3863 ;;		On entry : 0/0
  3864 ;;		On exit  : 0/0
  3865 ;;		Unchanged: 0/0
  3866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3868 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3869 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3871 ;;Total ram usage:        2 bytes
  3872 ;; Hardware stack levels used:    1
  3873 ;; This function calls:
  3874 ;;		Nothing
  3875 ;; This function is called by:
  3876 ;;		i2_modbus_rx_sm
  3877 ;; This function uses a non-reentrant model
  3878 ;;
  3879                           
  3880                           	psect	text18
  3881  0008B8                     __ptext18:
  3882                           	opt stack 0
  3883  0008B8                     i2_get_rx_ch:
  3884                           	opt stack 25
  3885                           
  3886                           ;Turn_counter.c: 243: unsigned char rch;
  3887                           ;Turn_counter.c: 245: if (rd_ptr < wr_ptr)
  3888                           
  3889                           ; BSR set to: 2
  3890                           ;incstack = 0
  3891  0008B8  5027               	movf	_wr_ptr,w,c
  3892  0008BA  5C22               	subwf	_rd_ptr,w,c
  3893  0008BC  E20C               	bc	i2l1636
  3894                           
  3895                           ;Turn_counter.c: 246: {
  3896                           ;Turn_counter.c: 247: rd_ptr++;
  3897  0008BE  2A22               	incf	_rd_ptr,f,c
  3898                           
  3899                           ;Turn_counter.c: 248: rch = rx_buf[rd_ptr & 0x0f];
  3900  0008C0  C022  F028         	movff	_rd_ptr,??i2_get_rx_ch
  3901  0008C4  0E0F               	movlw	15
  3902  0008C6  1628               	andwf	??i2_get_rx_ch,f,c
  3903  0008C8  5028               	movf	??i2_get_rx_ch,w,c
  3904  0008CA  0100               	movlb	0	; () banked
  3905  0008CC  0F74               	addlw	low _rx_buf
  3906  0008CE  6ED9               	movwf	fsr2l,c
  3907  0008D0  6ADA               	clrf	fsr2h,c
  3908  0008D2  50DF               	movf	indf2,w,c
  3909  0008D4  D001               	goto	L14
  3910  0008D6                     i2l1636:
  3911                           
  3912                           ;Turn_counter.c: 250: else rch = 'x';
  3913  0008D6  0E78               	movlw	120
  3914  0008D8                     L14:
  3915  0008D8  6E29               	movwf	i2get_rx_ch@rch,c
  3916                           
  3917                           ;Turn_counter.c: 256: if ((wr_ptr==rd_ptr) && (wr_ptr > 16))
  3918  0008DA  5022               	movf	_rd_ptr,w,c
  3919  0008DC  6227               	cpfseq	_wr_ptr,c
  3920  0008DE  D005               	goto	i2l1642
  3921  0008E0  0E10               	movlw	16
  3922  0008E2  6427               	cpfsgt	_wr_ptr,c
  3923  0008E4  D002               	goto	i2l1642
  3924                           
  3925                           ;Turn_counter.c: 257: {
  3926                           ;Turn_counter.c: 258: wr_ptr=0;
  3927  0008E6  6A27               	clrf	_wr_ptr,c
  3928                           
  3929                           ;Turn_counter.c: 259: rd_ptr=0;
  3930  0008E8  6A22               	clrf	_rd_ptr,c
  3931  0008EA                     i2l1642:
  3932                           
  3933                           ;Turn_counter.c: 261: }
  3934                           ;Turn_counter.c: 264: return rch;
  3935  0008EA  5029               	movf	i2get_rx_ch@rch,w,c
  3936  0008EC  0012               	return	
  3937  0008EE                     __end_ofi2_get_rx_ch:
  3938                           	opt stack 0
  3939  0000                     tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           prodl	equ	0xFF3
  3944                           intcon	equ	0xFF2
  3945                           intcon2	equ	0xFF1
  3946                           intcon3	equ	0xFF0
  3947                           postinc0	equ	0xFEE
  3948                           wreg	equ	0xFE8
  3949                           indf1	equ	0xFE7
  3950                           postinc1	equ	0xFE6
  3951                           postdec1	equ	0xFE5
  3952                           fsr1h	equ	0xFE2
  3953                           fsr1l	equ	0xFE1
  3954                           indf2	equ	0xFDF
  3955                           postinc2	equ	0xFDE
  3956                           postdec2	equ	0xFDD
  3957                           fsr2h	equ	0xFDA
  3958                           fsr2l	equ	0xFD9
  3959                           status	equ	0xFD8
  3960                           tblptru	equ	0xFF8
  3961                           tblptrh	equ	0xFF7
  3962                           tblptrl	equ	0xFF6
  3963                           tablat	equ	0xFF5
  3964                           prodl	equ	0xFF3
  3965                           intcon	equ	0xFF2
  3966                           intcon2	equ	0xFF1
  3967                           intcon3	equ	0xFF0
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           indf1	equ	0xFE7
  3971                           postinc1	equ	0xFE6
  3972                           postdec1	equ	0xFE5
  3973                           fsr1h	equ	0xFE2
  3974                           fsr1l	equ	0xFE1
  3975                           indf2	equ	0xFDF
  3976                           postinc2	equ	0xFDE
  3977                           postdec2	equ	0xFDD
  3978                           fsr2h	equ	0xFDA
  3979                           fsr2l	equ	0xFD9
  3980                           status	equ	0xFD8
  3981                           
  3982                           	psect	rparam
  3983  0000                     tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           prodl	equ	0xFF3
  3988                           intcon	equ	0xFF2
  3989                           intcon2	equ	0xFF1
  3990                           intcon3	equ	0xFF0
  3991                           postinc0	equ	0xFEE
  3992                           wreg	equ	0xFE8
  3993                           indf1	equ	0xFE7
  3994                           postinc1	equ	0xFE6
  3995                           postdec1	equ	0xFE5
  3996                           fsr1h	equ	0xFE2
  3997                           fsr1l	equ	0xFE1
  3998                           indf2	equ	0xFDF
  3999                           postinc2	equ	0xFDE
  4000                           postdec2	equ	0xFDD
  4001                           fsr2h	equ	0xFDA
  4002                           fsr2l	equ	0xFD9
  4003                           status	equ	0xFD8
  4004                           tblptru	equ	0xFF8
  4005                           tblptrh	equ	0xFF7
  4006                           tblptrl	equ	0xFF6
  4007                           tablat	equ	0xFF5
  4008                           prodl	equ	0xFF3
  4009                           intcon	equ	0xFF2
  4010                           intcon2	equ	0xFF1
  4011                           intcon3	equ	0xFF0
  4012                           postinc0	equ	0xFEE
  4013                           wreg	equ	0xFE8
  4014                           indf1	equ	0xFE7
  4015                           postinc1	equ	0xFE6
  4016                           postdec1	equ	0xFE5
  4017                           fsr1h	equ	0xFE2
  4018                           fsr1l	equ	0xFE1
  4019                           indf2	equ	0xFDF
  4020                           postinc2	equ	0xFDE
  4021                           postdec2	equ	0xFDD
  4022                           fsr2h	equ	0xFDA
  4023                           fsr2l	equ	0xFD9
  4024                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         555
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     27      74
    BANK0           160     20      38
    BANK1           256      0     250
    BANK2           256      0     250
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    modbus_CRC16@buf	PTR unsigned char  size(2) Largest target is 250
		 -> crc_buf(BANK2[250]), 


Critical Paths under _main in COMRAM

    _modbus_rx_sm->_modbus_CRC16
    _modbus_wsr_answer->_modbus_CRC16
    _modbus_rhr_answer->_modbus_CRC16

Critical Paths under _ISR in COMRAM

    _ISR->i2_modbus_rx_sm
    i2_modbus_rx_sm->i2_modbus_CRC16

Critical Paths under _main in BANK0

    _main->_modbus_poll
    _modbus_rx_sm->_modbus_CRC16
    _modbus_poll->_modbus_rhr_answer
    _modbus_wsr_answer->_modbus_CRC16
    _modbus_rhr_answer->_modbus_CRC16

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    3273
                                             16 BANK0      4     4      0
                           _ADC_Init
                          _GPIO_init
                     _Hold_reg_Inint
                     _Interrupt_Init
                        _Timer1_init
                          _UART_Init
                        _modbus_poll
                       _modbus_rx_sm
 ---------------------------------------------------------------------------------
 (1) _modbus_rx_sm                                         3     3      0     993
                                              7 BANK0      3     3      0
                          _get_rx_ch
                       _modbus_CRC16
 ---------------------------------------------------------------------------------
 (2) _get_rx_ch                                            2     2      0      37
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _modbus_poll                                          2     2      0    2181
                                             14 BANK0      2     2      0
                     _modbus_refresh
                  _modbus_rhr_answer
                  _modbus_wsr_answer
 ---------------------------------------------------------------------------------
 (2) _modbus_wsr_answer                                    3     3      0     987
                                              7 BANK0      3     3      0
                       _modbus_CRC16
                      _uart_send_hex
 ---------------------------------------------------------------------------------
 (2) _modbus_rhr_answer                                    7     7      0    1132
                                              7 BANK0      7     7      0
                       _modbus_CRC16
                      _uart_send_hex
 ---------------------------------------------------------------------------------
 (3) _uart_send_hex                                        1     1      0      31
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _modbus_CRC16                                        14    11      3     956
                                             20 COMRAM     7     4      3
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _modbus_refresh                                       3     3      0      62
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Hold_reg_Inint                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPIO_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  3     3      0     358
                                             17 COMRAM     3     3      0
                     i2_modbus_rx_sm
 ---------------------------------------------------------------------------------
 (5) i2_modbus_rx_sm                                       3     3      0     358
                                             14 COMRAM     3     3      0
                        i2_get_rx_ch
                     i2_modbus_CRC16
 ---------------------------------------------------------------------------------
 (6) i2_modbus_CRC16                                      14    11      3     334
                                              0 COMRAM    14    11      3
 ---------------------------------------------------------------------------------
 (6) i2_get_rx_ch                                          2     2      0      24
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _GPIO_init
   _Hold_reg_Inint
   _Interrupt_Init
   _Timer1_init
   _UART_Init
   _modbus_poll
     _modbus_refresh
     _modbus_rhr_answer
       _modbus_CRC16
       _uart_send_hex
     _modbus_wsr_answer
       _modbus_CRC16
       _uart_send_hex
   _modbus_rx_sm
     _get_rx_ch
     _modbus_CRC16

 _ISR (ROOT)
   i2_modbus_rx_sm
     i2_get_rx_ch
     i2_modbus_CRC16

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      FA      10       97.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0      FA       8       97.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     14      26       5       23.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     1B      4A       1       77.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     264       6        0.0%
DATA                 0      0     264       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Mar 23 17:28:08 2018

          ??_Interrupt_Init 003C      __end_ofi2_modbus_rx_sm 036A                          PL2 01CC  
                        PL4 04BC                          PL6 036A                          PL8 01E8  
               __CFG_BORV$3 000000                  _TXREG1bits 000FAD      __end_of_modbus_refresh 065C  
              __CFG_CP0$OFF 000000                __CFG_CP1$OFF 000000                __CFG_CP2$OFF 000000  
              __CFG_CP3$OFF 000000                         PL10 01F6                         PL12 04D6  
                       PL14 0382                         PL16 04E4                         l201 0624  
                       l202 062E                         l216 06F6                         l219 0710  
                       l324 06AC                         l253 00EC                         l182 0982  
                       l249 00BE                         l259 0168                         l197 0652  
                       l199 061A                __CFG_CPB$OFF 000000                __CFG_CPD$OFF 000000  
                       _ISR 0008                         wreg 000FE8                  _TXSTA1bits 000FAC  
           ??_uart_send_hex 003C                        ?_ISR 0028                        l2006 06E2  
                      l2024 0718                        l2042 0638                        l2018 070A  
                      l2130 045E                        l2114 040C                        l2202 012A  
                      l2036 0612                        l2108 03B2                        l2060 08B4  
                      l2054 08A0                        l2206 0132                        l2136 048A  
                      l2240 01A4                        l2224 016E                        l2152 0090  
                      l2242 01A6                        l2170 00B2                        l2162 00A6  
                      l2146 007E                        l2156 0098                        l2148 0086  
                      l2244 01AA                        l2174 00CE                        l2158 009C  
                      l2246 01C2                        l2334 067A                        l2184 00E8  
                      l2258 07E2                        l2194 010C                        l2188 00F6  
                      u1225 0162                        u1307 0540                        _IOCB 000F5A  
                      u1317 05A6                        u1245 019E                        u1327 043A  
                      u1337 04AE                        u1347 0992                __CFG_WDTPS$1 000000  
            _Hold_reg_Inint 099A                        _main 065C                        fsr1h 000FE2  
                      fsr2h 000FDA             ?i2_modbus_CRC16 0028                        indf1 000FE7  
                      fsr1l 000FE1                        indf2 000FDF                        fsr2l 000FD9  
          __end_of_ADC_Init 0960                        prodl 000FF3                        start 0078  
             __CFG_IESO$OFF 000000               __CFG_FOSC$HS1 000000          __size_of_GPIO_init 002E  
             __CFG_MCLRE$ON 000000                       ??_ISR 0039             ?i2_modbus_rx_sm 0028  
              _BAUDCON1bits 000FA7             ?_modbus_refresh 0028                       ?_main 0028  
               i2_get_rx_ch 08B8                       _EEADR 000F74                       _CRC16 000B  
                     i2l310 0058                       i2l311 005C                       i2l216 076C  
                     i2l313 006E                       i2l219 0786                       i2l253 0276  
                     i2l309 005E                       i2l249 0248                       i2l259 02FA  
                     _TMR0H 000FD7                       _TMR1H 000FCF                       _TMR0L 000FD6  
                     _TMR1L 000FCE               __CFG_WRT0$OFF 000000               __CFG_WRT1$OFF 000000  
             __CFG_WRT2$OFF 000000               __CFG_WRT3$OFF 000000              __CFG_EBTR0$OFF 000000  
            __CFG_FCMEN$OFF 000000              __CFG_EBTR1$OFF 000000              __CFG_EBTR2$OFF 000000  
            __CFG_EBTR3$OFF 000000          __size_of_UART_Init 0022                get_rx_ch@rch 003D  
             __CFG_WRTB$OFF 000000               __CFG_WRTC$OFF 000000               __CFG_WRTD$OFF 000000  
            __CFG_EBTRB$OFF 000000      modbus_refresh@cmd_type 003E          _ADC_current_result 0005  
                     main@i 0072      __end_of_Hold_reg_Inint 09AE              __CFG_BOREN$OFF 000000  
                     tablat 000FF5                       status 000FD8             __initialization 0828  
              ?_modbus_poll 0028                __end_of_main 06DA               modbus_CRC16@i 0040  
                    ??_main 0070               __activetblptr 000002              __CFG_PLLCFG$ON 000000  
            __CFG_RETEN$OFF 000000           __end_of_GPIO_init 091C                      _ADRESH 000FC4  
                    _ADRESL 000FC3                      _EEDATA 000F73                      _EECON2 000F7E  
           ?_Hold_reg_Inint 0028             __CFG_BBSIZ$BB2K 000000                      i2l1642 08EA  
                    i2l1802 0208                      i2l1636 08D6                      i2l1660 0780  
                    i2l1812 0222                      i2l1804 0210                      i2l1900 0344  
                    i2l1830 0258                      i2l1814 0226                      i2l1902 0360  
            __CFG_WDTEN$OFF 000000                      i2l1648 0758                      i2l1840 0272  
                    i2l1808 021A                      i2l1920 002C                      i2l1666 078E  
                    i2l1850 0296                      i2l1826 023C                      i2l1818 0230  
                    i2l1914 001E                      i2l1844 0280                      i2l1924 0044  
                    i2l1862 02BC                      i2l1880 0300                      i2l1858 02B4  
                    i2l1896 033E                      i2l1898 0340                      _RCREG1 000FAE  
                    _SPBRG1 000FAF              __CFG_XINST$OFF 000000               ??_Timer1_init 003C  
         __end_of_UART_Init 093E              __CFG_STVREN$ON 000000                      _dev_id 0047  
                    _answer 001F                      clear_0 082E                      clear_1 083A  
                    clear_2 0846                      clear_3 0852                      _rd_ptr 0022  
                    _rx_buf 0074                      _wr_ptr 0027                __pdataCOMRAM 0043  
                 ?_ADC_Init 0028                      tblptrh 000FF7                      tblptrl 000FF6  
                    tblptru 000FF8                  __accesstop 0060               ?_modbus_CRC16 003C  
   __end_of__initialization 0878           i2modbus_CRC16@crc 0034           i2modbus_CRC16@buf 0028  
         i2modbus_CRC16@len 002A           i2modbus_CRC16@pos 0032              __pcstackCOMRAM 0028  
             ?_modbus_rx_sm 0028                  __end_ofPL2 01E8                  __end_ofPL4 04D6  
                __end_ofPL6 0382                  __end_ofPL8 01F6         __end_of_Timer1_init 09BE  
                _addr_buf_1 000F                  _addr_buf_2 0011                  ??_ADC_Init 003C  
        __size_of_get_rx_ch 0036            ??i2_modbus_CRC16 002B              i2get_rx_ch@rch 0029  
                __pbssBANK0 0074                  __pbssBANK1 0100                  __pbssBANK2 0200  
            ??_modbus_CRC16 0060                  __pnvCOMRAM 0049            ??i2_modbus_rx_sm 0036  
            ??_modbus_rx_sm 0067            ??_modbus_refresh 003C        __size_of_modbus_poll 0064  
              ?i2_get_rx_ch 0028            __CFG_CANMX$PORTC 000000                     i2u91_45 02F4  
                   i2u93_45 0338       __end_of_uart_send_hex 099A           uart_send_hex@temp 003C  
             _reg_addr_flag 0023             __CFG_PWRTEN$OFF 000000                     __Hparam 0000  
        modbus_rhr_answer@i 006B          modbus_rhr_answer@j 006C                     __Lparam 0000  
               _Timer1_init 09AE           __end_of_get_rx_ch 08B8                     __pcinit 0828  
                   __ramtop 0F00                     _crc_buf 0200                     __ptext0 065C  
                   __ptext1 007C                     __ptext2 0882                     __ptext3 07C4  
                   __ptext4 04F2                     __ptext5 0390                     __ptext6 0980  
                   __ptext7 06DA                     __ptext8 05B4                     __ptext9 091C  
                   _led_cnt 0045                   _T0CONbits 000FD5                __size_of_ISR 0070  
                 _T1CONbits 000FCD     __size_of_Interrupt_Init 0020            ??_Hold_reg_Inint 003C  
         __CFG_MSSPMSK$MSK7 000000                     _rx_byte 0026          __CFG_INTOSCSEL$LOW 000000  
      end_of_initialization 0878                   _GPIO_init 08EE                _get_crc_flag 0020  
             __Lmediumconst 0000                     postdec1 000FE5                     postdec2 000FDD  
                   postinc0 000FEE                     postinc1 000FE6                     postinc2 000FDE  
                 _UART_Init 091C        __end_of_modbus_CRC16 0750                   _PORTBbits 000F81  
                 _TRISAbits 000F92                   _TRISBbits 000F93                   _TRISCbits 000F94  
         __size_of_ADC_Init 0022        __end_of_modbus_rx_sm 01CC                  ?_GPIO_init 0028  
                ?_UART_Init 0028               __pidataCOMRAM 09BE        __size_ofi2_get_rx_ch 0036  
               __end_ofPL10 0206                 __end_ofPL12 04E4                 __end_ofPL14 0390  
               __end_ofPL16 04F2         start_initialization 0828             i2modbus_CRC16@i 0033  
               __end_of_ISR 0078             modbus_CRC16@crc 0041             modbus_CRC16@buf 003C  
           modbus_CRC16@len 003E             modbus_CRC16@pos 003F        modbus_rhr_answer@cnt 006D  
            _Interrupt_Init 0960                 __pbssCOMRAM 0001               __pcstackBANK0 0060  
           _ADC_cutoff_null 0009             _ADC_current_dif 0001             _ADC_current_max 0003  
           _ADC_current_min 0043             _ADC_current_rms 0007                 ??_GPIO_init 003C  
                 __pnvBANK0 0084                   _id_change 0021                ?_Timer1_init 0028  
             ??_modbus_poll 006E       __size_of_modbus_CRC16 0076                   __pintcode 0008  
               ??_UART_Init 003C      __end_of_Interrupt_Init 0980                   _get_rx_ch 0882  
         _modbus_rhr_answer 0390       __size_of_modbus_rx_sm 0150                    _ADC_Init 093E  
        ?_modbus_rhr_answer 0028                   _regs2read 0017         ??_modbus_rhr_answer 0067  
              _modbus_CRC16 06DA                    _LATCbits 000F8B                    _PIE1bits 000F9D  
   __size_ofi2_modbus_CRC16 0074                    _PIR1bits 000F9E                    _GO_nDONE 007E11  
                  _RCONbits 000FD0                _modbus_rx_sm 007C      __size_of_uart_send_hex 001A  
 __end_of_modbus_rhr_answer 04BC             ?_Interrupt_Init 0028                  ?_get_rx_ch 0028  
       __end_of_modbus_poll 0828                  _ADCON0bits 000FC2                  _ADCON1bits 000FC1  
                _ADCON2bits 000FC0                _reg_qty_flag 0024     __size_ofi2_modbus_rx_sm 0164  
          __CFG_SOSCSEL$DIG 000000     __size_of_modbus_refresh 00A8                 _INTCON2bits 000FF1  
               _INTCON3bits 000FF0                   copy_data0 086C           _modbus_wsr_answer 04F2  
        ?_modbus_wsr_answer 0028                  _EECON1bits 000F7F                    _V_detect 000D  
                _ANCON0bits 000F5D                  _ANCON1bits 000F5C                    __Hrparam 0000  
                  __Lrparam 0000         ??_modbus_wsr_answer 0067                 _current_max 0049  
 __end_of_modbus_wsr_answer 05B4                    __ptext10 09AE                    __ptext11 0960  
                  __ptext12 099A                    __ptext13 08EE                  _T1GCONbits 000FAA  
                  __ptext14 093E                    __ptext16 0206                    __ptext17 0750  
                  __ptext18 08B8               _uart_send_hex 0980               __size_of_main 007E  
   __size_of_Hold_reg_Inint 0014                    _rd_state 0048            _holding_register 0100  
                  _temp_buf 001D                    _set_zero 0019                 _modbus_poll 07C4  
               _reg_wr_data 0015                 _reg_wr_flag 0025        __size_of_Timer1_init 0010  
__size_of_modbus_rhr_answer 012C                    _sort_tmp 001B               ??i2_get_rx_ch 0028  
               ??_get_rx_ch 003C                  _INTCONbits 000FF2              ?_uart_send_hex 0028  
           _modbus_reg_addr 0013                    intlevel2 0000                _num_of_turns 0084  
                _RCSTA1bits 000FAB              i2_modbus_CRC16 0750              i2_modbus_rx_sm 0206  
            _modbus_refresh 05B4         __end_ofi2_get_rx_ch 08EE  __size_of_modbus_wsr_answer 00C2  
       __CFG_BORPWR$ZPBORMV 000000      __end_ofi2_modbus_CRC16 07C4  
