

Microchip Technology PIC18 STD Macro Assembler V1.42 build -159332390 
                                                                                               Thu Oct 04 10:14:28 2018

Microchip Technology Omniscient Code Generator v1.42 (Standard mode) build 201704130522
     1                           	processor	18F25K80
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	sm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    52  0000                     
    53                           ; Version 1.42
    54                           ; Generated 13/04/2017 GMT
    55                           ; 
    56                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F25K80 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  001A94                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _POT_MAX
    93  001A94  0640               	dw	1600
    94                           
    95                           ;initializer for _POT_MIN
    96  001A96  0190               	dw	400
    97                           
    98                           ;initializer for _CHANGE_MOTOR
    99  001A98  0001               	dw	1
   100                           
   101                           ;initializer for _dev_id
   102  001A9A  0A                 	db	10
   103                           
   104                           ;initializer for _bd_rate_code
   105  001A9B  04                 	db	4
   106                           
   107                           	psect	idataBANK0
   108  001A9C                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _led_cnt
   112  001A9C  FDE8               	dw	65000
   113                           
   114                           ;initializer for _rd_state
   115  001A9E  0A                 	db	10
   116                           
   117                           	psect	idataBANK1
   118  001A9F                     __pidataBANK1:
   119                           	opt stack 0
   120                           
   121                           ;initializer for _ADC_current_min
   122  001A9F  1000               	dw	4096
   123                           
   124                           	psect	nvBANK1
   125  0001F9                     __pnvBANK1:
   126                           	opt stack 0
   127  0001F9                     _num_of_turns:
   128                           	opt stack 0
   129  0001F9                     	ds	2
   130  0001FB                     _current_max:
   131                           	opt stack 0
   132  0001FB                     	ds	2
   133  0000                     _IOCB	set	3930
   134  0000                     _ANCON1bits	set	3932
   135  0000                     _ANCON0bits	set	3933
   136  0000                     _PORTBbits	set	3969
   137  0000                     _T1GCONbits	set	4010
   138  0000                     _TMR0H	set	4055
   139  0000                     _TMR0L	set	4054
   140  0000                     _T0CONbits	set	4053
   141  0000                     _RCREG1	set	4014
   142  0000                     _T1CONbits	set	4045
   143  0000                     _TMR1H	set	4047
   144  0000                     _TMR1L	set	4046
   145  0000                     _ADRESL	set	4035
   146  0000                     _ADRESH	set	4036
   147  0000                     _INTCON3bits	set	4080
   148  0000                     _INTCON2bits	set	4081
   149  0000                     _PIR1bits	set	3998
   150  0000                     _RCONbits	set	4048
   151  0000                     _BAUDCON1bits	set	4007
   152  0000                     _RCSTA1bits	set	4011
   153  0000                     _SPBRG1	set	4015
   154  0000                     _ADCON2bits	set	4032
   155  0000                     _ADCON1bits	set	4033
   156  0000                     _ADCON0bits	set	4034
   157  0000                     _TRISCbits	set	3988
   158  0000                     _TRISBbits	set	3987
   159  0000                     _TRISAbits	set	3986
   160  0000                     _PIE1bits	set	3997
   161  0000                     _LATCbits	set	3979
   162  0000                     _TXREG1bits	set	4013
   163  0000                     _TXSTA1bits	set	4012
   164  0000                     _EECON2	set	3966
   165  0000                     _INTCONbits	set	4082
   166  0000                     _EECON1bits	set	3967
   167  0000                     _EEDATA	set	3955
   168  0000                     _EEADR	set	3956
   169  0000                     _GO_nDONE	set	32273
   170                           
   171                           ; #config settings
   172  0000                     
   173                           	psect	cinit
   174  001578                     __pcinit:
   175                           	opt stack 0
   176  001578                     start_initialization:
   177                           	opt stack 0
   178  001578                     __initialization:
   179                           	opt stack 0
   180                           
   181                           ; Initialize objects allocated to BANK1 (2 bytes)
   182                           ; load TBLPTR registers with __pidataBANK1
   183  001578  0E9F               	movlw	low __pidataBANK1
   184  00157A  6EF6               	movwf	tblptrl,c
   185  00157C  0E1A               	movlw	high __pidataBANK1
   186  00157E  6EF7               	movwf	tblptrh,c
   187  001580  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   188  001582  6EF8               	movwf	tblptru,c
   189  001584  0009               	tblrd		*+	;fetch initializer
   190  001586  CFF5 F1FD          	movff	tablat,__pdataBANK1
   191  00158A  0009               	tblrd		*+	;fetch initializer
   192  00158C  CFF5 F1FE          	movff	tablat,__pdataBANK1+1
   193                           
   194                           ; Initialize objects allocated to BANK0 (3 bytes)
   195                           ; load TBLPTR registers with __pidataBANK0
   196  001590  0E9C               	movlw	low __pidataBANK0
   197  001592  6EF6               	movwf	tblptrl,c
   198  001594  0E1A               	movlw	high __pidataBANK0
   199  001596  6EF7               	movwf	tblptrh,c
   200  001598  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   201  00159A  6EF8               	movwf	tblptru,c
   202  00159C  0009               	tblrd		*+	;fetch initializer
   203  00159E  CFF5 F0BD          	movff	tablat,__pdataBANK0
   204  0015A2  0009               	tblrd		*+	;fetch initializer
   205  0015A4  CFF5 F0BE          	movff	tablat,__pdataBANK0+1
   206  0015A8  0009               	tblrd		*+	;fetch initializer
   207  0015AA  CFF5 F0BF          	movff	tablat,__pdataBANK0+2
   208                           
   209                           ; Initialize objects allocated to COMRAM (8 bytes)
   210                           ; load TBLPTR registers with __pidataCOMRAM
   211  0015AE  0E94               	movlw	low __pidataCOMRAM
   212  0015B0  6EF6               	movwf	tblptrl,c
   213  0015B2  0E1A               	movlw	high __pidataCOMRAM
   214  0015B4  6EF7               	movwf	tblptrh,c
   215  0015B6  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   216  0015B8  6EF8               	movwf	tblptru,c
   217  0015BA  EE00  F046         	lfsr	0,__pdataCOMRAM
   218  0015BE  EE10 F008          	lfsr	1,8
   219  0015C2                     copy_data0:
   220  0015C2  0009               	tblrd		*+
   221  0015C4  CFF5 FFEE          	movff	tablat,postinc0
   222  0015C8  50E5               	movf	postdec1,w,c
   223  0015CA  50E1               	movf	fsr1l,w,c
   224  0015CC  E1FA               	bnz	copy_data0
   225                           
   226                           ; Clear objects allocated to BANK3 (250 bytes)
   227  0015CE  EE03  F000         	lfsr	0,__pbssBANK3
   228  0015D2  0EFA               	movlw	250
   229  0015D4                     clear_0:
   230  0015D4  6AEE               	clrf	postinc0,c
   231  0015D6  06E8               	decf	wreg,f,c
   232  0015D8  E1FD               	bnz	clear_0
   233                           
   234                           ; Clear objects allocated to BANK2 (250 bytes)
   235  0015DA  EE02  F000         	lfsr	0,__pbssBANK2
   236  0015DE  0EFA               	movlw	250
   237  0015E0                     clear_1:
   238  0015E0  6AEE               	clrf	postinc0,c
   239  0015E2  06E8               	decf	wreg,f,c
   240  0015E4  E1FD               	bnz	clear_1
   241                           
   242                           ; Clear objects allocated to BANK1 (32 bytes)
   243  0015E6  EE01  F0D9         	lfsr	0,__pbssBANK1
   244  0015EA  0E20               	movlw	32
   245  0015EC                     clear_2:
   246  0015EC  6AEE               	clrf	postinc0,c
   247  0015EE  06E8               	decf	wreg,f,c
   248  0015F0  E1FD               	bnz	clear_2
   249                           
   250                           ; Clear objects allocated to BANK0 (62 bytes)
   251  0015F2  EE00  F060         	lfsr	0,__pbssBANK0
   252  0015F6  0E3E               	movlw	62
   253  0015F8                     clear_3:
   254  0015F8  6AEE               	clrf	postinc0,c
   255  0015FA  06E8               	decf	wreg,f,c
   256  0015FC  E1FD               	bnz	clear_3
   257                           
   258                           ; Clear objects allocated to COMRAM (15 bytes)
   259  0015FE  EE00  F037         	lfsr	0,__pbssCOMRAM
   260  001602  0E0F               	movlw	15
   261  001604                     clear_4:
   262  001604  6AEE               	clrf	postinc0,c
   263  001606  06E8               	decf	wreg,f,c
   264  001608  E1FD               	bnz	clear_4
   265  00160A                     end_of_initialization:
   266                           	opt stack 0
   267  00160A                     __end_of__initialization:
   268                           	opt stack 0
   269  00160A  904E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   270  00160C  924E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   271  00160E  0E00               	movlw	low (__Lmediumconst shr (0+16))
   272  001610  6EF8               	movwf	tblptru,c
   273  001612  0100               	movlb	0
   274  001614  EF65  F000         	goto	_main	;jump to C main() function
   275                           tblptru	equ	0xFF8
   276                           tblptrh	equ	0xFF7
   277                           tblptrl	equ	0xFF6
   278                           tablat	equ	0xFF5
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           postdec1	equ	0xFE5
   282                           fsr1l	equ	0xFE1
   283                           
   284                           	psect	bssCOMRAM
   285  000037                     __pbssCOMRAM:
   286                           	opt stack 0
   287  000037                     _reg_wr_data:
   288                           	opt stack 0
   289  000037                     	ds	2
   290  000039                     _addr_buf_1:
   291                           	opt stack 0
   292  000039                     	ds	2
   293  00003B                     _regs2read:
   294                           	opt stack 0
   295  00003B                     	ds	2
   296  00003D                     _temp_buf:
   297                           	opt stack 0
   298  00003D                     	ds	2
   299  00003F                     _modbus_reg_addr:
   300                           	opt stack 0
   301  00003F                     	ds	2
   302  000041                     _eeprom_buf:
   303                           	opt stack 0
   304  000041                     	ds	2
   305  000043                     _rx_byte:
   306                           	opt stack 0
   307  000043                     	ds	1
   308  000044                     _rd_ptr:
   309                           	opt stack 0
   310  000044                     	ds	1
   311  000045                     _wr_ptr:
   312                           	opt stack 0
   313  000045                     	ds	1
   314                           tblptru	equ	0xFF8
   315                           tblptrh	equ	0xFF7
   316                           tblptrl	equ	0xFF6
   317                           tablat	equ	0xFF5
   318                           postinc0	equ	0xFEE
   319                           wreg	equ	0xFE8
   320                           postdec1	equ	0xFE5
   321                           fsr1l	equ	0xFE1
   322                           
   323                           	psect	dataCOMRAM
   324  000046                     __pdataCOMRAM:
   325                           	opt stack 0
   326  000046                     _POT_MAX:
   327                           	opt stack 0
   328  000046                     	ds	2
   329  000048                     _POT_MIN:
   330                           	opt stack 0
   331  000048                     	ds	2
   332  00004A                     _CHANGE_MOTOR:
   333                           	opt stack 0
   334  00004A                     	ds	2
   335  00004C                     _dev_id:
   336                           	opt stack 0
   337  00004C                     	ds	1
   338  00004D                     _bd_rate_code:
   339                           	opt stack 0
   340  00004D                     	ds	1
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           postinc0	equ	0xFEE
   346                           wreg	equ	0xFE8
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350                           	psect	bssBANK0
   351  000060                     __pbssBANK0:
   352                           	opt stack 0
   353  000060                     _rx_buf:
   354                           	opt stack 0
   355  000060                     	ds	32
   356  000080                     _addr_buf_2:
   357                           	opt stack 0
   358  000080                     	ds	2
   359  000082                     _CRC16:
   360                           	opt stack 0
   361  000082                     	ds	2
   362  000084                     _refresh_offset:
   363                           	opt stack 0
   364  000084                     	ds	2
   365  000086                     _set_zero_error:
   366                           	opt stack 0
   367  000086                     	ds	2
   368  000088                     _read_turns:
   369                           	opt stack 0
   370  000088                     	ds	2
   371  00008A                     _TURN_PERCENT_2:
   372                           	opt stack 0
   373  00008A                     	ds	2
   374  00008C                     _ADC_current_result:
   375                           	opt stack 0
   376  00008C                     	ds	2
   377  00008E                     _ADC_cutoff_null:
   378                           	opt stack 0
   379  00008E                     	ds	2
   380  000090                     _V_detect:
   381                           	opt stack 0
   382  000090                     	ds	2
   383  000092                     _Buf:
   384                           	opt stack 0
   385  000092                     	ds	2
   386  000094                     _flag:
   387                           	opt stack 0
   388  000094                     	ds	2
   389  000096                     _id_change:
   390                           	opt stack 0
   391  000096                     	ds	1
   392  000097                     _answer:
   393                           	opt stack 0
   394  000097                     	ds	1
   395  000098                     _get_crc_flag:
   396                           	opt stack 0
   397  000098                     	ds	1
   398  000099                     _reg_qty_flag:
   399                           	opt stack 0
   400  000099                     	ds	1
   401  00009A                     _reg_wr_flag:
   402                           	opt stack 0
   403  00009A                     	ds	1
   404  00009B                     _reg_addr_flag:
   405                           	opt stack 0
   406  00009B                     	ds	1
   407  00009C                     _bd_rate_fl:
   408                           	opt stack 0
   409  00009C                     	ds	1
   410  00009D                     _count:
   411                           	opt stack 0
   412  00009D                     	ds	1
   413                           tblptru	equ	0xFF8
   414                           tblptrh	equ	0xFF7
   415                           tblptrl	equ	0xFF6
   416                           tablat	equ	0xFF5
   417                           postinc0	equ	0xFEE
   418                           wreg	equ	0xFE8
   419                           postdec1	equ	0xFE5
   420                           fsr1l	equ	0xFE1
   421                           
   422                           	psect	dataBANK0
   423  0000BD                     __pdataBANK0:
   424                           	opt stack 0
   425  0000BD                     _led_cnt:
   426                           	opt stack 0
   427  0000BD                     	ds	2
   428  0000BF                     _rd_state:
   429                           	opt stack 0
   430  0000BF                     	ds	1
   431                           tblptru	equ	0xFF8
   432                           tblptrh	equ	0xFF7
   433                           tblptrl	equ	0xFF6
   434                           tablat	equ	0xFF5
   435                           postinc0	equ	0xFEE
   436                           wreg	equ	0xFE8
   437                           postdec1	equ	0xFE5
   438                           fsr1l	equ	0xFE1
   439                           
   440                           	psect	bssBANK1
   441  0001D9                     __pbssBANK1:
   442                           	opt stack 0
   443  0001D9                     _set_zero:
   444                           	opt stack 0
   445  0001D9                     	ds	2
   446  0001DB                     _grad:
   447                           	opt stack 0
   448  0001DB                     	ds	2
   449  0001DD                     _offset:
   450                           	opt stack 0
   451  0001DD                     	ds	2
   452  0001DF                     _GRAD_cutoff_null:
   453                           	opt stack 0
   454  0001DF                     	ds	2
   455  0001E1                     _overcurrent:
   456                           	opt stack 0
   457  0001E1                     	ds	2
   458  0001E3                     _percent_step:
   459                           	opt stack 0
   460  0001E3                     	ds	2
   461  0001E5                     _grad_step:
   462                           	opt stack 0
   463  0001E5                     	ds	2
   464  0001E7                     _GRAD_MAX:
   465                           	opt stack 0
   466  0001E7                     	ds	2
   467  0001E9                     _SET_MAX:
   468                           	opt stack 0
   469  0001E9                     	ds	2
   470  0001EB                     _SET_MIN:
   471                           	opt stack 0
   472  0001EB                     	ds	2
   473  0001ED                     _ADC_RES_BUF:
   474                           	opt stack 0
   475  0001ED                     	ds	2
   476  0001EF                     _ADC_current_max:
   477                           	opt stack 0
   478  0001EF                     	ds	2
   479  0001F1                     _ADC_current_dif:
   480                           	opt stack 0
   481  0001F1                     	ds	2
   482  0001F3                     _ADC_current_rms:
   483                           	opt stack 0
   484  0001F3                     	ds	2
   485  0001F5                     _turns_percent_press:
   486                           	opt stack 0
   487  0001F5                     	ds	2
   488  0001F7                     _turns_percent:
   489                           	opt stack 0
   490  0001F7                     	ds	2
   491                           tblptru	equ	0xFF8
   492                           tblptrh	equ	0xFF7
   493                           tblptrl	equ	0xFF6
   494                           tablat	equ	0xFF5
   495                           postinc0	equ	0xFEE
   496                           wreg	equ	0xFE8
   497                           postdec1	equ	0xFE5
   498                           fsr1l	equ	0xFE1
   499                           
   500                           	psect	dataBANK1
   501  0001FD                     __pdataBANK1:
   502                           	opt stack 0
   503  0001FD                     _ADC_current_min:
   504                           	opt stack 0
   505  0001FD                     	ds	2
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	bssBANK2
   516  000200                     __pbssBANK2:
   517                           	opt stack 0
   518  000200                     _holding_register:
   519                           	opt stack 0
   520  000200                     	ds	250
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	bssBANK3
   531  000300                     __pbssBANK3:
   532                           	opt stack 0
   533  000300                     _crc_buf:
   534                           	opt stack 0
   535  000300                     	ds	250
   536                           tblptru	equ	0xFF8
   537                           tblptrh	equ	0xFF7
   538                           tblptrl	equ	0xFF6
   539                           tablat	equ	0xFF5
   540                           postinc0	equ	0xFEE
   541                           wreg	equ	0xFE8
   542                           postdec1	equ	0xFE5
   543                           fsr1l	equ	0xFE1
   544                           
   545                           	psect	cstackBANK1
   546  000100                     __pcstackBANK1:
   547                           	opt stack 0
   548  000100                     main@curr_arr:
   549                           	opt stack 0
   550                           
   551                           ; 200 bytes @ 0x0
   552  000100                     	ds	200
   553  0001C8                     _main$1935:
   554                           	opt stack 0
   555                           
   556                           ; 3 bytes @ 0xC8
   557  0001C8                     	ds	3
   558  0001CB                     _main$1934:
   559                           	opt stack 0
   560                           
   561                           ; 2 bytes @ 0xCB
   562  0001CB                     	ds	2
   563  0001CD                     main@i_1337:
   564                           	opt stack 0
   565                           
   566                           ; 2 bytes @ 0xCD
   567  0001CD                     	ds	2
   568  0001CF                     main@i:
   569                           	opt stack 0
   570                           
   571                           ; 2 bytes @ 0xCF
   572  0001CF                     	ds	2
   573  0001D1                     main@i_1338:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0xD1
   577  0001D1                     	ds	2
   578  0001D3                     main@y:
   579                           	opt stack 0
   580                           
   581                           ; 4 bytes @ 0xD3
   582  0001D3                     	ds	4
   583  0001D7                     main@i_1339:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0xD7
   587  0001D7                     	ds	2
   588                           tblptru	equ	0xFF8
   589                           tblptrh	equ	0xFF7
   590                           tblptrl	equ	0xFF6
   591                           tablat	equ	0xFF5
   592                           postinc0	equ	0xFEE
   593                           wreg	equ	0xFE8
   594                           postdec1	equ	0xFE5
   595                           fsr1l	equ	0xFE1
   596                           
   597                           	psect	cstackBANK0
   598  00009E                     __pcstackBANK0:
   599                           	opt stack 0
   600  00009E                     ___ftdiv@cntr:
   601                           	opt stack 0
   602                           
   603                           ; 1 bytes @ 0x0
   604  00009E                     	ds	1
   605  00009F                     ___ftdiv@f3:
   606                           	opt stack 0
   607                           
   608                           ; 3 bytes @ 0x1
   609  00009F                     	ds	3
   610  0000A2                     ___ftdiv@exp:
   611                           	opt stack 0
   612                           
   613                           ; 1 bytes @ 0x4
   614  0000A2                     	ds	1
   615  0000A3                     ___ftdiv@sign:
   616                           	opt stack 0
   617                           
   618                           ; 1 bytes @ 0x5
   619  0000A3                     	ds	1
   620  0000A4                     ??___fttol:
   621                           
   622                           ; 1 bytes @ 0x6
   623  0000A4                     	ds	5
   624  0000A9                     ___fttol@sign1:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0xB
   628  0000A9                     	ds	1
   629  0000AA                     ___fttol@lval:
   630                           	opt stack 0
   631                           
   632                           ; 4 bytes @ 0xC
   633  0000AA                     	ds	4
   634  0000AE                     ___fttol@exp1:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x10
   638  0000AE                     	ds	1
   639  0000AF                     ??_main:
   640                           
   641                           ; 1 bytes @ 0x11
   642  0000AF                     	ds	14
   643                           tblptru	equ	0xFF8
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           tablat	equ	0xFF5
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           postdec1	equ	0xFE5
   650                           fsr1l	equ	0xFE1
   651                           
   652                           	psect	cstackCOMRAM
   653  000001                     __pcstackCOMRAM:
   654                           	opt stack 0
   655  000001                     ??_ISR:
   656  000001                     
   657                           ; 1 bytes @ 0x0
   658  000001                     	ds	16
   659  000011                     ??_get_rx_ch:
   660  000011                     ?_modbus_CRC16:
   661                           	opt stack 0
   662  000011                     ?___lwdiv:
   663                           	opt stack 0
   664  000011                     ?___ftpack:
   665                           	opt stack 0
   666  000011                     ?___lldiv:
   667                           	opt stack 0
   668  000011                     EEPROM_WrByte@bData:
   669                           	opt stack 0
   670  000011                     EEPROM_RdByte@bAdd:
   671                           	opt stack 0
   672  000011                     uart_send_hex@temp:
   673                           	opt stack 0
   674  000011                     UART_Init@bd_rate_code:
   675                           	opt stack 0
   676  000011                     modbus_reset@i:
   677                           	opt stack 0
   678  000011                     modbus_CRC16@buf:
   679                           	opt stack 0
   680  000011                     ___lwdiv@dividend:
   681                           	opt stack 0
   682  000011                     ___ftpack@arg:
   683                           	opt stack 0
   684  000011                     ___lldiv@dividend:
   685                           	opt stack 0
   686                           
   687                           ; 4 bytes @ 0x10
   688  000011                     	ds	1
   689  000012                     ??_EEprom_restore:
   690  000012                     EEPROM_WrByte@bAdd:
   691                           	opt stack 0
   692                           
   693                           ; 1 bytes @ 0x11
   694  000012                     	ds	1
   695  000013                     EEPROM_WrByte@GIEBitsVal:
   696                           	opt stack 0
   697  000013                     get_rx_ch@rch:
   698                           	opt stack 0
   699  000013                     modbus_CRC16@len:
   700                           	opt stack 0
   701  000013                     ___lwdiv@divisor:
   702                           	opt stack 0
   703                           
   704                           ; 2 bytes @ 0x12
   705  000013                     	ds	1
   706  000014                     ??_modbus_refresh:
   707  000014                     ??_modbus_CRC16:
   708  000014                     ___ftpack@exp:
   709                           	opt stack 0
   710                           
   711                           ; 1 bytes @ 0x13
   712  000014                     	ds	1
   713  000015                     ___ftpack@sign:
   714                           	opt stack 0
   715  000015                     ___lwdiv@quotient:
   716                           	opt stack 0
   717  000015                     ___lldiv@divisor:
   718                           	opt stack 0
   719                           
   720                           ; 4 bytes @ 0x14
   721  000015                     	ds	1
   722  000016                     ??___ftpack:
   723  000016                     modbus_refresh@cmd_type:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x15
   727  000016                     	ds	1
   728  000017                     ___lwdiv@counter:
   729                           	opt stack 0
   730                           
   731                           ; 1 bytes @ 0x16
   732  000017                     	ds	2
   733  000019                     ?___lwtoft:
   734                           	opt stack 0
   735  000019                     ___lwtoft@c:
   736                           	opt stack 0
   737  000019                     ___lldiv@quotient:
   738                           	opt stack 0
   739                           
   740                           ; 4 bytes @ 0x18
   741  000019                     	ds	1
   742  00001A                     modbus_CRC16@pos:
   743                           	opt stack 0
   744                           
   745                           ; 1 bytes @ 0x19
   746  00001A                     	ds	1
   747  00001B                     modbus_CRC16@i:
   748                           	opt stack 0
   749                           
   750                           ; 1 bytes @ 0x1A
   751  00001B                     	ds	1
   752  00001C                     ?___ftmul:
   753                           	opt stack 0
   754  00001C                     modbus_CRC16@crc:
   755                           	opt stack 0
   756  00001C                     ___ftmul@f1:
   757                           	opt stack 0
   758                           
   759                           ; 3 bytes @ 0x1B
   760  00001C                     	ds	1
   761  00001D                     ___lldiv@counter:
   762                           	opt stack 0
   763                           
   764                           ; 1 bytes @ 0x1C
   765  00001D                     	ds	1
   766  00001E                     ??_modbus_wsr_answer:
   767  00001E                     ??_modbus_rhr_answer:
   768  00001E                     modbus_rx_CRC_check@modbus_cmd:
   769                           	opt stack 0
   770                           
   771                           ; 1 bytes @ 0x1D
   772  00001E                     	ds	1
   773  00001F                     ___ftmul@f2:
   774                           	opt stack 0
   775                           
   776                           ; 3 bytes @ 0x1E
   777  00001F                     	ds	1
   778  000020                     modbus_rhr_answer@i:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x1F
   782  000020                     	ds	1
   783  000021                     modbus_rhr_answer@j:
   784                           	opt stack 0
   785                           
   786                           ; 1 bytes @ 0x20
   787  000021                     	ds	1
   788  000022                     ??___ftmul:
   789  000022                     modbus_rhr_answer@cnt:
   790                           	opt stack 0
   791                           
   792                           ; 1 bytes @ 0x21
   793  000022                     	ds	1
   794  000023                     
   795                           ; 1 bytes @ 0x22
   796  000023                     	ds	2
   797  000025                     ___ftmul@exp:
   798                           	opt stack 0
   799                           
   800                           ; 1 bytes @ 0x24
   801  000025                     	ds	1
   802  000026                     ___ftmul@sign:
   803                           	opt stack 0
   804                           
   805                           ; 1 bytes @ 0x25
   806  000026                     	ds	1
   807  000027                     ___ftmul@f3_as_product:
   808                           	opt stack 0
   809                           
   810                           ; 3 bytes @ 0x26
   811  000027                     	ds	3
   812  00002A                     ?___ftdiv:
   813                           	opt stack 0
   814  00002A                     ___ftdiv@f1:
   815                           	opt stack 0
   816                           
   817                           ; 3 bytes @ 0x29
   818  00002A                     	ds	3
   819  00002D                     ___ftdiv@f2:
   820                           	opt stack 0
   821                           
   822                           ; 3 bytes @ 0x2C
   823  00002D                     	ds	3
   824  000030                     ??___ftdiv:
   825                           
   826                           ; 1 bytes @ 0x2F
   827  000030                     	ds	3
   828  000033                     ?___fttol:
   829                           	opt stack 0
   830  000033                     ___fttol@f1:
   831                           	opt stack 0
   832                           
   833                           ; 3 bytes @ 0x32
   834  000033                     	ds	4
   835                           tblptru	equ	0xFF8
   836                           tblptrh	equ	0xFF7
   837                           tblptrl	equ	0xFF6
   838                           tablat	equ	0xFF5
   839                           postinc0	equ	0xFEE
   840                           wreg	equ	0xFE8
   841                           postdec1	equ	0xFE5
   842                           fsr1l	equ	0xFE1
   843                           
   844 ;;
   845 ;;Main: autosize = 0, tempsize = 14, incstack = 0, save=0
   846 ;;
   847 ;; *************** function _main *****************
   848 ;; Defined at:
   849 ;;		line 857 in file "Turn_counter.c"
   850 ;; Parameters:    Size  Location     Type
   851 ;;		None
   852 ;; Auto vars:     Size  Location     Type
   853 ;;  i               2  205[BANK1 ] int 
   854 ;;  y               4  211[BANK1 ] unsigned long 
   855 ;;  i               2  215[BANK1 ] int 
   856 ;;  i               2  209[BANK1 ] int 
   857 ;;  i               2  207[BANK1 ] int 
   858 ;;  curr_arr      200    0[BANK1 ] unsigned int [100]
   859 ;; Return value:  Size  Location     Type
   860 ;;                  1    wreg      void 
   861 ;; Registers used:
   862 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   863 ;; Tracked objects:
   864 ;;		On entry : 0/0
   865 ;;		On exit  : 0/0
   866 ;;		Unchanged: 0/0
   867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   869 ;;      Locals:         0       0     217       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   870 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   871 ;;      Totals:         0      14     217       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   872 ;;Total ram usage:      231 bytes
   873 ;; Hardware stack levels required when called:    4
   874 ;; This function calls:
   875 ;;		_ADC_Init
   876 ;;		_EEPROM_WrByte
   877 ;;		_EEprom_restore
   878 ;;		_GPIO_init
   879 ;;		_Hold_reg_Inint
   880 ;;		_Interrupt_Init
   881 ;;		_Timer1_init
   882 ;;		_UART_Init
   883 ;;		___ftdiv
   884 ;;		___ftmul
   885 ;;		___fttol
   886 ;;		___lldiv
   887 ;;		___lwdiv
   888 ;;		___lwtoft
   889 ;;		_modbus_poll
   890 ;;		_modbus_reset
   891 ;;		_modbus_rx_sm
   892 ;; This function is called by:
   893 ;;		Startup code after reset
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           	psect	text0
   898  0000CA                     __ptext0:
   899                           	opt stack 0
   900  0000CA                     _main:
   901                           	opt stack 27
   902                           
   903                           ;Turn_counter.c: 859: unsigned int curr_arr[100];
   904                           ;Turn_counter.c: 861: Hold_reg_Inint();
   905                           
   906                           ;incstack = 0
   907  0000CA  EC39  F00D         	call	_Hold_reg_Inint	;wreg free
   908                           
   909                           ;Turn_counter.c: 863: Timer1_init();
   910  0000CE  EC42  F00D         	call	_Timer1_init	;wreg free
   911                           
   912                           ;Turn_counter.c: 864: GPIO_init();
   913  0000D2  ECD4  F00C         	call	_GPIO_init	;wreg free
   914                           
   915                           ;Turn_counter.c: 865: LATCbits.LATC3=0;
   916  0000D6  968B               	bcf	3979,3,c	;volatile
   917                           
   918                           ;Turn_counter.c: 866: ADC_Init();
   919  0000D8  ECEB  F00C         	call	_ADC_Init	;wreg free
   920                           
   921                           ;Turn_counter.c: 867: EEprom_restore();
   922  0000DC  EC23  F006         	call	_EEprom_restore	;wreg free
   923                           
   924                           ;Turn_counter.c: 868: Interrupt_Init();
   925  0000E0  EC14  F00D         	call	_Interrupt_Init	;wreg free
   926                           
   927                           ;Turn_counter.c: 870: modbus_reset();
   928  0000E4  ECBC  F00C         	call	_modbus_reset	;wreg free
   929                           
   930                           ;Turn_counter.c: 871: for(int i = 0; i < 125; i++)
   931  0000E8  0E00               	movlw	0
   932  0000EA  0101               	movlb	1	; () banked
   933  0000EC  6FD0               	movwf	(main@i+1)& (0+255),b
   934  0000EE  6FCF               	movwf	main@i& (0+255),b
   935                           
   936                           ; BSR set to: 1
   937  0000F0  BFD0               	btfsc	(main@i+1)& (0+255),7,b
   938  0000F2  D005               	goto	l3292
   939  0000F4  51D0               	movf	(main@i+1)& (0+255),w,b
   940  0000F6  E117               	bnz	l375
   941  0000F8  0E7D               	movlw	125
   942  0000FA  5DCF               	subwf	main@i& (0+255),w,b
   943  0000FC  E214               	bc	l375
   944  0000FE                     l3292:
   945                           
   946                           ; BSR set to: 1
   947                           ;Turn_counter.c: 872: holding_register[i] = 0;
   948  0000FE  90D8               	bcf	status,0,c
   949  000100  0101               	movlb	1	; () banked
   950  000102  35CF               	rlcf	main@i& (0+255),w,b
   951  000104  6ED9               	movwf	fsr2l,c
   952  000106  35D0               	rlcf	(main@i+1)& (0+255),w,b
   953  000108  6EDA               	movwf	fsr2h,c
   954  00010A  0E00               	movlw	low _holding_register
   955  00010C  26D9               	addwf	fsr2l,f,c
   956  00010E  0E02               	movlw	high _holding_register
   957  000110  22DA               	addwfc	fsr2h,f,c
   958  000112  0E00               	movlw	0
   959  000114  6EDE               	movwf	postinc2,c
   960  000116  6EDD               	movwf	postdec2,c
   961                           
   962                           ; BSR set to: 1
   963  000118  4BCF               	infsnz	main@i& (0+255),f,b
   964  00011A  2BD0               	incf	(main@i+1)& (0+255),f,b
   965                           
   966                           ; BSR set to: 1
   967  00011C  BFD0               	btfsc	(main@i+1)& (0+255),7,b
   968  00011E  D7EF               	goto	l3292
   969  000120  51D0               	movf	(main@i+1)& (0+255),w,b
   970  000122  E101               	bnz	u2230
   971  000124  D7E9               	goto	L1
   972  000126                     u2230:
   973  000126                     l375:
   974                           
   975                           ; BSR set to: 1
   976                           ;Turn_counter.c: 874: T1CONbits.TMR1ON = 1;
   977  000126  80CD               	bsf	4045,0,c	;volatile
   978  000128                     l3298:
   979                           
   980                           ;Turn_counter.c: 877: {
   981                           ;Turn_counter.c: 878: modbus_rx_sm();
   982  000128  EC8D  F008         	call	_modbus_rx_sm	;wreg free
   983                           
   984                           ;Turn_counter.c: 879: modbus_poll();
   985  00012C  EC5E  F00A         	call	_modbus_poll	;wreg free
   986                           
   987                           ;Turn_counter.c: 881: if(PORTBbits.RB3)
   988  000130  B681               	btfsc	3969,3,c	;volatile
   989                           
   990                           ;Turn_counter.c: 882: {
   991                           ;Turn_counter.c: 884: }
   992  000132  D02F               	goto	l3326
   993                           
   994                           ;Turn_counter.c: 885: else
   995                           ;Turn_counter.c: 886: {
   996                           ;Turn_counter.c: 888: for(int i = 0; i < 60; i++)
   997  000134  0E00               	movlw	0
   998  000136  0101               	movlb	1	; () banked
   999  000138  6FCE               	movwf	(main@i_1337+1)& (0+255),b
  1000  00013A  6FCD               	movwf	main@i_1337& (0+255),b
  1001                           
  1002                           ; BSR set to: 1
  1003  00013C  BFCE               	btfsc	(main@i_1337+1)& (0+255),7,b
  1004  00013E  D005               	goto	l3312
  1005  000140  51CE               	movf	(main@i_1337+1)& (0+255),w,b
  1006  000142  E114               	bnz	l380
  1007  000144  0E3C               	movlw	60
  1008  000146  5DCD               	subwf	main@i_1337& (0+255),w,b
  1009  000148  E211               	bc	l380
  1010  00014A                     l3312:
  1011                           
  1012                           ; BSR set to: 1
  1013                           ;Turn_counter.c: 889: {
  1014                           ;Turn_counter.c: 890: _delay((unsigned long)((5)*(40000000/4000.0)));
  1015  00014A  0E41               	movlw	65
  1016  00014C  0100               	movlb	0	; () banked
  1017  00014E  6FAF               	movwf	??_main& (0+255),b
  1018  000150  0EEE               	movlw	238
  1019  000152                     u2437:
  1020  000152  2EE8               	decfsz	wreg,f,c
  1021  000154  D7FE               	bra	u2437
  1022  000156  2FAF               	decfsz	??_main& (0+255),f,b
  1023  000158  D7FC               	bra	u2437
  1024  00015A  F000               	nop	
  1025  00015C  0101               	movlb	1	; () banked
  1026  00015E  4BCD               	infsnz	main@i_1337& (0+255),f,b
  1027  000160  2BCE               	incf	(main@i_1337+1)& (0+255),f,b
  1028  000162  BFCE               	btfsc	(main@i_1337+1)& (0+255),7,b
  1029  000164  D7F2               	goto	l3312
  1030  000166  51CE               	movf	(main@i_1337+1)& (0+255),w,b
  1031  000168  E101               	bnz	u2260
  1032  00016A  D7EC               	goto	L2
  1033  00016C                     u2260:
  1034  00016C                     l380:
  1035                           
  1036                           ; BSR set to: 1
  1037                           ;Turn_counter.c: 891: }
  1038                           ;Turn_counter.c: 893: if(PORTBbits.RB3) { }
  1039  00016C  B681               	btfsc	3969,3,c	;volatile
  1040                           
  1041                           ; BSR set to: 1
  1042  00016E  D011               	goto	l3326
  1043                           
  1044                           ; BSR set to: 1
  1045                           ;Turn_counter.c: 894: else
  1046                           ;Turn_counter.c: 895: {
  1047                           ;Turn_counter.c: 896: dev_id = (unsigned char) 10;
  1048                           
  1049                           ; BSR set to: 1
  1050  000170  0E0A               	movlw	10
  1051  000172  6E4C               	movwf	_dev_id,c
  1052                           
  1053                           ;Turn_counter.c: 897: bd_rate_code = 4;
  1054  000174  0E04               	movlw	4
  1055  000176  6E4D               	movwf	_bd_rate_code,c
  1056                           
  1057                           ; BSR set to: 1
  1058                           ;Turn_counter.c: 899: UART_Init(bd_rate_code);
  1059  000178  504D               	movf	_bd_rate_code,w,c
  1060  00017A  EC0D  F00C         	call	_UART_Init
  1061                           
  1062                           ;Turn_counter.c: 900: EEPROM_WrByte(1,bd_rate_code);
  1063  00017E  C04D  F011         	movff	_bd_rate_code,EEPROM_WrByte@bData
  1064  000182  0E01               	movlw	1
  1065  000184  EC83  F00C         	call	_EEPROM_WrByte
  1066                           
  1067                           ;Turn_counter.c: 901: EEPROM_WrByte(2,dev_id);
  1068  000188  C04C  F011         	movff	_dev_id,EEPROM_WrByte@bData
  1069  00018C  0E02               	movlw	2
  1070  00018E  EC83  F00C         	call	_EEPROM_WrByte
  1071  000192                     l3326:
  1072                           
  1073                           ;Turn_counter.c: 902: }
  1074                           ;Turn_counter.c: 904: }
  1075                           ;Turn_counter.c: 906: ADC_current_max = 0;
  1076  000192  0E00               	movlw	0
  1077  000194  0101               	movlb	1	; () banked
  1078  000196  6FF0               	movwf	(_ADC_current_max+1)& (0+255),b
  1079  000198  6FEF               	movwf	_ADC_current_max& (0+255),b
  1080                           
  1081                           ; BSR set to: 1
  1082                           ;Turn_counter.c: 907: ADC_current_min = 4096;
  1083  00019A  0E10               	movlw	16
  1084  00019C  6FFE               	movwf	(_ADC_current_min+1)& (0+255),b
  1085  00019E  0E00               	movlw	0
  1086  0001A0  6FFD               	movwf	_ADC_current_min& (0+255),b
  1087                           
  1088                           ; BSR set to: 1
  1089                           ;Turn_counter.c: 909: ADCON0bits.CHS = 9;
  1090  0001A2  84C2               	bsf	4034,2,c	;volatile
  1091  0001A4  96C2               	bcf	4034,3,c	;volatile
  1092  0001A6  98C2               	bcf	4034,4,c	;volatile
  1093  0001A8  8AC2               	bsf	4034,5,c	;volatile
  1094  0001AA  9CC2               	bcf	4034,6,c	;volatile
  1095                           
  1096                           ; BSR set to: 1
  1097                           ;Turn_counter.c: 910: _delay((unsigned long)((10)*(40000000/4000000.0)));
  1098  0001AC  0E21               	movlw	33
  1099  0001AE                     u2447:
  1100  0001AE  2EE8               	decfsz	wreg,f,c
  1101  0001B0  D7FE               	bra	u2447
  1102  0001B2  F000               	nop	
  1103                           
  1104                           ;Turn_counter.c: 911: for(int i=0;i<100;i++)
  1105  0001B4  0E00               	movlw	0
  1106  0001B6  0101               	movlb	1	; () banked
  1107  0001B8  6FD2               	movwf	(main@i_1338+1)& (0+255),b
  1108  0001BA  6FD1               	movwf	main@i_1338& (0+255),b
  1109  0001BC                     l3336:
  1110                           
  1111                           ; BSR set to: 1
  1112  0001BC  0101               	movlb	1	; () banked
  1113  0001BE  BFD2               	btfsc	(main@i_1338+1)& (0+255),7,b
  1114  0001C0  D005               	goto	l383
  1115  0001C2  51D2               	movf	(main@i_1338+1)& (0+255),w,b
  1116  0001C4  E12C               	bnz	l3350
  1117  0001C6  0E64               	movlw	100
  1118  0001C8  5DD1               	subwf	main@i_1338& (0+255),w,b
  1119  0001CA  E229               	bc	l3350
  1120  0001CC                     l383:
  1121                           
  1122                           ; BSR set to: 1
  1123                           ;Turn_counter.c: 912: {
  1124                           ;Turn_counter.c: 913: GO_nDONE = 1;
  1125  0001CC  82C2               	bsf	4034,1,c	;volatile
  1126                           
  1127                           ; BSR set to: 1
  1128                           ;Turn_counter.c: 914: _delay((unsigned long)((20)*(40000000/4000000.0)));
  1129  0001CE  0E42               	movlw	66
  1130  0001D0                     u2457:
  1131  0001D0  2EE8               	decfsz	wreg,f,c
  1132  0001D2  D7FE               	bra	u2457
  1133  0001D4  D000               	nop2	
  1134                           
  1135                           ;Turn_counter.c: 916: curr_arr[i] = (ADRESH<<8) | ADRESL;
  1136  0001D6  50C3               	movf	4035,w,c	;volatile
  1137  0001D8  CFC4 F0AF          	movff	4036,??_main	;volatile
  1138  0001DC  0100               	movlb	0	; () banked
  1139  0001DE  6BB0               	clrf	(??_main+1)& (0+255),b
  1140  0001E0  C0AF  F0B0         	movff	??_main,??_main+1
  1141  0001E4  6BAF               	clrf	??_main& (0+255),b
  1142  0001E6  13AF               	iorwf	??_main& (0+255),f,b
  1143  0001E8  90D8               	bcf	status,0,c
  1144  0001EA  0101               	movlb	1	; () banked
  1145  0001EC  35D1               	rlcf	main@i_1338& (0+255),w,b
  1146  0001EE  6ED9               	movwf	fsr2l,c
  1147  0001F0  35D2               	rlcf	(main@i_1338+1)& (0+255),w,b
  1148  0001F2  6EDA               	movwf	fsr2h,c
  1149  0001F4  0E00               	movlw	low main@curr_arr
  1150  0001F6  26D9               	addwf	fsr2l,f,c
  1151  0001F8  0E01               	movlw	high main@curr_arr
  1152  0001FA  22DA               	addwfc	fsr2h,f,c
  1153  0001FC  C0AF  FFDE         	movff	??_main,postinc2
  1154  000200  C0B0  FFDD         	movff	??_main+1,postdec2
  1155                           
  1156                           ; BSR set to: 1
  1157                           ;Turn_counter.c: 917: _delay((unsigned long)((200)*(40000000/4000000.0)));
  1158  000204  0E03               	movlw	3
  1159  000206  0100               	movlb	0	; () banked
  1160  000208  6FAF               	movwf	??_main& (0+255),b
  1161  00020A  0E97               	movlw	151
  1162  00020C                     u2467:
  1163  00020C  2EE8               	decfsz	wreg,f,c
  1164  00020E  D7FE               	bra	u2467
  1165  000210  2FAF               	decfsz	??_main& (0+255),f,b
  1166  000212  D7FC               	bra	u2467
  1167  000214  D000               	nop2	
  1168  000216  0101               	movlb	1	; () banked
  1169  000218  4BD1               	infsnz	main@i_1338& (0+255),f,b
  1170  00021A  2BD2               	incf	(main@i_1338+1)& (0+255),f,b
  1171  00021C  D7CF               	goto	l3336
  1172  00021E                     l3350:
  1173                           
  1174                           ; BSR set to: 1
  1175                           ;Turn_counter.c: 918: }
  1176                           ;Turn_counter.c: 921: for(int i=0;i<100;i++)
  1177  00021E  0E00               	movlw	0
  1178  000220  0101               	movlb	1	; () banked
  1179  000222  6FD8               	movwf	(main@i_1339+1)& (0+255),b
  1180  000224  6FD7               	movwf	main@i_1339& (0+255),b
  1181  000226                     l3352:
  1182                           
  1183                           ; BSR set to: 1
  1184  000226  0101               	movlb	1	; () banked
  1185  000228  BFD8               	btfsc	(main@i_1339+1)& (0+255),7,b
  1186  00022A  D005               	goto	l3356
  1187  00022C  51D8               	movf	(main@i_1339+1)& (0+255),w,b
  1188  00022E  E13F               	bnz	l3366
  1189  000230  0E64               	movlw	100
  1190  000232  5DD7               	subwf	main@i_1339& (0+255),w,b
  1191  000234  E23C               	bc	l3366
  1192  000236                     l3356:
  1193                           
  1194                           ; BSR set to: 1
  1195                           ;Turn_counter.c: 922: {
  1196                           ;Turn_counter.c: 923: if(curr_arr[i] > ADC_current_max)
  1197  000236  90D8               	bcf	status,0,c
  1198  000238  0101               	movlb	1	; () banked
  1199  00023A  35D7               	rlcf	main@i_1339& (0+255),w,b
  1200  00023C  6ED9               	movwf	fsr2l,c
  1201  00023E  35D8               	rlcf	(main@i_1339+1)& (0+255),w,b
  1202  000240  6EDA               	movwf	fsr2h,c
  1203  000242  0E00               	movlw	low main@curr_arr
  1204  000244  26D9               	addwf	fsr2l,f,c
  1205  000246  0E01               	movlw	high main@curr_arr
  1206  000248  22DA               	addwfc	fsr2h,f,c
  1207  00024A  50DE               	movf	postinc2,w,c
  1208  00024C  5DEF               	subwf	_ADC_current_max& (0+255),w,b
  1209  00024E  50DE               	movf	postinc2,w,c
  1210  000250  59F0               	subwfb	(_ADC_current_max+1)& (0+255),w,b
  1211  000252  E20D               	bc	l387
  1212                           
  1213                           ; BSR set to: 1
  1214                           ;Turn_counter.c: 924: ADC_current_max = curr_arr[i];
  1215  000254  90D8               	bcf	status,0,c
  1216  000256  35D7               	rlcf	main@i_1339& (0+255),w,b
  1217  000258  6ED9               	movwf	fsr2l,c
  1218  00025A  35D8               	rlcf	(main@i_1339+1)& (0+255),w,b
  1219  00025C  6EDA               	movwf	fsr2h,c
  1220  00025E  0E00               	movlw	low main@curr_arr
  1221  000260  26D9               	addwf	fsr2l,f,c
  1222  000262  0E01               	movlw	high main@curr_arr
  1223  000264  22DA               	addwfc	fsr2h,f,c
  1224  000266  CFDE F1EF          	movff	postinc2,_ADC_current_max
  1225  00026A  CFDD F1F0          	movff	postdec2,_ADC_current_max+1
  1226  00026E                     l387:
  1227                           
  1228                           ; BSR set to: 1
  1229                           ;Turn_counter.c: 926: if(curr_arr[i] < ADC_current_min)
  1230  00026E  90D8               	bcf	status,0,c
  1231  000270  0101               	movlb	1	; () banked
  1232  000272  35D7               	rlcf	main@i_1339& (0+255),w,b
  1233  000274  6ED9               	movwf	fsr2l,c
  1234  000276  35D8               	rlcf	(main@i_1339+1)& (0+255),w,b
  1235  000278  6EDA               	movwf	fsr2h,c
  1236  00027A  0E00               	movlw	low main@curr_arr
  1237  00027C  26D9               	addwf	fsr2l,f,c
  1238  00027E  0E01               	movlw	high main@curr_arr
  1239  000280  22DA               	addwfc	fsr2h,f,c
  1240  000282  51FD               	movf	_ADC_current_min& (0+255),w,b
  1241  000284  5CDE               	subwf	postinc2,w,c
  1242  000286  51FE               	movf	(_ADC_current_min+1)& (0+255),w,b
  1243  000288  58DE               	subwfb	postinc2,w,c
  1244  00028A  E20D               	bc	l3362
  1245                           
  1246                           ; BSR set to: 1
  1247                           ;Turn_counter.c: 927: ADC_current_min = curr_arr[i];
  1248  00028C  90D8               	bcf	status,0,c
  1249  00028E  35D7               	rlcf	main@i_1339& (0+255),w,b
  1250  000290  6ED9               	movwf	fsr2l,c
  1251  000292  35D8               	rlcf	(main@i_1339+1)& (0+255),w,b
  1252  000294  6EDA               	movwf	fsr2h,c
  1253  000296  0E00               	movlw	low main@curr_arr
  1254  000298  26D9               	addwf	fsr2l,f,c
  1255  00029A  0E01               	movlw	high main@curr_arr
  1256  00029C  22DA               	addwfc	fsr2h,f,c
  1257  00029E  CFDE F1FD          	movff	postinc2,_ADC_current_min
  1258  0002A2  CFDD F1FE          	movff	postdec2,_ADC_current_min+1
  1259  0002A6                     l3362:
  1260                           
  1261                           ; BSR set to: 1
  1262  0002A6  0101               	movlb	1	; () banked
  1263  0002A8  4BD7               	infsnz	main@i_1339& (0+255),f,b
  1264  0002AA  2BD8               	incf	(main@i_1339+1)& (0+255),f,b
  1265  0002AC  D7BC               	goto	l3352
  1266  0002AE                     l3366:
  1267                           
  1268                           ; BSR set to: 1
  1269                           ;Turn_counter.c: 928: }
  1270                           ;Turn_counter.c: 930: ADC_current_dif = ADC_current_max - ADC_current_min;
  1271  0002AE  C1FD  F0AF         	movff	_ADC_current_min,??_main
  1272  0002B2  C1FE  F0B0         	movff	_ADC_current_min+1,??_main+1
  1273  0002B6  0100               	movlb	0	; () banked
  1274  0002B8  1FAF               	comf	??_main& (0+255),f,b
  1275  0002BA  1FB0               	comf	(??_main+1)& (0+255),f,b
  1276  0002BC  4BAF               	infsnz	??_main& (0+255),f,b
  1277  0002BE  2BB0               	incf	(??_main+1)& (0+255),f,b
  1278  0002C0  0101               	movlb	1	; () banked
  1279  0002C2  51EF               	movf	_ADC_current_max& (0+255),w,b
  1280  0002C4  0100               	movlb	0	; () banked
  1281  0002C6  25AF               	addwf	??_main& (0+255),w,b
  1282  0002C8  0101               	movlb	1	; () banked
  1283  0002CA  6FF1               	movwf	_ADC_current_dif& (0+255),b
  1284  0002CC  51F0               	movf	(_ADC_current_max+1)& (0+255),w,b
  1285  0002CE  0100               	movlb	0	; () banked
  1286  0002D0  21B0               	addwfc	(??_main+1)& (0+255),w,b
  1287  0002D2  0101               	movlb	1	; () banked
  1288  0002D4  6FF2               	movwf	(_ADC_current_dif+1)& (0+255),b
  1289                           
  1290                           ; BSR set to: 1
  1291                           ;Turn_counter.c: 931: ADC_current_rms = (unsigned int)((ADC_current_dif/2) * 4.27);
  1292  0002D6  0EA4               	movlw	164
  1293  0002D8  6E1F               	movwf	___ftmul@f2,c
  1294  0002DA  0E88               	movlw	136
  1295  0002DC  6E20               	movwf	___ftmul@f2+1,c
  1296  0002DE  0E40               	movlw	64
  1297  0002E0  6E21               	movwf	___ftmul@f2+2,c
  1298  0002E2  90D8               	bcf	status,0,c
  1299  0002E4  31F2               	rrcf	(_ADC_current_dif+1)& (0+255),w,b
  1300  0002E6  0100               	movlb	0	; () banked
  1301  0002E8  6FAF               	movwf	??_main& (0+255),b
  1302  0002EA  0101               	movlb	1	; () banked
  1303  0002EC  31F1               	rrcf	_ADC_current_dif& (0+255),w,b
  1304  0002EE  6E19               	movwf	___lwtoft@c,c
  1305  0002F0  C0AF  F01A         	movff	??_main,___lwtoft@c+1
  1306  0002F4  EC02  F00D         	call	___lwtoft	;wreg free
  1307  0002F8  C019  F01C         	movff	?___lwtoft,___ftmul@f1
  1308  0002FC  C01A  F01D         	movff	?___lwtoft+1,___ftmul@f1+1
  1309  000300  C01B  F01E         	movff	?___lwtoft+2,___ftmul@f1+2
  1310  000304  EC8E  F009         	call	___ftmul	;wreg free
  1311  000308  C01C  F033         	movff	?___ftmul,___fttol@f1
  1312  00030C  C01D  F034         	movff	?___ftmul+1,___fttol@f1+1
  1313  000310  C01E  F035         	movff	?___ftmul+2,___fttol@f1+2
  1314  000314  EC1E  F009         	call	___fttol	;wreg free
  1315  000318  C033  F1F3         	movff	?___fttol,_ADC_current_rms
  1316  00031C  C034  F1F4         	movff	?___fttol+1,_ADC_current_rms+1
  1317                           
  1318                           ;Turn_counter.c: 933: ADCON0bits.CHS = 0;
  1319  000320  94C2               	bcf	4034,2,c	;volatile
  1320  000322  96C2               	bcf	4034,3,c	;volatile
  1321  000324  98C2               	bcf	4034,4,c	;volatile
  1322  000326  9AC2               	bcf	4034,5,c	;volatile
  1323  000328  9CC2               	bcf	4034,6,c	;volatile
  1324                           
  1325                           ;Turn_counter.c: 934: _delay((unsigned long)((10)*(40000000/4000000.0)));
  1326  00032A  0E21               	movlw	33
  1327  00032C                     u2477:
  1328  00032C  2EE8               	decfsz	wreg,f,c
  1329  00032E  D7FE               	bra	u2477
  1330  000330  F000               	nop	
  1331                           
  1332                           ;Turn_counter.c: 935: GO_nDONE = 1;
  1333  000332  82C2               	bsf	4034,1,c	;volatile
  1334                           
  1335                           ;Turn_counter.c: 936: _delay((unsigned long)((20)*(40000000/4000000.0)));
  1336  000334  0E42               	movlw	66
  1337  000336                     u2487:
  1338  000336  2EE8               	decfsz	wreg,f,c
  1339  000338  D7FE               	bra	u2487
  1340  00033A  D000               	nop2	
  1341                           
  1342                           ;Turn_counter.c: 938: read_turns = (ADRESH<<8) | ADRESL;
  1343  00033C  50C3               	movf	4035,w,c	;volatile
  1344  00033E  CFC4 F0AF          	movff	4036,??_main	;volatile
  1345  000342  0100               	movlb	0	; () banked
  1346  000344  6BB0               	clrf	(??_main+1)& (0+255),b
  1347  000346  C0AF  F0B0         	movff	??_main,??_main+1
  1348  00034A  6BAF               	clrf	??_main& (0+255),b
  1349  00034C  11AF               	iorwf	??_main& (0+255),w,b
  1350  00034E  6F88               	movwf	_read_turns& (0+255),b
  1351  000350  51B0               	movf	(??_main+1)& (0+255),w,b
  1352  000352  6F89               	movwf	(_read_turns+1)& (0+255),b
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;Turn_counter.c: 939: PIR1bits.ADIF = 0;
  1356  000354  9C9E               	bcf	3998,6,c	;volatile
  1357                           
  1358                           ; BSR set to: 0
  1359                           ;Turn_counter.c: 942: if(CHANGE_MOTOR == 1)
  1360  000356  044A               	decf	_CHANGE_MOTOR,w,c
  1361  000358  104B               	iorwf	_CHANGE_MOTOR+1,w,c
  1362  00035A  E001 D0F3          	bnz	l3408
  1363                           
  1364                           ; BSR set to: 0
  1365                           ;Turn_counter.c: 943: {
  1366                           ;Turn_counter.c: 945: ADCON0bits.CHS = 0;
  1367  00035E  94C2               	bcf	4034,2,c	;volatile
  1368  000360  96C2               	bcf	4034,3,c	;volatile
  1369  000362  98C2               	bcf	4034,4,c	;volatile
  1370  000364  9AC2               	bcf	4034,5,c	;volatile
  1371  000366  9CC2               	bcf	4034,6,c	;volatile
  1372                           
  1373                           ; BSR set to: 0
  1374                           ;Turn_counter.c: 946: _delay((unsigned long)((10)*(40000000/4000000.0)));
  1375  000368  0E21               	movlw	33
  1376  00036A                     u2497:
  1377  00036A  2EE8               	decfsz	wreg,f,c
  1378  00036C  D7FE               	bra	u2497
  1379  00036E  F000               	nop	
  1380                           
  1381                           ;Turn_counter.c: 947: GO_nDONE = 1;
  1382  000370  82C2               	bsf	4034,1,c	;volatile
  1383                           
  1384                           ;Turn_counter.c: 948: _delay((unsigned long)((20)*(40000000/4000000.0)));
  1385  000372  0E42               	movlw	66
  1386  000374                     u2507:
  1387  000374  2EE8               	decfsz	wreg,f,c
  1388  000376  D7FE               	bra	u2507
  1389  000378  D000               	nop2	
  1390                           
  1391                           ;Turn_counter.c: 950: GRAD_cutoff_null = (ADRESH<<8) | ADRESL;
  1392  00037A  50C3               	movf	4035,w,c	;volatile
  1393  00037C  CFC4 F0AF          	movff	4036,??_main	;volatile
  1394  000380  0100               	movlb	0	; () banked
  1395  000382  6BB0               	clrf	(??_main+1)& (0+255),b
  1396  000384  C0AF  F0B0         	movff	??_main,??_main+1
  1397  000388  6BAF               	clrf	??_main& (0+255),b
  1398  00038A  11AF               	iorwf	??_main& (0+255),w,b
  1399  00038C  0101               	movlb	1	; () banked
  1400  00038E  6FDF               	movwf	_GRAD_cutoff_null& (0+255),b
  1401  000390  0100               	movlb	0	; () banked
  1402  000392  51B0               	movf	(??_main+1)& (0+255),w,b
  1403  000394  0101               	movlb	1	; () banked
  1404  000396  6FE0               	movwf	(_GRAD_cutoff_null+1)& (0+255),b
  1405                           
  1406                           ; BSR set to: 1
  1407                           ;Turn_counter.c: 951: PIR1bits.ADIF = 0;
  1408  000398  9C9E               	bcf	3998,6,c	;volatile
  1409                           
  1410                           ; BSR set to: 1
  1411                           ;Turn_counter.c: 954: GRAD_cutoff_null = (GRAD_cutoff_null - offset)*0.879;
  1412  00039A  0E06               	movlw	6
  1413  00039C  6E1F               	movwf	___ftmul@f2,c
  1414  00039E  0E61               	movlw	97
  1415  0003A0  6E20               	movwf	___ftmul@f2+1,c
  1416  0003A2  0E3F               	movlw	63
  1417  0003A4  6E21               	movwf	___ftmul@f2+2,c
  1418  0003A6  C1DD  F0AF         	movff	_offset,??_main
  1419  0003AA  C1DE  F0B0         	movff	_offset+1,??_main+1
  1420  0003AE  0100               	movlb	0	; () banked
  1421  0003B0  1FAF               	comf	??_main& (0+255),f,b
  1422  0003B2  1FB0               	comf	(??_main+1)& (0+255),f,b
  1423  0003B4  4BAF               	infsnz	??_main& (0+255),f,b
  1424  0003B6  2BB0               	incf	(??_main+1)& (0+255),f,b
  1425  0003B8  0101               	movlb	1	; () banked
  1426  0003BA  51DF               	movf	_GRAD_cutoff_null& (0+255),w,b
  1427  0003BC  0100               	movlb	0	; () banked
  1428  0003BE  25AF               	addwf	??_main& (0+255),w,b
  1429  0003C0  6E19               	movwf	___lwtoft@c,c
  1430  0003C2  0101               	movlb	1	; () banked
  1431  0003C4  51E0               	movf	(_GRAD_cutoff_null+1)& (0+255),w,b
  1432  0003C6  0100               	movlb	0	; () banked
  1433  0003C8  21B0               	addwfc	(??_main+1)& (0+255),w,b
  1434  0003CA  6E1A               	movwf	___lwtoft@c+1,c
  1435  0003CC  EC02  F00D         	call	___lwtoft	;wreg free
  1436  0003D0  C019  F01C         	movff	?___lwtoft,___ftmul@f1
  1437  0003D4  C01A  F01D         	movff	?___lwtoft+1,___ftmul@f1+1
  1438  0003D8  C01B  F01E         	movff	?___lwtoft+2,___ftmul@f1+2
  1439  0003DC  EC8E  F009         	call	___ftmul	;wreg free
  1440  0003E0  C01C  F033         	movff	?___ftmul,___fttol@f1
  1441  0003E4  C01D  F034         	movff	?___ftmul+1,___fttol@f1+1
  1442  0003E8  C01E  F035         	movff	?___ftmul+2,___fttol@f1+2
  1443  0003EC  EC1E  F009         	call	___fttol	;wreg free
  1444  0003F0  C033  F1DF         	movff	?___fttol,_GRAD_cutoff_null
  1445  0003F4  C034  F1E0         	movff	?___fttol+1,_GRAD_cutoff_null+1
  1446                           
  1447                           ;Turn_counter.c: 955: if((GRAD_cutoff_null < 0)||(GRAD_cutoff_null > 4096))
  1448  0003F8  0101               	movlb	1	; () banked
  1449  0003FA  05DF               	decf	_GRAD_cutoff_null& (0+255),w,b
  1450  0003FC  0E10               	movlw	16
  1451  0003FE  59E0               	subwfb	(_GRAD_cutoff_null+1)& (0+255),w,b
  1452  000400  E303               	bnc	l390
  1453                           
  1454                           ; BSR set to: 1
  1455                           ;Turn_counter.c: 956: {
  1456                           ;Turn_counter.c: 957: grad = 0;
  1457  000402  6BDC               	clrf	(_grad+1)& (0+255),b
  1458  000404  6BDB               	clrf	_grad& (0+255),b
  1459                           
  1460                           ;Turn_counter.c: 958: }
  1461  000406  D004               	goto	l3400
  1462  000408                     l390:
  1463                           
  1464                           ; BSR set to: 1
  1465                           ;Turn_counter.c: 959: else
  1466                           ;Turn_counter.c: 960: {
  1467                           ;Turn_counter.c: 961: grad = GRAD_cutoff_null;
  1468  000408  C1DF  F1DB         	movff	_GRAD_cutoff_null,_grad
  1469  00040C  C1E0  F1DC         	movff	_GRAD_cutoff_null+1,_grad+1
  1470  000410                     l3400:
  1471                           
  1472                           ; BSR set to: 1
  1473                           ;Turn_counter.c: 962: }
  1474                           ;Turn_counter.c: 963: turns_percent = (grad*10)/((num_of_turns * 3600)/100);
  1475  000410  6A14               	clrf	___lwdiv@divisor+1,c
  1476  000412  0E64               	movlw	100
  1477  000414  6E13               	movwf	___lwdiv@divisor,c
  1478  000416  0E10               	movlw	16
  1479  000418  0100               	movlb	0	; () banked
  1480  00041A  6FAF               	movwf	??_main& (0+255),b
  1481  00041C  0E0E               	movlw	14
  1482  00041E  6FB0               	movwf	(??_main+1)& (0+255),b
  1483  000420  51AF               	movf	??_main& (0+255),w,b
  1484  000422  0101               	movlb	1	; () banked
  1485  000424  03F9               	mulwf	_num_of_turns& (0+255),b
  1486  000426  CFF3 F0B1          	movff	prodl,??_main+2
  1487  00042A  CFF4 F0B2          	movff	prodh,??_main+3
  1488  00042E  03FA               	mulwf	(_num_of_turns+1)& (0+255),b
  1489  000430  50F3               	movf	prodl,w,c
  1490  000432  0100               	movlb	0	; () banked
  1491  000434  27B2               	addwf	(??_main+3)& (0+255),f,b
  1492  000436  51B0               	movf	(??_main+1)& (0+255),w,b
  1493  000438  0101               	movlb	1	; () banked
  1494  00043A  03F9               	mulwf	_num_of_turns& (0+255),b
  1495  00043C  0100               	movlb	0	; () banked
  1496  00043E  50F3               	movf	prodl,w,c
  1497  000440  27B2               	addwf	(??_main+3)& (0+255),f,b
  1498  000442  C0B1  F011         	movff	??_main+2,___lwdiv@dividend
  1499  000446  C0B2  F012         	movff	??_main+3,___lwdiv@dividend+1
  1500  00044A  EC3C  F00C         	call	___lwdiv	;wreg free
  1501  00044E  C011  F1CB         	movff	?___lwdiv,_main$1934
  1502  000452  C012  F1CC         	movff	?___lwdiv+1,_main$1934+1
  1503                           
  1504                           ;Turn_counter.c: 962: }
  1505                           ;Turn_counter.c: 963: turns_percent = (grad*10)/((num_of_turns * 3600)/100);
  1506  000456  0E0A               	movlw	10
  1507  000458  0101               	movlb	1	; () banked
  1508  00045A  03DB               	mulwf	_grad& (0+255),b
  1509  00045C  CFF3 F0AF          	movff	prodl,??_main
  1510  000460  CFF4 F0B0          	movff	prodh,??_main+1
  1511  000464  03DC               	mulwf	(_grad+1)& (0+255),b
  1512  000466  50F3               	movf	prodl,w,c
  1513  000468  0100               	movlb	0	; () banked
  1514  00046A  27B0               	addwf	(??_main+1)& (0+255),f,b
  1515  00046C  C0AF  F011         	movff	??_main,___lwdiv@dividend
  1516  000470  C0B0  F012         	movff	??_main+1,___lwdiv@dividend+1
  1517  000474  C1CB  F013         	movff	_main$1934,___lwdiv@divisor
  1518  000478  C1CC  F014         	movff	_main$1934+1,___lwdiv@divisor+1
  1519  00047C  EC3C  F00C         	call	___lwdiv	;wreg free
  1520  000480  C011  F1F7         	movff	?___lwdiv,_turns_percent
  1521  000484  C012  F1F8         	movff	?___lwdiv+1,_turns_percent+1
  1522                           
  1523                           ;Turn_counter.c: 964: turns_percent_press = (unsigned int)((grad*10)/(((float)num_of_tur
      +                          ns*360.0)/100.0));
  1524  000488  6A2D               	clrf	___ftdiv@f2,c
  1525  00048A  0EC8               	movlw	200
  1526  00048C  6E2E               	movwf	___ftdiv@f2+1,c
  1527  00048E  0E42               	movlw	66
  1528  000490  6E2F               	movwf	___ftdiv@f2+2,c
  1529  000492  6A1F               	clrf	___ftmul@f2,c
  1530  000494  0EB4               	movlw	180
  1531  000496  6E20               	movwf	___ftmul@f2+1,c
  1532  000498  0E43               	movlw	67
  1533  00049A  6E21               	movwf	___ftmul@f2+2,c
  1534  00049C  C1F9  F019         	movff	_num_of_turns,___lwtoft@c
  1535  0004A0  C1FA  F01A         	movff	_num_of_turns+1,___lwtoft@c+1
  1536  0004A4  EC02  F00D         	call	___lwtoft	;wreg free
  1537  0004A8  C019  F01C         	movff	?___lwtoft,___ftmul@f1
  1538  0004AC  C01A  F01D         	movff	?___lwtoft+1,___ftmul@f1+1
  1539  0004B0  C01B  F01E         	movff	?___lwtoft+2,___ftmul@f1+2
  1540  0004B4  EC8E  F009         	call	___ftmul	;wreg free
  1541  0004B8  C01C  F02A         	movff	?___ftmul,___ftdiv@f1
  1542  0004BC  C01D  F02B         	movff	?___ftmul+1,___ftdiv@f1+1
  1543  0004C0  C01E  F02C         	movff	?___ftmul+2,___ftdiv@f1+2
  1544  0004C4  ECFC  F009         	call	___ftdiv	;wreg free
  1545  0004C8  C02A  F1C8         	movff	?___ftdiv,_main$1935
  1546  0004CC  C02B  F1C9         	movff	?___ftdiv+1,_main$1935+1
  1547  0004D0  C02C  F1CA         	movff	?___ftdiv+2,_main$1935+2
  1548                           
  1549                           ;Turn_counter.c: 964: turns_percent_press = (unsigned int)((grad*10)/(((float)num_of_tur
      +                          ns*360.0)/100.0));
  1550  0004D4  C1C8  F02D         	movff	_main$1935,___ftdiv@f2
  1551  0004D8  C1C9  F02E         	movff	_main$1935+1,___ftdiv@f2+1
  1552  0004DC  C1CA  F02F         	movff	_main$1935+2,___ftdiv@f2+2
  1553  0004E0  0E0A               	movlw	10
  1554  0004E2  0101               	movlb	1	; () banked
  1555  0004E4  03DB               	mulwf	_grad& (0+255),b
  1556  0004E6  CFF3 F0AF          	movff	prodl,??_main
  1557  0004EA  CFF4 F0B0          	movff	prodh,??_main+1
  1558  0004EE  03DC               	mulwf	(_grad+1)& (0+255),b
  1559  0004F0  50F3               	movf	prodl,w,c
  1560  0004F2  0100               	movlb	0	; () banked
  1561  0004F4  27B0               	addwf	(??_main+1)& (0+255),f,b
  1562  0004F6  C0AF  F019         	movff	??_main,___lwtoft@c
  1563  0004FA  C0B0  F01A         	movff	??_main+1,___lwtoft@c+1
  1564  0004FE  EC02  F00D         	call	___lwtoft	;wreg free
  1565  000502  C019  F02A         	movff	?___lwtoft,___ftdiv@f1
  1566  000506  C01A  F02B         	movff	?___lwtoft+1,___ftdiv@f1+1
  1567  00050A  C01B  F02C         	movff	?___lwtoft+2,___ftdiv@f1+2
  1568  00050E  ECFC  F009         	call	___ftdiv	;wreg free
  1569  000512  C02A  F033         	movff	?___ftdiv,___fttol@f1
  1570  000516  C02B  F034         	movff	?___ftdiv+1,___fttol@f1+1
  1571  00051A  C02C  F035         	movff	?___ftdiv+2,___fttol@f1+2
  1572  00051E  EC1E  F009         	call	___fttol	;wreg free
  1573  000522  C033  F1F5         	movff	?___fttol,_turns_percent_press
  1574  000526  C034  F1F6         	movff	?___fttol+1,_turns_percent_press+1
  1575                           
  1576                           ;Turn_counter.c: 966: if(ADC_current_rms > current_max)
  1577  00052A  0101               	movlb	1	; () banked
  1578  00052C  51F3               	movf	_ADC_current_rms& (0+255),w,b
  1579  00052E  5DFB               	subwf	_current_max& (0+255),w,b
  1580  000530  51F4               	movf	(_ADC_current_rms+1)& (0+255),w,b
  1581  000532  59FC               	subwfb	(_current_max+1)& (0+255),w,b
  1582  000534  E204               	bc	l3406
  1583                           
  1584                           ; BSR set to: 1
  1585                           ;Turn_counter.c: 967: overcurrent = 1;
  1586  000536  6BE2               	clrf	(_overcurrent+1)& (0+255),b
  1587  000538  0E01               	movlw	1
  1588  00053A  6FE1               	movwf	_overcurrent& (0+255),b
  1589  00053C  D003               	goto	l3408
  1590  00053E                     l3406:
  1591                           
  1592                           ; BSR set to: 1
  1593                           ;Turn_counter.c: 968: else
  1594                           ;Turn_counter.c: 969: overcurrent = 0;
  1595  00053E  0101               	movlb	1	; () banked
  1596  000540  6BE2               	clrf	(_overcurrent+1)& (0+255),b
  1597  000542  6BE1               	clrf	_overcurrent& (0+255),b
  1598  000544                     l3408:
  1599                           
  1600                           ;Turn_counter.c: 970: }
  1601                           ;Turn_counter.c: 971: if(CHANGE_MOTOR == 2)
  1602  000544  0E02               	movlw	2
  1603  000546  184A               	xorwf	_CHANGE_MOTOR,w,c
  1604  000548  104B               	iorwf	_CHANGE_MOTOR+1,w,c
  1605  00054A  E001 D326          	bnz	l3478
  1606                           
  1607                           ;Turn_counter.c: 972: {
  1608                           ;Turn_counter.c: 975: if(SET_MIN)
  1609  00054E  0101               	movlb	1	; () banked
  1610  000550  51EB               	movf	_SET_MIN& (0+255),w,b
  1611  000552  11EC               	iorwf	(_SET_MIN+1)& (0+255),w,b
  1612  000554  E03A               	bz	l3432
  1613                           
  1614                           ; BSR set to: 1
  1615                           ;Turn_counter.c: 976: {
  1616                           ;Turn_counter.c: 978: ADCON0bits.CHS = 0;
  1617  000556  94C2               	bcf	4034,2,c	;volatile
  1618  000558  96C2               	bcf	4034,3,c	;volatile
  1619  00055A  98C2               	bcf	4034,4,c	;volatile
  1620  00055C  9AC2               	bcf	4034,5,c	;volatile
  1621  00055E  9CC2               	bcf	4034,6,c	;volatile
  1622                           
  1623                           ; BSR set to: 1
  1624                           ;Turn_counter.c: 979: _delay((unsigned long)((10)*(40000000/4000000.0)));
  1625  000560  0E21               	movlw	33
  1626  000562                     u2517:
  1627  000562  2EE8               	decfsz	wreg,f,c
  1628  000564  D7FE               	bra	u2517
  1629  000566  F000               	nop	
  1630                           
  1631                           ;Turn_counter.c: 980: GO_nDONE = 1;
  1632  000568  82C2               	bsf	4034,1,c	;volatile
  1633                           
  1634                           ;Turn_counter.c: 981: _delay((unsigned long)((20)*(40000000/4000000.0)));
  1635  00056A  0E42               	movlw	66
  1636  00056C                     u2527:
  1637  00056C  2EE8               	decfsz	wreg,f,c
  1638  00056E  D7FE               	bra	u2527
  1639  000570  D000               	nop2	
  1640                           
  1641                           ;Turn_counter.c: 983: POT_MIN = (ADRESH<<8) | ADRESL;
  1642  000572  50C3               	movf	4035,w,c	;volatile
  1643  000574  CFC4 F0AF          	movff	4036,??_main	;volatile
  1644  000578  0100               	movlb	0	; () banked
  1645  00057A  6BB0               	clrf	(??_main+1)& (0+255),b
  1646  00057C  C0AF  F0B0         	movff	??_main,??_main+1
  1647  000580  6BAF               	clrf	??_main& (0+255),b
  1648  000582  11AF               	iorwf	??_main& (0+255),w,b
  1649  000584  6E48               	movwf	_POT_MIN,c
  1650  000586  51B0               	movf	(??_main+1)& (0+255),w,b
  1651  000588  6E49               	movwf	_POT_MIN+1,c
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;Turn_counter.c: 984: PIR1bits.ADIF = 0;
  1655  00058A  9C9E               	bcf	3998,6,c	;volatile
  1656                           
  1657                           ; BSR set to: 0
  1658                           ;Turn_counter.c: 986: EEPROM_WrByte(9,POT_MIN & 0x00ff);
  1659  00058C  C048  F011         	movff	_POT_MIN,EEPROM_WrByte@bData
  1660  000590  0E09               	movlw	9
  1661  000592  EC83  F00C         	call	_EEPROM_WrByte
  1662                           
  1663                           ;Turn_counter.c: 987: _delay((unsigned long)((5)*(40000000/4000.0)));
  1664  000596  0E41               	movlw	65
  1665  000598  0100               	movlb	0	; () banked
  1666  00059A  6FAF               	movwf	??_main& (0+255),b
  1667  00059C  0EEE               	movlw	238
  1668  00059E                     u2537:
  1669  00059E  2EE8               	decfsz	wreg,f,c
  1670  0005A0  D7FE               	bra	u2537
  1671  0005A2  2FAF               	decfsz	??_main& (0+255),f,b
  1672  0005A4  D7FC               	bra	u2537
  1673  0005A6  F000               	nop	
  1674                           
  1675                           ;Turn_counter.c: 988: EEPROM_WrByte(10,POT_MIN >> 8);
  1676  0005A8  5049               	movf	_POT_MIN+1,w,c
  1677  0005AA  6E11               	movwf	EEPROM_WrByte@bData,c
  1678  0005AC  0E0A               	movlw	10
  1679  0005AE  EC83  F00C         	call	_EEPROM_WrByte
  1680                           
  1681                           ;Turn_counter.c: 989: _delay((unsigned long)((5)*(40000000/4000.0)));
  1682  0005B2  0E41               	movlw	65
  1683  0005B4  0100               	movlb	0	; () banked
  1684  0005B6  6FAF               	movwf	??_main& (0+255),b
  1685  0005B8  0EEE               	movlw	238
  1686  0005BA                     u2547:
  1687  0005BA  2EE8               	decfsz	wreg,f,c
  1688  0005BC  D7FE               	bra	u2547
  1689  0005BE  2FAF               	decfsz	??_main& (0+255),f,b
  1690  0005C0  D7FC               	bra	u2547
  1691  0005C2  F000               	nop	
  1692                           
  1693                           ;Turn_counter.c: 990: SET_MIN = 0;
  1694  0005C4  0101               	movlb	1	; () banked
  1695  0005C6  6BEC               	clrf	(_SET_MIN+1)& (0+255),b
  1696  0005C8  6BEB               	clrf	_SET_MIN& (0+255),b
  1697  0005CA                     l3432:
  1698                           
  1699                           ; BSR set to: 1
  1700                           ;Turn_counter.c: 991: }
  1701                           ;Turn_counter.c: 993: if (SET_MAX)
  1702  0005CA  0101               	movlb	1	; () banked
  1703  0005CC  51E9               	movf	_SET_MAX& (0+255),w,b
  1704  0005CE  11EA               	iorwf	(_SET_MAX+1)& (0+255),w,b
  1705  0005D0  E03A               	bz	l3454
  1706                           
  1707                           ; BSR set to: 1
  1708                           ;Turn_counter.c: 994: {
  1709                           ;Turn_counter.c: 995: ADCON0bits.CHS = 0;
  1710  0005D2  94C2               	bcf	4034,2,c	;volatile
  1711  0005D4  96C2               	bcf	4034,3,c	;volatile
  1712  0005D6  98C2               	bcf	4034,4,c	;volatile
  1713  0005D8  9AC2               	bcf	4034,5,c	;volatile
  1714  0005DA  9CC2               	bcf	4034,6,c	;volatile
  1715                           
  1716                           ; BSR set to: 1
  1717                           ;Turn_counter.c: 996: _delay((unsigned long)((10)*(40000000/4000000.0)));
  1718  0005DC  0E21               	movlw	33
  1719  0005DE                     u2557:
  1720  0005DE  2EE8               	decfsz	wreg,f,c
  1721  0005E0  D7FE               	bra	u2557
  1722  0005E2  F000               	nop	
  1723                           
  1724                           ;Turn_counter.c: 997: GO_nDONE = 1;
  1725  0005E4  82C2               	bsf	4034,1,c	;volatile
  1726                           
  1727                           ;Turn_counter.c: 998: _delay((unsigned long)((20)*(40000000/4000000.0)));
  1728  0005E6  0E42               	movlw	66
  1729  0005E8                     u2567:
  1730  0005E8  2EE8               	decfsz	wreg,f,c
  1731  0005EA  D7FE               	bra	u2567
  1732  0005EC  D000               	nop2	
  1733                           
  1734                           ;Turn_counter.c: 1000: POT_MAX = (ADRESH<<8) | ADRESL;
  1735  0005EE  50C3               	movf	4035,w,c	;volatile
  1736  0005F0  CFC4 F0AF          	movff	4036,??_main	;volatile
  1737  0005F4  0100               	movlb	0	; () banked
  1738  0005F6  6BB0               	clrf	(??_main+1)& (0+255),b
  1739  0005F8  C0AF  F0B0         	movff	??_main,??_main+1
  1740  0005FC  6BAF               	clrf	??_main& (0+255),b
  1741  0005FE  11AF               	iorwf	??_main& (0+255),w,b
  1742  000600  6E46               	movwf	_POT_MAX,c
  1743  000602  51B0               	movf	(??_main+1)& (0+255),w,b
  1744  000604  6E47               	movwf	_POT_MAX+1,c
  1745                           
  1746                           ; BSR set to: 0
  1747                           ;Turn_counter.c: 1001: PIR1bits.ADIF = 0;
  1748  000606  9C9E               	bcf	3998,6,c	;volatile
  1749                           
  1750                           ; BSR set to: 0
  1751                           ;Turn_counter.c: 1003: EEPROM_WrByte(11,POT_MAX & 0x00ff);
  1752  000608  C046  F011         	movff	_POT_MAX,EEPROM_WrByte@bData
  1753  00060C  0E0B               	movlw	11
  1754  00060E  EC83  F00C         	call	_EEPROM_WrByte
  1755                           
  1756                           ;Turn_counter.c: 1004: _delay((unsigned long)((5)*(40000000/4000.0)));
  1757  000612  0E41               	movlw	65
  1758  000614  0100               	movlb	0	; () banked
  1759  000616  6FAF               	movwf	??_main& (0+255),b
  1760  000618  0EEE               	movlw	238
  1761  00061A                     u2577:
  1762  00061A  2EE8               	decfsz	wreg,f,c
  1763  00061C  D7FE               	bra	u2577
  1764  00061E  2FAF               	decfsz	??_main& (0+255),f,b
  1765  000620  D7FC               	bra	u2577
  1766  000622  F000               	nop	
  1767                           
  1768                           ;Turn_counter.c: 1005: EEPROM_WrByte(12,POT_MAX >> 8);
  1769  000624  5047               	movf	_POT_MAX+1,w,c
  1770  000626  6E11               	movwf	EEPROM_WrByte@bData,c
  1771  000628  0E0C               	movlw	12
  1772  00062A  EC83  F00C         	call	_EEPROM_WrByte
  1773                           
  1774                           ;Turn_counter.c: 1006: _delay((unsigned long)((5)*(40000000/4000.0)));
  1775  00062E  0E41               	movlw	65
  1776  000630  0100               	movlb	0	; () banked
  1777  000632  6FAF               	movwf	??_main& (0+255),b
  1778  000634  0EEE               	movlw	238
  1779  000636                     u2587:
  1780  000636  2EE8               	decfsz	wreg,f,c
  1781  000638  D7FE               	bra	u2587
  1782  00063A  2FAF               	decfsz	??_main& (0+255),f,b
  1783  00063C  D7FC               	bra	u2587
  1784  00063E  F000               	nop	
  1785                           
  1786                           ;Turn_counter.c: 1007: SET_MAX = 0;
  1787  000640  0101               	movlb	1	; () banked
  1788  000642  6BEA               	clrf	(_SET_MAX+1)& (0+255),b
  1789  000644  6BE9               	clrf	_SET_MAX& (0+255),b
  1790  000646                     l3454:
  1791                           
  1792                           ; BSR set to: 1
  1793                           ;Turn_counter.c: 1008: }
  1794                           ;Turn_counter.c: 1010: unsigned long y = 100;
  1795  000646  0E64               	movlw	100
  1796  000648  0101               	movlb	1	; () banked
  1797  00064A  6FD3               	movwf	main@y& (0+255),b
  1798  00064C  6BD4               	clrf	(main@y+1)& (0+255),b
  1799  00064E  6BD5               	clrf	(main@y+2)& (0+255),b
  1800  000650  6BD6               	clrf	(main@y+3)& (0+255),b
  1801                           
  1802                           ; BSR set to: 1
  1803                           ;Turn_counter.c: 1011: grad_step = ((POT_MAX-POT_MIN)*y)/GRAD_MAX;
  1804  000652  C048  F0AF         	movff	_POT_MIN,??_main
  1805  000656  C049  F0B0         	movff	_POT_MIN+1,??_main+1
  1806  00065A  0100               	movlb	0	; () banked
  1807  00065C  1FAF               	comf	??_main& (0+255),f,b
  1808  00065E  1FB0               	comf	(??_main+1)& (0+255),f,b
  1809  000660  4BAF               	infsnz	??_main& (0+255),f,b
  1810  000662  2BB0               	incf	(??_main+1)& (0+255),f,b
  1811  000664  5046               	movf	_POT_MAX,w,c
  1812  000666  25AF               	addwf	??_main& (0+255),w,b
  1813  000668  6FB1               	movwf	(??_main+2)& (0+255),b
  1814  00066A  5047               	movf	_POT_MAX+1,w,c
  1815  00066C  21B0               	addwfc	(??_main+1)& (0+255),w,b
  1816  00066E  6FB2               	movwf	(??_main+3)& (0+255),b
  1817  000670  6BB3               	clrf	(??_main+4)& (0+255),b
  1818  000672  6BB4               	clrf	(??_main+5)& (0+255),b
  1819  000674  51B1               	movf	(??_main+2)& (0+255),w,b
  1820  000676  0101               	movlb	1	; () banked
  1821  000678  03D3               	mulwf	main@y& (0+255),b
  1822  00067A  CFF3 F0B5          	movff	prodl,??_main+6
  1823  00067E  CFF4 F0B6          	movff	prodh,??_main+7
  1824  000682  0100               	movlb	0	; () banked
  1825  000684  6BB7               	clrf	(??_main+8)& (0+255),b
  1826  000686  6BB8               	clrf	(??_main+9)& (0+255),b
  1827  000688  0101               	movlb	1	; () banked
  1828  00068A  03D4               	mulwf	(main@y+1)& (0+255),b
  1829  00068C  0100               	movlb	0	; () banked
  1830  00068E  50F3               	movf	prodl,w,c
  1831  000690  27B6               	addwf	(??_main+7)& (0+255),f,b
  1832  000692  50F4               	movf	prodh,w,c
  1833  000694  23B7               	addwfc	(??_main+8)& (0+255),f,b
  1834  000696  0E00               	movlw	0
  1835  000698  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1836  00069A  51B2               	movf	(??_main+3)& (0+255),w,b
  1837  00069C  0101               	movlb	1	; () banked
  1838  00069E  03D3               	mulwf	main@y& (0+255),b
  1839  0006A0  0100               	movlb	0	; () banked
  1840  0006A2  50F3               	movf	prodl,w,c
  1841  0006A4  27B6               	addwf	(??_main+7)& (0+255),f,b
  1842  0006A6  50F4               	movf	prodh,w,c
  1843  0006A8  23B7               	addwfc	(??_main+8)& (0+255),f,b
  1844  0006AA  0E00               	movlw	0
  1845  0006AC  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1846  0006AE  51B1               	movf	(??_main+2)& (0+255),w,b
  1847  0006B0  0101               	movlb	1	; () banked
  1848  0006B2  03D5               	mulwf	(main@y+2)& (0+255),b
  1849  0006B4  0100               	movlb	0	; () banked
  1850  0006B6  50F3               	movf	prodl,w,c
  1851  0006B8  27B7               	addwf	(??_main+8)& (0+255),f,b
  1852  0006BA  50F4               	movf	prodh,w,c
  1853  0006BC  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1854  0006BE  51B2               	movf	(??_main+3)& (0+255),w,b
  1855  0006C0  0101               	movlb	1	; () banked
  1856  0006C2  03D4               	mulwf	(main@y+1)& (0+255),b
  1857  0006C4  0100               	movlb	0	; () banked
  1858  0006C6  50F3               	movf	prodl,w,c
  1859  0006C8  27B7               	addwf	(??_main+8)& (0+255),f,b
  1860  0006CA  50F4               	movf	prodh,w,c
  1861  0006CC  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1862  0006CE  51B3               	movf	(??_main+4)& (0+255),w,b
  1863  0006D0  0101               	movlb	1	; () banked
  1864  0006D2  03D3               	mulwf	main@y& (0+255),b
  1865  0006D4  0100               	movlb	0	; () banked
  1866  0006D6  50F3               	movf	prodl,w,c
  1867  0006D8  27B7               	addwf	(??_main+8)& (0+255),f,b
  1868  0006DA  50F4               	movf	prodh,w,c
  1869  0006DC  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1870  0006DE  0101               	movlb	1	; () banked
  1871  0006E0  51D6               	movf	(main@y+3)& (0+255),w,b
  1872  0006E2  0100               	movlb	0	; () banked
  1873  0006E4  03B1               	mulwf	(??_main+2)& (0+255),b
  1874  0006E6  50F3               	movf	prodl,w,c
  1875  0006E8  27B8               	addwf	(??_main+9)& (0+255),f,b
  1876  0006EA  51B2               	movf	(??_main+3)& (0+255),w,b
  1877  0006EC  0101               	movlb	1	; () banked
  1878  0006EE  03D5               	mulwf	(main@y+2)& (0+255),b
  1879  0006F0  0100               	movlb	0	; () banked
  1880  0006F2  50F3               	movf	prodl,w,c
  1881  0006F4  27B8               	addwf	(??_main+9)& (0+255),f,b
  1882  0006F6  51B3               	movf	(??_main+4)& (0+255),w,b
  1883  0006F8  0101               	movlb	1	; () banked
  1884  0006FA  03D4               	mulwf	(main@y+1)& (0+255),b
  1885  0006FC  0100               	movlb	0	; () banked
  1886  0006FE  50F3               	movf	prodl,w,c
  1887  000700  27B8               	addwf	(??_main+9)& (0+255),f,b
  1888  000702  51B4               	movf	(??_main+5)& (0+255),w,b
  1889  000704  0101               	movlb	1	; () banked
  1890  000706  03D3               	mulwf	main@y& (0+255),b
  1891  000708  0100               	movlb	0	; () banked
  1892  00070A  50F3               	movf	prodl,w,c
  1893  00070C  27B8               	addwf	(??_main+9)& (0+255),f,b
  1894  00070E  C0B5  F011         	movff	??_main+6,___lldiv@dividend
  1895  000712  C0B6  F012         	movff	??_main+7,___lldiv@dividend+1
  1896  000716  C0B7  F013         	movff	??_main+8,___lldiv@dividend+2
  1897  00071A  C0B8  F014         	movff	??_main+9,___lldiv@dividend+3
  1898  00071E  C1E7  F015         	movff	_GRAD_MAX,___lldiv@divisor
  1899  000722  C1E8  F016         	movff	_GRAD_MAX+1,___lldiv@divisor+1
  1900  000726  6A17               	clrf	___lldiv@divisor+2,c
  1901  000728  6A18               	clrf	___lldiv@divisor+3,c
  1902  00072A  ECD2  F00B         	call	___lldiv	;wreg free
  1903  00072E  C011  F1E5         	movff	?___lldiv,_grad_step
  1904  000732  C012  F1E6         	movff	?___lldiv+1,_grad_step+1
  1905                           
  1906                           ;Turn_counter.c: 1012: percent_step = ((POT_MAX-POT_MIN)*y)/100;
  1907  000736  C048  F0AF         	movff	_POT_MIN,??_main
  1908  00073A  C049  F0B0         	movff	_POT_MIN+1,??_main+1
  1909  00073E  0100               	movlb	0	; () banked
  1910  000740  1FAF               	comf	??_main& (0+255),f,b
  1911  000742  1FB0               	comf	(??_main+1)& (0+255),f,b
  1912  000744  4BAF               	infsnz	??_main& (0+255),f,b
  1913  000746  2BB0               	incf	(??_main+1)& (0+255),f,b
  1914  000748  5046               	movf	_POT_MAX,w,c
  1915  00074A  25AF               	addwf	??_main& (0+255),w,b
  1916  00074C  6FB1               	movwf	(??_main+2)& (0+255),b
  1917  00074E  5047               	movf	_POT_MAX+1,w,c
  1918  000750  21B0               	addwfc	(??_main+1)& (0+255),w,b
  1919  000752  6FB2               	movwf	(??_main+3)& (0+255),b
  1920  000754  6BB3               	clrf	(??_main+4)& (0+255),b
  1921  000756  6BB4               	clrf	(??_main+5)& (0+255),b
  1922  000758  51B1               	movf	(??_main+2)& (0+255),w,b
  1923  00075A  0101               	movlb	1	; () banked
  1924  00075C  03D3               	mulwf	main@y& (0+255),b
  1925  00075E  CFF3 F0B5          	movff	prodl,??_main+6
  1926  000762  CFF4 F0B6          	movff	prodh,??_main+7
  1927  000766  0100               	movlb	0	; () banked
  1928  000768  6BB7               	clrf	(??_main+8)& (0+255),b
  1929  00076A  6BB8               	clrf	(??_main+9)& (0+255),b
  1930  00076C  0101               	movlb	1	; () banked
  1931  00076E  03D4               	mulwf	(main@y+1)& (0+255),b
  1932  000770  0100               	movlb	0	; () banked
  1933  000772  50F3               	movf	prodl,w,c
  1934  000774  27B6               	addwf	(??_main+7)& (0+255),f,b
  1935  000776  50F4               	movf	prodh,w,c
  1936  000778  23B7               	addwfc	(??_main+8)& (0+255),f,b
  1937  00077A  0E00               	movlw	0
  1938  00077C  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1939  00077E  51B2               	movf	(??_main+3)& (0+255),w,b
  1940  000780  0101               	movlb	1	; () banked
  1941  000782  03D3               	mulwf	main@y& (0+255),b
  1942  000784  0100               	movlb	0	; () banked
  1943  000786  50F3               	movf	prodl,w,c
  1944  000788  27B6               	addwf	(??_main+7)& (0+255),f,b
  1945  00078A  50F4               	movf	prodh,w,c
  1946  00078C  23B7               	addwfc	(??_main+8)& (0+255),f,b
  1947  00078E  0E00               	movlw	0
  1948  000790  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1949  000792  51B1               	movf	(??_main+2)& (0+255),w,b
  1950  000794  0101               	movlb	1	; () banked
  1951  000796  03D5               	mulwf	(main@y+2)& (0+255),b
  1952  000798  0100               	movlb	0	; () banked
  1953  00079A  50F3               	movf	prodl,w,c
  1954  00079C  27B7               	addwf	(??_main+8)& (0+255),f,b
  1955  00079E  50F4               	movf	prodh,w,c
  1956  0007A0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1957  0007A2  51B2               	movf	(??_main+3)& (0+255),w,b
  1958  0007A4  0101               	movlb	1	; () banked
  1959  0007A6  03D4               	mulwf	(main@y+1)& (0+255),b
  1960  0007A8  0100               	movlb	0	; () banked
  1961  0007AA  50F3               	movf	prodl,w,c
  1962  0007AC  27B7               	addwf	(??_main+8)& (0+255),f,b
  1963  0007AE  50F4               	movf	prodh,w,c
  1964  0007B0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1965  0007B2  51B3               	movf	(??_main+4)& (0+255),w,b
  1966  0007B4  0101               	movlb	1	; () banked
  1967  0007B6  03D3               	mulwf	main@y& (0+255),b
  1968  0007B8  0100               	movlb	0	; () banked
  1969  0007BA  50F3               	movf	prodl,w,c
  1970  0007BC  27B7               	addwf	(??_main+8)& (0+255),f,b
  1971  0007BE  50F4               	movf	prodh,w,c
  1972  0007C0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  1973  0007C2  0101               	movlb	1	; () banked
  1974  0007C4  51D6               	movf	(main@y+3)& (0+255),w,b
  1975  0007C6  0100               	movlb	0	; () banked
  1976  0007C8  03B1               	mulwf	(??_main+2)& (0+255),b
  1977  0007CA  50F3               	movf	prodl,w,c
  1978  0007CC  27B8               	addwf	(??_main+9)& (0+255),f,b
  1979  0007CE  51B2               	movf	(??_main+3)& (0+255),w,b
  1980  0007D0  0101               	movlb	1	; () banked
  1981  0007D2  03D5               	mulwf	(main@y+2)& (0+255),b
  1982  0007D4  0100               	movlb	0	; () banked
  1983  0007D6  50F3               	movf	prodl,w,c
  1984  0007D8  27B8               	addwf	(??_main+9)& (0+255),f,b
  1985  0007DA  51B3               	movf	(??_main+4)& (0+255),w,b
  1986  0007DC  0101               	movlb	1	; () banked
  1987  0007DE  03D4               	mulwf	(main@y+1)& (0+255),b
  1988  0007E0  0100               	movlb	0	; () banked
  1989  0007E2  50F3               	movf	prodl,w,c
  1990  0007E4  27B8               	addwf	(??_main+9)& (0+255),f,b
  1991  0007E6  51B4               	movf	(??_main+5)& (0+255),w,b
  1992  0007E8  0101               	movlb	1	; () banked
  1993  0007EA  03D3               	mulwf	main@y& (0+255),b
  1994  0007EC  0100               	movlb	0	; () banked
  1995  0007EE  50F3               	movf	prodl,w,c
  1996  0007F0  27B8               	addwf	(??_main+9)& (0+255),f,b
  1997  0007F2  C0B5  F011         	movff	??_main+6,___lldiv@dividend
  1998  0007F6  C0B6  F012         	movff	??_main+7,___lldiv@dividend+1
  1999  0007FA  C0B7  F013         	movff	??_main+8,___lldiv@dividend+2
  2000  0007FE  C0B8  F014         	movff	??_main+9,___lldiv@dividend+3
  2001  000802  0E64               	movlw	100
  2002  000804  6E15               	movwf	___lldiv@divisor,c
  2003  000806  6A16               	clrf	___lldiv@divisor+1,c
  2004  000808  6A17               	clrf	___lldiv@divisor+2,c
  2005  00080A  6A18               	clrf	___lldiv@divisor+3,c
  2006  00080C  ECD2  F00B         	call	___lldiv	;wreg free
  2007  000810  C011  F1E3         	movff	?___lldiv,_percent_step
  2008  000814  C012  F1E4         	movff	?___lldiv+1,_percent_step+1
  2009                           
  2010                           ;Turn_counter.c: 1015: ADCON0bits.CHS = 0;
  2011  000818  94C2               	bcf	4034,2,c	;volatile
  2012  00081A  96C2               	bcf	4034,3,c	;volatile
  2013  00081C  98C2               	bcf	4034,4,c	;volatile
  2014  00081E  9AC2               	bcf	4034,5,c	;volatile
  2015  000820  9CC2               	bcf	4034,6,c	;volatile
  2016                           
  2017                           ;Turn_counter.c: 1016: _delay((unsigned long)((10)*(40000000/4000000.0)));
  2018  000822  0E21               	movlw	33
  2019  000824                     u2597:
  2020  000824  2EE8               	decfsz	wreg,f,c
  2021  000826  D7FE               	bra	u2597
  2022  000828  F000               	nop	
  2023                           
  2024                           ;Turn_counter.c: 1017: GO_nDONE = 1;
  2025  00082A  82C2               	bsf	4034,1,c	;volatile
  2026                           
  2027                           ;Turn_counter.c: 1018: _delay((unsigned long)((20)*(40000000/4000000.0)));
  2028  00082C  0E42               	movlw	66
  2029  00082E                     u2607:
  2030  00082E  2EE8               	decfsz	wreg,f,c
  2031  000830  D7FE               	bra	u2607
  2032  000832  D000               	nop2	
  2033                           
  2034                           ;Turn_counter.c: 1020: ADC_RES_BUF = (ADRESH<<8) | ADRESL;
  2035  000834  50C3               	movf	4035,w,c	;volatile
  2036  000836  CFC4 F0AF          	movff	4036,??_main	;volatile
  2037  00083A  0100               	movlb	0	; () banked
  2038  00083C  6BB0               	clrf	(??_main+1)& (0+255),b
  2039  00083E  C0AF  F0B0         	movff	??_main,??_main+1
  2040  000842  6BAF               	clrf	??_main& (0+255),b
  2041  000844  11AF               	iorwf	??_main& (0+255),w,b
  2042  000846  0101               	movlb	1	; () banked
  2043  000848  6FED               	movwf	_ADC_RES_BUF& (0+255),b
  2044  00084A  0100               	movlb	0	; () banked
  2045  00084C  51B0               	movf	(??_main+1)& (0+255),w,b
  2046  00084E  0101               	movlb	1	; () banked
  2047  000850  6FEE               	movwf	(_ADC_RES_BUF+1)& (0+255),b
  2048                           
  2049                           ; BSR set to: 1
  2050                           ;Turn_counter.c: 1021: PIR1bits.ADIF = 0;
  2051  000852  9C9E               	bcf	3998,6,c	;volatile
  2052                           
  2053                           ; BSR set to: 1
  2054                           ;Turn_counter.c: 1023: if(ADC_RES_BUF < POT_MIN)
  2055  000854  5048               	movf	_POT_MIN,w,c
  2056  000856  5DED               	subwf	_ADC_RES_BUF& (0+255),w,b
  2057  000858  5049               	movf	_POT_MIN+1,w,c
  2058  00085A  59EE               	subwfb	(_ADC_RES_BUF+1)& (0+255),w,b
  2059  00085C  E204               	bc	l3476
  2060                           
  2061                           ; BSR set to: 1
  2062                           ;Turn_counter.c: 1024: {
  2063                           ;Turn_counter.c: 1025: ADC_RES_BUF = POT_MIN;
  2064  00085E  C048  F1ED         	movff	_POT_MIN,_ADC_RES_BUF
  2065  000862  C049  F1EE         	movff	_POT_MIN+1,_ADC_RES_BUF+1
  2066  000866                     l3476:
  2067                           
  2068                           ; BSR set to: 1
  2069                           ;Turn_counter.c: 1026: }
  2070                           ;Turn_counter.c: 1029: grad = ((ADC_RES_BUF-POT_MIN)*y)/grad_step;
  2071  000866  C048  F0AF         	movff	_POT_MIN,??_main
  2072  00086A  C049  F0B0         	movff	_POT_MIN+1,??_main+1
  2073  00086E  0100               	movlb	0	; () banked
  2074  000870  1FAF               	comf	??_main& (0+255),f,b
  2075  000872  1FB0               	comf	(??_main+1)& (0+255),f,b
  2076  000874  4BAF               	infsnz	??_main& (0+255),f,b
  2077  000876  2BB0               	incf	(??_main+1)& (0+255),f,b
  2078  000878  0101               	movlb	1	; () banked
  2079  00087A  51ED               	movf	_ADC_RES_BUF& (0+255),w,b
  2080  00087C  0100               	movlb	0	; () banked
  2081  00087E  25AF               	addwf	??_main& (0+255),w,b
  2082  000880  6FB1               	movwf	(??_main+2)& (0+255),b
  2083  000882  0101               	movlb	1	; () banked
  2084  000884  51EE               	movf	(_ADC_RES_BUF+1)& (0+255),w,b
  2085  000886  0100               	movlb	0	; () banked
  2086  000888  21B0               	addwfc	(??_main+1)& (0+255),w,b
  2087  00088A  6FB2               	movwf	(??_main+3)& (0+255),b
  2088  00088C  6BB3               	clrf	(??_main+4)& (0+255),b
  2089  00088E  6BB4               	clrf	(??_main+5)& (0+255),b
  2090  000890  51B1               	movf	(??_main+2)& (0+255),w,b
  2091  000892  0101               	movlb	1	; () banked
  2092  000894  03D3               	mulwf	main@y& (0+255),b
  2093  000896  CFF3 F0B5          	movff	prodl,??_main+6
  2094  00089A  CFF4 F0B6          	movff	prodh,??_main+7
  2095  00089E  0100               	movlb	0	; () banked
  2096  0008A0  6BB7               	clrf	(??_main+8)& (0+255),b
  2097  0008A2  6BB8               	clrf	(??_main+9)& (0+255),b
  2098  0008A4  0101               	movlb	1	; () banked
  2099  0008A6  03D4               	mulwf	(main@y+1)& (0+255),b
  2100  0008A8  0100               	movlb	0	; () banked
  2101  0008AA  50F3               	movf	prodl,w,c
  2102  0008AC  27B6               	addwf	(??_main+7)& (0+255),f,b
  2103  0008AE  50F4               	movf	prodh,w,c
  2104  0008B0  23B7               	addwfc	(??_main+8)& (0+255),f,b
  2105  0008B2  0E00               	movlw	0
  2106  0008B4  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2107  0008B6  51B2               	movf	(??_main+3)& (0+255),w,b
  2108  0008B8  0101               	movlb	1	; () banked
  2109  0008BA  03D3               	mulwf	main@y& (0+255),b
  2110  0008BC  0100               	movlb	0	; () banked
  2111  0008BE  50F3               	movf	prodl,w,c
  2112  0008C0  27B6               	addwf	(??_main+7)& (0+255),f,b
  2113  0008C2  50F4               	movf	prodh,w,c
  2114  0008C4  23B7               	addwfc	(??_main+8)& (0+255),f,b
  2115  0008C6  0E00               	movlw	0
  2116  0008C8  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2117  0008CA  51B1               	movf	(??_main+2)& (0+255),w,b
  2118  0008CC  0101               	movlb	1	; () banked
  2119  0008CE  03D5               	mulwf	(main@y+2)& (0+255),b
  2120  0008D0  0100               	movlb	0	; () banked
  2121  0008D2  50F3               	movf	prodl,w,c
  2122  0008D4  27B7               	addwf	(??_main+8)& (0+255),f,b
  2123  0008D6  50F4               	movf	prodh,w,c
  2124  0008D8  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2125  0008DA  51B2               	movf	(??_main+3)& (0+255),w,b
  2126  0008DC  0101               	movlb	1	; () banked
  2127  0008DE  03D4               	mulwf	(main@y+1)& (0+255),b
  2128  0008E0  0100               	movlb	0	; () banked
  2129  0008E2  50F3               	movf	prodl,w,c
  2130  0008E4  27B7               	addwf	(??_main+8)& (0+255),f,b
  2131  0008E6  50F4               	movf	prodh,w,c
  2132  0008E8  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2133  0008EA  51B3               	movf	(??_main+4)& (0+255),w,b
  2134  0008EC  0101               	movlb	1	; () banked
  2135  0008EE  03D3               	mulwf	main@y& (0+255),b
  2136  0008F0  0100               	movlb	0	; () banked
  2137  0008F2  50F3               	movf	prodl,w,c
  2138  0008F4  27B7               	addwf	(??_main+8)& (0+255),f,b
  2139  0008F6  50F4               	movf	prodh,w,c
  2140  0008F8  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2141  0008FA  0101               	movlb	1	; () banked
  2142  0008FC  51D6               	movf	(main@y+3)& (0+255),w,b
  2143  0008FE  0100               	movlb	0	; () banked
  2144  000900  03B1               	mulwf	(??_main+2)& (0+255),b
  2145  000902  50F3               	movf	prodl,w,c
  2146  000904  27B8               	addwf	(??_main+9)& (0+255),f,b
  2147  000906  51B2               	movf	(??_main+3)& (0+255),w,b
  2148  000908  0101               	movlb	1	; () banked
  2149  00090A  03D5               	mulwf	(main@y+2)& (0+255),b
  2150  00090C  0100               	movlb	0	; () banked
  2151  00090E  50F3               	movf	prodl,w,c
  2152  000910  27B8               	addwf	(??_main+9)& (0+255),f,b
  2153  000912  51B3               	movf	(??_main+4)& (0+255),w,b
  2154  000914  0101               	movlb	1	; () banked
  2155  000916  03D4               	mulwf	(main@y+1)& (0+255),b
  2156  000918  0100               	movlb	0	; () banked
  2157  00091A  50F3               	movf	prodl,w,c
  2158  00091C  27B8               	addwf	(??_main+9)& (0+255),f,b
  2159  00091E  51B4               	movf	(??_main+5)& (0+255),w,b
  2160  000920  0101               	movlb	1	; () banked
  2161  000922  03D3               	mulwf	main@y& (0+255),b
  2162  000924  0100               	movlb	0	; () banked
  2163  000926  50F3               	movf	prodl,w,c
  2164  000928  27B8               	addwf	(??_main+9)& (0+255),f,b
  2165  00092A  C0B5  F011         	movff	??_main+6,___lldiv@dividend
  2166  00092E  C0B6  F012         	movff	??_main+7,___lldiv@dividend+1
  2167  000932  C0B7  F013         	movff	??_main+8,___lldiv@dividend+2
  2168  000936  C0B8  F014         	movff	??_main+9,___lldiv@dividend+3
  2169  00093A  C1E5  F015         	movff	_grad_step,___lldiv@divisor
  2170  00093E  C1E6  F016         	movff	_grad_step+1,___lldiv@divisor+1
  2171  000942  6A17               	clrf	___lldiv@divisor+2,c
  2172  000944  6A18               	clrf	___lldiv@divisor+3,c
  2173  000946  ECD2  F00B         	call	___lldiv	;wreg free
  2174  00094A  C011  F1DB         	movff	?___lldiv,_grad
  2175  00094E  C012  F1DC         	movff	?___lldiv+1,_grad+1
  2176                           
  2177                           ;Turn_counter.c: 1031: turns_percent = ((ADC_RES_BUF-POT_MIN)*y)/percent_step;
  2178  000952  C048  F0AF         	movff	_POT_MIN,??_main
  2179  000956  C049  F0B0         	movff	_POT_MIN+1,??_main+1
  2180  00095A  0100               	movlb	0	; () banked
  2181  00095C  1FAF               	comf	??_main& (0+255),f,b
  2182  00095E  1FB0               	comf	(??_main+1)& (0+255),f,b
  2183  000960  4BAF               	infsnz	??_main& (0+255),f,b
  2184  000962  2BB0               	incf	(??_main+1)& (0+255),f,b
  2185  000964  0101               	movlb	1	; () banked
  2186  000966  51ED               	movf	_ADC_RES_BUF& (0+255),w,b
  2187  000968  0100               	movlb	0	; () banked
  2188  00096A  25AF               	addwf	??_main& (0+255),w,b
  2189  00096C  6FB1               	movwf	(??_main+2)& (0+255),b
  2190  00096E  0101               	movlb	1	; () banked
  2191  000970  51EE               	movf	(_ADC_RES_BUF+1)& (0+255),w,b
  2192  000972  0100               	movlb	0	; () banked
  2193  000974  21B0               	addwfc	(??_main+1)& (0+255),w,b
  2194  000976  6FB2               	movwf	(??_main+3)& (0+255),b
  2195  000978  6BB3               	clrf	(??_main+4)& (0+255),b
  2196  00097A  6BB4               	clrf	(??_main+5)& (0+255),b
  2197  00097C  51B1               	movf	(??_main+2)& (0+255),w,b
  2198  00097E  0101               	movlb	1	; () banked
  2199  000980  03D3               	mulwf	main@y& (0+255),b
  2200  000982  CFF3 F0B5          	movff	prodl,??_main+6
  2201  000986  CFF4 F0B6          	movff	prodh,??_main+7
  2202  00098A  0100               	movlb	0	; () banked
  2203  00098C  6BB7               	clrf	(??_main+8)& (0+255),b
  2204  00098E  6BB8               	clrf	(??_main+9)& (0+255),b
  2205  000990  0101               	movlb	1	; () banked
  2206  000992  03D4               	mulwf	(main@y+1)& (0+255),b
  2207  000994  0100               	movlb	0	; () banked
  2208  000996  50F3               	movf	prodl,w,c
  2209  000998  27B6               	addwf	(??_main+7)& (0+255),f,b
  2210  00099A  50F4               	movf	prodh,w,c
  2211  00099C  23B7               	addwfc	(??_main+8)& (0+255),f,b
  2212  00099E  0E00               	movlw	0
  2213  0009A0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2214  0009A2  51B2               	movf	(??_main+3)& (0+255),w,b
  2215  0009A4  0101               	movlb	1	; () banked
  2216  0009A6  03D3               	mulwf	main@y& (0+255),b
  2217  0009A8  0100               	movlb	0	; () banked
  2218  0009AA  50F3               	movf	prodl,w,c
  2219  0009AC  27B6               	addwf	(??_main+7)& (0+255),f,b
  2220  0009AE  50F4               	movf	prodh,w,c
  2221  0009B0  23B7               	addwfc	(??_main+8)& (0+255),f,b
  2222  0009B2  0E00               	movlw	0
  2223  0009B4  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2224  0009B6  51B1               	movf	(??_main+2)& (0+255),w,b
  2225  0009B8  0101               	movlb	1	; () banked
  2226  0009BA  03D5               	mulwf	(main@y+2)& (0+255),b
  2227  0009BC  0100               	movlb	0	; () banked
  2228  0009BE  50F3               	movf	prodl,w,c
  2229  0009C0  27B7               	addwf	(??_main+8)& (0+255),f,b
  2230  0009C2  50F4               	movf	prodh,w,c
  2231  0009C4  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2232  0009C6  51B2               	movf	(??_main+3)& (0+255),w,b
  2233  0009C8  0101               	movlb	1	; () banked
  2234  0009CA  03D4               	mulwf	(main@y+1)& (0+255),b
  2235  0009CC  0100               	movlb	0	; () banked
  2236  0009CE  50F3               	movf	prodl,w,c
  2237  0009D0  27B7               	addwf	(??_main+8)& (0+255),f,b
  2238  0009D2  50F4               	movf	prodh,w,c
  2239  0009D4  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2240  0009D6  51B3               	movf	(??_main+4)& (0+255),w,b
  2241  0009D8  0101               	movlb	1	; () banked
  2242  0009DA  03D3               	mulwf	main@y& (0+255),b
  2243  0009DC  0100               	movlb	0	; () banked
  2244  0009DE  50F3               	movf	prodl,w,c
  2245  0009E0  27B7               	addwf	(??_main+8)& (0+255),f,b
  2246  0009E2  50F4               	movf	prodh,w,c
  2247  0009E4  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2248  0009E6  0101               	movlb	1	; () banked
  2249  0009E8  51D6               	movf	(main@y+3)& (0+255),w,b
  2250  0009EA  0100               	movlb	0	; () banked
  2251  0009EC  03B1               	mulwf	(??_main+2)& (0+255),b
  2252  0009EE  50F3               	movf	prodl,w,c
  2253  0009F0  27B8               	addwf	(??_main+9)& (0+255),f,b
  2254  0009F2  51B2               	movf	(??_main+3)& (0+255),w,b
  2255  0009F4  0101               	movlb	1	; () banked
  2256  0009F6  03D5               	mulwf	(main@y+2)& (0+255),b
  2257  0009F8  0100               	movlb	0	; () banked
  2258  0009FA  50F3               	movf	prodl,w,c
  2259  0009FC  27B8               	addwf	(??_main+9)& (0+255),f,b
  2260  0009FE  51B3               	movf	(??_main+4)& (0+255),w,b
  2261  000A00  0101               	movlb	1	; () banked
  2262  000A02  03D4               	mulwf	(main@y+1)& (0+255),b
  2263  000A04  0100               	movlb	0	; () banked
  2264  000A06  50F3               	movf	prodl,w,c
  2265  000A08  27B8               	addwf	(??_main+9)& (0+255),f,b
  2266  000A0A  51B4               	movf	(??_main+5)& (0+255),w,b
  2267  000A0C  0101               	movlb	1	; () banked
  2268  000A0E  03D3               	mulwf	main@y& (0+255),b
  2269  000A10  0100               	movlb	0	; () banked
  2270  000A12  50F3               	movf	prodl,w,c
  2271  000A14  27B8               	addwf	(??_main+9)& (0+255),f,b
  2272  000A16  C0B5  F011         	movff	??_main+6,___lldiv@dividend
  2273  000A1A  C0B6  F012         	movff	??_main+7,___lldiv@dividend+1
  2274  000A1E  C0B7  F013         	movff	??_main+8,___lldiv@dividend+2
  2275  000A22  C0B8  F014         	movff	??_main+9,___lldiv@dividend+3
  2276  000A26  C1E3  F015         	movff	_percent_step,___lldiv@divisor
  2277  000A2A  C1E4  F016         	movff	_percent_step+1,___lldiv@divisor+1
  2278  000A2E  6A17               	clrf	___lldiv@divisor+2,c
  2279  000A30  6A18               	clrf	___lldiv@divisor+3,c
  2280  000A32  ECD2  F00B         	call	___lldiv	;wreg free
  2281  000A36  C011  F1F7         	movff	?___lldiv,_turns_percent
  2282  000A3A  C012  F1F8         	movff	?___lldiv+1,_turns_percent+1
  2283                           
  2284                           ;Turn_counter.c: 1033: turns_percent_press = ((ADC_RES_BUF-POT_MIN)*y*10)/percent_step;
  2285  000A3E  C048  F0AF         	movff	_POT_MIN,??_main
  2286  000A42  C049  F0B0         	movff	_POT_MIN+1,??_main+1
  2287  000A46  0100               	movlb	0	; () banked
  2288  000A48  1FAF               	comf	??_main& (0+255),f,b
  2289  000A4A  1FB0               	comf	(??_main+1)& (0+255),f,b
  2290  000A4C  4BAF               	infsnz	??_main& (0+255),f,b
  2291  000A4E  2BB0               	incf	(??_main+1)& (0+255),f,b
  2292  000A50  0101               	movlb	1	; () banked
  2293  000A52  51ED               	movf	_ADC_RES_BUF& (0+255),w,b
  2294  000A54  0100               	movlb	0	; () banked
  2295  000A56  25AF               	addwf	??_main& (0+255),w,b
  2296  000A58  6FB1               	movwf	(??_main+2)& (0+255),b
  2297  000A5A  0101               	movlb	1	; () banked
  2298  000A5C  51EE               	movf	(_ADC_RES_BUF+1)& (0+255),w,b
  2299  000A5E  0100               	movlb	0	; () banked
  2300  000A60  21B0               	addwfc	(??_main+1)& (0+255),w,b
  2301  000A62  6FB2               	movwf	(??_main+3)& (0+255),b
  2302  000A64  6BB3               	clrf	(??_main+4)& (0+255),b
  2303  000A66  6BB4               	clrf	(??_main+5)& (0+255),b
  2304  000A68  51B1               	movf	(??_main+2)& (0+255),w,b
  2305  000A6A  0101               	movlb	1	; () banked
  2306  000A6C  03D3               	mulwf	main@y& (0+255),b
  2307  000A6E  CFF3 F0B5          	movff	prodl,??_main+6
  2308  000A72  CFF4 F0B6          	movff	prodh,??_main+7
  2309  000A76  0100               	movlb	0	; () banked
  2310  000A78  6BB7               	clrf	(??_main+8)& (0+255),b
  2311  000A7A  6BB8               	clrf	(??_main+9)& (0+255),b
  2312  000A7C  0101               	movlb	1	; () banked
  2313  000A7E  03D4               	mulwf	(main@y+1)& (0+255),b
  2314  000A80  0100               	movlb	0	; () banked
  2315  000A82  50F3               	movf	prodl,w,c
  2316  000A84  27B6               	addwf	(??_main+7)& (0+255),f,b
  2317  000A86  50F4               	movf	prodh,w,c
  2318  000A88  23B7               	addwfc	(??_main+8)& (0+255),f,b
  2319  000A8A  0E00               	movlw	0
  2320  000A8C  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2321  000A8E  51B2               	movf	(??_main+3)& (0+255),w,b
  2322  000A90  0101               	movlb	1	; () banked
  2323  000A92  03D3               	mulwf	main@y& (0+255),b
  2324  000A94  0100               	movlb	0	; () banked
  2325  000A96  50F3               	movf	prodl,w,c
  2326  000A98  27B6               	addwf	(??_main+7)& (0+255),f,b
  2327  000A9A  50F4               	movf	prodh,w,c
  2328  000A9C  23B7               	addwfc	(??_main+8)& (0+255),f,b
  2329  000A9E  0E00               	movlw	0
  2330  000AA0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2331  000AA2  51B1               	movf	(??_main+2)& (0+255),w,b
  2332  000AA4  0101               	movlb	1	; () banked
  2333  000AA6  03D5               	mulwf	(main@y+2)& (0+255),b
  2334  000AA8  0100               	movlb	0	; () banked
  2335  000AAA  50F3               	movf	prodl,w,c
  2336  000AAC  27B7               	addwf	(??_main+8)& (0+255),f,b
  2337  000AAE  50F4               	movf	prodh,w,c
  2338  000AB0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2339  000AB2  51B2               	movf	(??_main+3)& (0+255),w,b
  2340  000AB4  0101               	movlb	1	; () banked
  2341  000AB6  03D4               	mulwf	(main@y+1)& (0+255),b
  2342  000AB8  0100               	movlb	0	; () banked
  2343  000ABA  50F3               	movf	prodl,w,c
  2344  000ABC  27B7               	addwf	(??_main+8)& (0+255),f,b
  2345  000ABE  50F4               	movf	prodh,w,c
  2346  000AC0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2347  000AC2  51B3               	movf	(??_main+4)& (0+255),w,b
  2348  000AC4  0101               	movlb	1	; () banked
  2349  000AC6  03D3               	mulwf	main@y& (0+255),b
  2350  000AC8  0100               	movlb	0	; () banked
  2351  000ACA  50F3               	movf	prodl,w,c
  2352  000ACC  27B7               	addwf	(??_main+8)& (0+255),f,b
  2353  000ACE  50F4               	movf	prodh,w,c
  2354  000AD0  23B8               	addwfc	(??_main+9)& (0+255),f,b
  2355  000AD2  0101               	movlb	1	; () banked
  2356  000AD4  51D6               	movf	(main@y+3)& (0+255),w,b
  2357  000AD6  0100               	movlb	0	; () banked
  2358  000AD8  03B1               	mulwf	(??_main+2)& (0+255),b
  2359  000ADA  50F3               	movf	prodl,w,c
  2360  000ADC  27B8               	addwf	(??_main+9)& (0+255),f,b
  2361  000ADE  51B2               	movf	(??_main+3)& (0+255),w,b
  2362  000AE0  0101               	movlb	1	; () banked
  2363  000AE2  03D5               	mulwf	(main@y+2)& (0+255),b
  2364  000AE4  0100               	movlb	0	; () banked
  2365  000AE6  50F3               	movf	prodl,w,c
  2366  000AE8  27B8               	addwf	(??_main+9)& (0+255),f,b
  2367  000AEA  51B3               	movf	(??_main+4)& (0+255),w,b
  2368  000AEC  0101               	movlb	1	; () banked
  2369  000AEE  03D4               	mulwf	(main@y+1)& (0+255),b
  2370  000AF0  0100               	movlb	0	; () banked
  2371  000AF2  50F3               	movf	prodl,w,c
  2372  000AF4  27B8               	addwf	(??_main+9)& (0+255),f,b
  2373  000AF6  51B4               	movf	(??_main+5)& (0+255),w,b
  2374  000AF8  0101               	movlb	1	; () banked
  2375  000AFA  03D3               	mulwf	main@y& (0+255),b
  2376  000AFC  0100               	movlb	0	; () banked
  2377  000AFE  50F3               	movf	prodl,w,c
  2378  000B00  27B8               	addwf	(??_main+9)& (0+255),f,b
  2379  000B02  0E0A               	movlw	10
  2380  000B04  03B5               	mulwf	(??_main+6)& (0+255),b
  2381  000B06  CFF3 F0B9          	movff	prodl,??_main+10
  2382  000B0A  CFF4 F0BA          	movff	prodh,??_main+11
  2383  000B0E  6BBB               	clrf	(??_main+12)& (0+255),b
  2384  000B10  6BBC               	clrf	(??_main+13)& (0+255),b
  2385  000B12  03B6               	mulwf	(??_main+7)& (0+255),b
  2386  000B14  50F3               	movf	prodl,w,c
  2387  000B16  27BA               	addwf	(??_main+11)& (0+255),f,b
  2388  000B18  50F4               	movf	prodh,w,c
  2389  000B1A  23BB               	addwfc	(??_main+12)& (0+255),f,b
  2390  000B1C  0E00               	movlw	0
  2391  000B1E  23BC               	addwfc	(??_main+13)& (0+255),f,b
  2392  000B20  03B5               	mulwf	(??_main+6)& (0+255),b
  2393  000B22  50F3               	movf	prodl,w,c
  2394  000B24  27BA               	addwf	(??_main+11)& (0+255),f,b
  2395  000B26  50F4               	movf	prodh,w,c
  2396  000B28  23BB               	addwfc	(??_main+12)& (0+255),f,b
  2397  000B2A  0E00               	movlw	0
  2398  000B2C  23BC               	addwfc	(??_main+13)& (0+255),f,b
  2399  000B2E  0E0A               	movlw	10
  2400  000B30  03B7               	mulwf	(??_main+8)& (0+255),b
  2401  000B32  50F3               	movf	prodl,w,c
  2402  000B34  27BB               	addwf	(??_main+12)& (0+255),f,b
  2403  000B36  50F4               	movf	prodh,w,c
  2404  000B38  23BC               	addwfc	(??_main+13)& (0+255),f,b
  2405  000B3A  0E00               	movlw	0
  2406  000B3C  03B6               	mulwf	(??_main+7)& (0+255),b
  2407  000B3E  50F3               	movf	prodl,w,c
  2408  000B40  27BB               	addwf	(??_main+12)& (0+255),f,b
  2409  000B42  50F4               	movf	prodh,w,c
  2410  000B44  23BC               	addwfc	(??_main+13)& (0+255),f,b
  2411  000B46  0E00               	movlw	0
  2412  000B48  03B5               	mulwf	(??_main+6)& (0+255),b
  2413  000B4A  50F3               	movf	prodl,w,c
  2414  000B4C  27BB               	addwf	(??_main+12)& (0+255),f,b
  2415  000B4E  50F4               	movf	prodh,w,c
  2416  000B50  23BC               	addwfc	(??_main+13)& (0+255),f,b
  2417  000B52  0E0A               	movlw	10
  2418  000B54  03B8               	mulwf	(??_main+9)& (0+255),b
  2419  000B56  50F3               	movf	prodl,w,c
  2420  000B58  27BC               	addwf	(??_main+13)& (0+255),f,b
  2421  000B5A  0E00               	movlw	0
  2422  000B5C  03B7               	mulwf	(??_main+8)& (0+255),b
  2423  000B5E  50F3               	movf	prodl,w,c
  2424  000B60  27BC               	addwf	(??_main+13)& (0+255),f,b
  2425  000B62  0E00               	movlw	0
  2426  000B64  03B6               	mulwf	(??_main+7)& (0+255),b
  2427  000B66  50F3               	movf	prodl,w,c
  2428  000B68  27BC               	addwf	(??_main+13)& (0+255),f,b
  2429  000B6A  0E00               	movlw	0
  2430  000B6C  03B5               	mulwf	(??_main+6)& (0+255),b
  2431  000B6E  50F3               	movf	prodl,w,c
  2432  000B70  27BC               	addwf	(??_main+13)& (0+255),f,b
  2433  000B72  C0B9  F011         	movff	??_main+10,___lldiv@dividend
  2434  000B76  C0BA  F012         	movff	??_main+11,___lldiv@dividend+1
  2435  000B7A  C0BB  F013         	movff	??_main+12,___lldiv@dividend+2
  2436  000B7E  C0BC  F014         	movff	??_main+13,___lldiv@dividend+3
  2437  000B82  C1E3  F015         	movff	_percent_step,___lldiv@divisor
  2438  000B86  C1E4  F016         	movff	_percent_step+1,___lldiv@divisor+1
  2439  000B8A  6A17               	clrf	___lldiv@divisor+2,c
  2440  000B8C  6A18               	clrf	___lldiv@divisor+3,c
  2441  000B8E  ECD2  F00B         	call	___lldiv	;wreg free
  2442  000B92  C011  F1F5         	movff	?___lldiv,_turns_percent_press
  2443  000B96  C012  F1F6         	movff	?___lldiv+1,_turns_percent_press+1
  2444  000B9A                     l3478:
  2445                           
  2446                           ;Turn_counter.c: 1034: }
  2447                           ;Turn_counter.c: 1036: modbus_rx_sm();
  2448  000B9A  EC8D  F008         	call	_modbus_rx_sm	;wreg free
  2449                           
  2450                           ;Turn_counter.c: 1037: modbus_poll();
  2451  000B9E  EC5E  F00A         	call	_modbus_poll	;wreg free
  2452                           
  2453                           ;Turn_counter.c: 1039: led_cnt++;
  2454  000BA2  0100               	movlb	0	; () banked
  2455  000BA4  4BBD               	infsnz	_led_cnt& (0+255),f,b
  2456  000BA6  2BBE               	incf	(_led_cnt+1)& (0+255),f,b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;Turn_counter.c: 1040: if(led_cnt > 5)
  2460  000BA8  51BE               	movf	(_led_cnt+1)& (0+255),w,b
  2461  000BAA  E103               	bnz	u2410
  2462  000BAC  0E06               	movlw	6
  2463  000BAE  5DBD               	subwf	_led_cnt& (0+255),w,b
  2464  000BB0  E305               	bnc	l3492
  2465  000BB2                     u2410:
  2466                           
  2467                           ; BSR set to: 0
  2468                           ;Turn_counter.c: 1041: {
  2469                           ;Turn_counter.c: 1042: led_cnt = 0;
  2470  000BB2  0100               	movlb	0	; () banked
  2471  000BB4  6BBE               	clrf	(_led_cnt+1)& (0+255),b
  2472  000BB6  6BBD               	clrf	_led_cnt& (0+255),b
  2473                           
  2474                           ; BSR set to: 0
  2475                           ;Turn_counter.c: 1043: LATCbits.LATC4 = 0;
  2476  000BB8  988B               	bcf	3979,4,c	;volatile
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;Turn_counter.c: 1044: LATCbits.LATC5 = 0;
  2480  000BBA  9A8B               	bcf	3979,5,c	;volatile
  2481  000BBC                     l3492:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;Turn_counter.c: 1045: }
  2485                           ;Turn_counter.c: 1048: if (set_zero)
  2486  000BBC  0101               	movlb	1	; () banked
  2487  000BBE  51D9               	movf	_set_zero& (0+255),w,b
  2488  000BC0  11DA               	iorwf	(_set_zero+1)& (0+255),w,b
  2489  000BC2  E102 EF94  F000    	bz	l3298
  2490                           
  2491                           ; BSR set to: 1
  2492                           ;Turn_counter.c: 1049: {
  2493                           ;Turn_counter.c: 1050: set_zero = 0;
  2494  000BC8  6BDA               	clrf	(_set_zero+1)& (0+255),b
  2495  000BCA  6BD9               	clrf	_set_zero& (0+255),b
  2496                           
  2497                           ; BSR set to: 1
  2498                           ;Turn_counter.c: 1051: ADCON0bits.CHS = 0;
  2499  000BCC  94C2               	bcf	4034,2,c	;volatile
  2500  000BCE  96C2               	bcf	4034,3,c	;volatile
  2501  000BD0  98C2               	bcf	4034,4,c	;volatile
  2502  000BD2  9AC2               	bcf	4034,5,c	;volatile
  2503  000BD4  9CC2               	bcf	4034,6,c	;volatile
  2504                           
  2505                           ; BSR set to: 1
  2506                           ;Turn_counter.c: 1052: _delay((unsigned long)((10)*(40000000/4000000.0)));
  2507  000BD6  0E21               	movlw	33
  2508  000BD8                     u2617:
  2509  000BD8  2EE8               	decfsz	wreg,f,c
  2510  000BDA  D7FE               	bra	u2617
  2511  000BDC  F000               	nop	
  2512                           
  2513                           ;Turn_counter.c: 1053: GO_nDONE = 1;
  2514  000BDE  82C2               	bsf	4034,1,c	;volatile
  2515                           
  2516                           ;Turn_counter.c: 1054: _delay((unsigned long)((20)*(40000000/4000000.0)));
  2517  000BE0  0E42               	movlw	66
  2518  000BE2                     u2627:
  2519  000BE2  2EE8               	decfsz	wreg,f,c
  2520  000BE4  D7FE               	bra	u2627
  2521  000BE6  D000               	nop2	
  2522                           
  2523                           ;Turn_counter.c: 1056: offset = (ADRESH<<8) | ADRESL;
  2524  000BE8  50C3               	movf	4035,w,c	;volatile
  2525  000BEA  CFC4 F0AF          	movff	4036,??_main	;volatile
  2526  000BEE  0100               	movlb	0	; () banked
  2527  000BF0  6BB0               	clrf	(??_main+1)& (0+255),b
  2528  000BF2  C0AF  F0B0         	movff	??_main,??_main+1
  2529  000BF6  6BAF               	clrf	??_main& (0+255),b
  2530  000BF8  11AF               	iorwf	??_main& (0+255),w,b
  2531  000BFA  0101               	movlb	1	; () banked
  2532  000BFC  6FDD               	movwf	_offset& (0+255),b
  2533  000BFE  0100               	movlb	0	; () banked
  2534  000C00  51B0               	movf	(??_main+1)& (0+255),w,b
  2535  000C02  0101               	movlb	1	; () banked
  2536  000C04  6FDE               	movwf	(_offset+1)& (0+255),b
  2537                           
  2538                           ; BSR set to: 1
  2539                           ;Turn_counter.c: 1057: PIR1bits.ADIF = 0;
  2540  000C06  9C9E               	bcf	3998,6,c	;volatile
  2541                           
  2542                           ; BSR set to: 1
  2543                           ;Turn_counter.c: 1059: EEPROM_WrByte(7,offset & 0x00ff);
  2544  000C08  C1DD  F011         	movff	_offset,EEPROM_WrByte@bData
  2545  000C0C  0E07               	movlw	7
  2546  000C0E  EC83  F00C         	call	_EEPROM_WrByte
  2547                           
  2548                           ;Turn_counter.c: 1060: _delay((unsigned long)((5)*(40000000/4000.0)));
  2549  000C12  0E41               	movlw	65
  2550  000C14  0100               	movlb	0	; () banked
  2551  000C16  6FAF               	movwf	??_main& (0+255),b
  2552  000C18  0EEE               	movlw	238
  2553  000C1A                     u2637:
  2554  000C1A  2EE8               	decfsz	wreg,f,c
  2555  000C1C  D7FE               	bra	u2637
  2556  000C1E  2FAF               	decfsz	??_main& (0+255),f,b
  2557  000C20  D7FC               	bra	u2637
  2558  000C22  F000               	nop	
  2559                           
  2560                           ;Turn_counter.c: 1061: EEPROM_WrByte(8,offset >> 8);
  2561  000C24  0101               	movlb	1	; () banked
  2562  000C26  51DE               	movf	(_offset+1)& (0+255),w,b
  2563  000C28  6E11               	movwf	EEPROM_WrByte@bData,c
  2564  000C2A  0E08               	movlw	8
  2565  000C2C  EC83  F00C         	call	_EEPROM_WrByte
  2566                           
  2567                           ;Turn_counter.c: 1062: _delay((unsigned long)((5)*(40000000/4000.0)));
  2568  000C30  0E41               	movlw	65
  2569  000C32  0100               	movlb	0	; () banked
  2570  000C34  6FAF               	movwf	??_main& (0+255),b
  2571  000C36  0EEE               	movlw	238
  2572  000C38                     u2647:
  2573  000C38  2EE8               	decfsz	wreg,f,c
  2574  000C3A  D7FE               	bra	u2647
  2575  000C3C  2FAF               	decfsz	??_main& (0+255),f,b
  2576  000C3E  D7FC               	bra	u2647
  2577  000C40  F000               	nop	
  2578  000C42  EF94  F000         	goto	l3298
  2579  000C46                     __end_of_main:
  2580                           	opt stack 0
  2581                           tblptru	equ	0xFF8
  2582                           tblptrh	equ	0xFF7
  2583                           tblptrl	equ	0xFF6
  2584                           tablat	equ	0xFF5
  2585                           prodh	equ	0xFF4
  2586                           prodl	equ	0xFF3
  2587                           postinc0	equ	0xFEE
  2588                           wreg	equ	0xFE8
  2589                           postdec1	equ	0xFE5
  2590                           fsr1l	equ	0xFE1
  2591                           postinc2	equ	0xFDE
  2592                           postdec2	equ	0xFDD
  2593                           fsr2h	equ	0xFDA
  2594                           fsr2l	equ	0xFD9
  2595                           status	equ	0xFD8
  2596                           
  2597 ;; *************** function _modbus_rx_sm *****************
  2598 ;; Defined at:
  2599 ;;		line 428 in file "Turn_counter.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;		None
  2602 ;; Auto vars:     Size  Location     Type
  2603 ;;		None
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 0/0
  2610 ;;		On exit  : 0/0
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2617 ;;Total ram usage:        0 bytes
  2618 ;; Hardware stack levels used:    1
  2619 ;; Hardware stack levels required when called:    3
  2620 ;; This function calls:
  2621 ;;		_get_rx_ch
  2622 ;;		_modbus_rx_CRC_check
  2623 ;; This function is called by:
  2624 ;;		_main
  2625 ;; This function uses a non-reentrant model
  2626 ;;
  2627                           
  2628                           	psect	text1
  2629  00111A                     __ptext1:
  2630                           	opt stack 0
  2631  00111A                     _modbus_rx_sm:
  2632                           	opt stack 27
  2633                           
  2634                           ;Turn_counter.c: 432: while(rd_ptr < wr_ptr)
  2635                           
  2636                           ;incstack = 0
  2637  00111A  D08B               	goto	l2458
  2638  00111C                     l2394:
  2639                           
  2640                           ;Turn_counter.c: 433: {
  2641                           ;Turn_counter.c: 434: rx_byte = get_rx_ch();
  2642  00111C  ECA0  F00C         	call	_get_rx_ch	;wreg free
  2643  001120  6E43               	movwf	_rx_byte,c
  2644                           
  2645                           ;Turn_counter.c: 436: switch(rd_state)
  2646  001122  D07C               	goto	l2456
  2647  001124                     l2396:
  2648                           
  2649                           ;Turn_counter.c: 440: if(rx_byte == dev_id)
  2650  001124  504C               	movf	_dev_id,w,c
  2651  001126  1843               	xorwf	_rx_byte,w,c
  2652  001128  E001 D083          	bnz	l2458
  2653                           
  2654                           ;Turn_counter.c: 441: {
  2655                           ;Turn_counter.c: 443: rd_state = 11;
  2656  00112C  0E0B               	movlw	11
  2657  00112E  D074               	goto	L10
  2658  001130                     l2400:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;Turn_counter.c: 451: reg_addr_flag = 1;
  2662  001130  0E01               	movlw	1
  2663  001132  0100               	movlb	0	; () banked
  2664  001134  6F9B               	movwf	_reg_addr_flag& (0+255),b
  2665  001136  D006               	goto	L4
  2666  001138                     L3:
  2667  001138  6FBF               	movwf	_rd_state& (0+255),b
  2668                           
  2669                           ;Turn_counter.c: 455: break;
  2670  00113A  D07B               	goto	l2458
  2671  00113C                     l2402:
  2672                           
  2673                           ; BSR set to: 0
  2674                           ;Turn_counter.c: 458: reg_addr_flag = 1;
  2675  00113C  0E01               	movlw	1
  2676  00113E  0100               	movlb	0	; () banked
  2677  001140  6F9B               	movwf	_reg_addr_flag& (0+255),b
  2678                           
  2679                           ;Turn_counter.c: 459: reg_wr_flag = 1;
  2680  001142  6F9A               	movwf	_reg_wr_flag& (0+255),b
  2681  001144                     L4:
  2682                           
  2683                           ;Turn_counter.c: 460: regs2read = 0;
  2684  001144  6A3C               	clrf	_regs2read+1,c
  2685  001146  6A3B               	clrf	_regs2read,c
  2686                           
  2687                           ;Turn_counter.c: 461: reg_wr_data = 0;
  2688  001148  6A38               	clrf	_reg_wr_data+1,c
  2689  00114A  6A37               	clrf	_reg_wr_data,c
  2690  00114C  D030               	goto	L7
  2691  00114E                     l2406:
  2692                           
  2693                           ; BSR set to: 0
  2694  00114E  5043               	movf	_rx_byte,w,c
  2695                           
  2696                           ; Switch size 1, requested type "speed"
  2697                           ; Number of cases is 2, Range of values is 3 to 6
  2698                           ; switch strategies available:
  2699                           ; Name         Instructions Cycles
  2700                           ; simple_byte            7     4 (average)
  2701                           ;	Chosen strategy is simple_byte
  2702  001150  0A03               	xorlw	3	; case 3
  2703  001152  E0EE               	bz	l2400
  2704  001154  0A05               	xorlw	5	; case 6
  2705  001156  E0F2               	bz	l2402
  2706  001158  D05E               	goto	l2454
  2707  00115A                     l285:
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;Turn_counter.c: 472: temp_buf = (unsigned int)rx_byte;
  2711  00115A  C043  F03D         	movff	_rx_byte,_temp_buf
  2712  00115E  6A3E               	clrf	_temp_buf+1,c
  2713                           
  2714                           ; BSR set to: 0
  2715                           ;Turn_counter.c: 473: temp_buf = temp_buf << 8;
  2716  001160  503D               	movf	_temp_buf,w,c
  2717  001162  6E3E               	movwf	_temp_buf+1,c
  2718  001164  6A3D               	clrf	_temp_buf,c
  2719                           
  2720                           ;Turn_counter.c: 474: rd_state = 13;
  2721  001166  0E0D               	movlw	13
  2722  001168  D057               	goto	L10
  2723  00116A                     l2410:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;Turn_counter.c: 478: temp_buf |= (unsigned int)rx_byte;
  2727  00116A  5043               	movf	_rx_byte,w,c
  2728  00116C  123D               	iorwf	_temp_buf,f,c
  2729                           
  2730                           ; BSR set to: 0
  2731                           ;Turn_counter.c: 480: if(reg_addr_flag)
  2732  00116E  0100               	movlb	0	; () banked
  2733  001170  519B               	movf	_reg_addr_flag& (0+255),w,b
  2734  001172  E013               	bz	l2422
  2735                           
  2736                           ; BSR set to: 0
  2737                           ;Turn_counter.c: 481: {
  2738                           ;Turn_counter.c: 482: modbus_reg_addr = temp_buf;
  2739  001174  C03D  F03F         	movff	_temp_buf,_modbus_reg_addr
  2740  001178  C03E  F040         	movff	_temp_buf+1,_modbus_reg_addr+1
  2741                           
  2742                           ; BSR set to: 0
  2743                           ;Turn_counter.c: 483: reg_addr_flag = 0;
  2744  00117C  0E00               	movlw	0
  2745  00117E  6F9B               	movwf	_reg_addr_flag& (0+255),b
  2746                           
  2747                           ;Turn_counter.c: 484: if(reg_wr_flag) reg_qty_flag = 0;
  2748  001180  519A               	movf	_reg_wr_flag& (0+255),w,b
  2749  001182  E002               	bz	l2420
  2750                           
  2751                           ; BSR set to: 0
  2752  001184  6B99               	clrf	_reg_qty_flag& (0+255),b
  2753  001186  D003               	goto	l289
  2754  001188                     l2420:
  2755                           
  2756                           ; BSR set to: 0
  2757                           ;Turn_counter.c: 485: else reg_qty_flag = 1;
  2758  001188  0E01               	movlw	1
  2759  00118A  0100               	movlb	0	; () banked
  2760  00118C  6F99               	movwf	_reg_qty_flag& (0+255),b
  2761  00118E                     l289:
  2762                           
  2763                           ; BSR set to: 0
  2764                           ;Turn_counter.c: 486: rd_state = 12;
  2765  00118E  0E0C               	movlw	12
  2766  001190  0100               	movlb	0	; () banked
  2767  001192  6FBF               	movwf	_rd_state& (0+255),b
  2768                           
  2769                           ;Turn_counter.c: 487: temp_buf = 0;
  2770  001194  6A3E               	clrf	_temp_buf+1,c
  2771  001196  6A3D               	clrf	_temp_buf,c
  2772                           
  2773                           ;Turn_counter.c: 488: break;
  2774  001198  D04C               	goto	l2458
  2775  00119A                     l2422:
  2776                           
  2777                           ; BSR set to: 0
  2778                           ;Turn_counter.c: 489: }
  2779                           ;Turn_counter.c: 491: if(reg_wr_flag)
  2780  00119A  0100               	movlb	0	; () banked
  2781  00119C  519A               	movf	_reg_wr_flag& (0+255),w,b
  2782  00119E  E009               	bz	l2428
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;Turn_counter.c: 492: {
  2786                           ;Turn_counter.c: 493: reg_wr_data = temp_buf;
  2787  0011A0  C03D  F037         	movff	_temp_buf,_reg_wr_data
  2788  0011A4  C03E  F038         	movff	_temp_buf+1,_reg_wr_data+1
  2789                           
  2790                           ; BSR set to: 0
  2791                           ;Turn_counter.c: 494: reg_wr_flag = 0;
  2792  0011A8  6B9A               	clrf	_reg_wr_flag& (0+255),b
  2793                           
  2794                           ;Turn_counter.c: 495: get_crc_flag = 0x06;
  2795  0011AA  0E06               	movlw	6
  2796  0011AC  6F98               	movwf	_get_crc_flag& (0+255),b
  2797  0011AE                     L7:
  2798                           
  2799                           ;Turn_counter.c: 496: rd_state = 12;
  2800  0011AE  0E0C               	movlw	12
  2801  0011B0  D7C3               	goto	L3
  2802  0011B2                     l2428:
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;Turn_counter.c: 498: }
  2806                           ;Turn_counter.c: 500: if(reg_qty_flag)
  2807  0011B2  0100               	movlb	0	; () banked
  2808  0011B4  5199               	movf	_reg_qty_flag& (0+255),w,b
  2809  0011B6  E029               	bz	l2452
  2810                           
  2811                           ; BSR set to: 0
  2812                           ;Turn_counter.c: 501: {
  2813                           ;Turn_counter.c: 502: if(temp_buf < 125)
  2814  0011B8  503E               	movf	_temp_buf+1,w,c
  2815  0011BA  E10B               	bnz	l2436
  2816  0011BC  0E7D               	movlw	125
  2817  0011BE  5C3D               	subwf	_temp_buf,w,c
  2818  0011C0  E208               	bc	l2436
  2819                           
  2820                           ; BSR set to: 0
  2821                           ;Turn_counter.c: 503: {
  2822                           ;Turn_counter.c: 504: regs2read = temp_buf;
  2823  0011C2  C03D  F03B         	movff	_temp_buf,_regs2read
  2824  0011C6  C03E  F03C         	movff	_temp_buf+1,_regs2read+1
  2825                           
  2826                           ; BSR set to: 0
  2827                           ;Turn_counter.c: 505: get_crc_flag = 0x03 ;
  2828  0011CA  0E03               	movlw	3
  2829  0011CC  6F98               	movwf	_get_crc_flag& (0+255),b
  2830                           
  2831                           ;Turn_counter.c: 506: rd_state = 12;
  2832  0011CE  0E0C               	movlw	12
  2833  0011D0  D002               	goto	L5
  2834  0011D2                     l2436:
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;Turn_counter.c: 509: else
  2838                           ;Turn_counter.c: 510: {
  2839                           ;Turn_counter.c: 511: rd_state = 10;
  2840  0011D2  0E0A               	movlw	10
  2841  0011D4  0100               	movlb	0	; () banked
  2842  0011D6                     L5:
  2843  0011D6  6FBF               	movwf	_rd_state& (0+255),b
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;Turn_counter.c: 512: }
  2847                           ;Turn_counter.c: 513: reg_qty_flag = 0;
  2848  0011D8  0100               	movlb	0	; () banked
  2849  0011DA  6B99               	clrf	_reg_qty_flag& (0+255),b
  2850                           
  2851                           ;Turn_counter.c: 514: break;
  2852  0011DC  D02A               	goto	l2458
  2853  0011DE                     l2438:
  2854                           
  2855                           ; BSR set to: 0
  2856                           ;Turn_counter.c: 520: crc_buf[1] = (unsigned char) 0x06;
  2857  0011DE  0E06               	movlw	6
  2858  0011E0  0103               	movlb	3	; () banked
  2859  0011E2  6F01               	movwf	(_crc_buf+1)& (0+255),b
  2860                           
  2861                           ;Turn_counter.c: 521: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  2862  0011E4  5038               	movf	_reg_wr_data+1,w,c
  2863  0011E6  6F04               	movwf	(_crc_buf+4)& (0+255),b
  2864                           
  2865                           ; BSR set to: 3
  2866                           ;Turn_counter.c: 522: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  2867  0011E8  C037  F305         	movff	_reg_wr_data,_crc_buf+5
  2868                           
  2869                           ; BSR set to: 3
  2870                           ;Turn_counter.c: 523: modbus_rx_CRC_check(0x06);
  2871  0011EC  0E06               	movlw	6
  2872  0011EE  EC61  F00C         	call	_modbus_rx_CRC_check
  2873                           
  2874                           ;Turn_counter.c: 524: break;
  2875  0011F2  D01F               	goto	l2458
  2876  0011F4                     l2444:
  2877                           
  2878                           ;Turn_counter.c: 527: crc_buf[1] = (unsigned char) 0x03;
  2879  0011F4  0E03               	movlw	3
  2880  0011F6  0103               	movlb	3	; () banked
  2881  0011F8  6F01               	movwf	(_crc_buf+1)& (0+255),b
  2882                           
  2883                           ;Turn_counter.c: 528: crc_buf[4] = (unsigned char)(regs2read >> 8);
  2884  0011FA  503C               	movf	_regs2read+1,w,c
  2885  0011FC  6F04               	movwf	(_crc_buf+4)& (0+255),b
  2886                           
  2887                           ; BSR set to: 3
  2888                           ;Turn_counter.c: 529: crc_buf[5] = (unsigned char)(regs2read & 0x00ff);
  2889  0011FE  C03B  F305         	movff	_regs2read,_crc_buf+5
  2890                           
  2891                           ; BSR set to: 3
  2892                           ;Turn_counter.c: 530: modbus_rx_CRC_check(0x03);
  2893  001202  0E03               	movlw	3
  2894  001204  EC61  F00C         	call	_modbus_rx_CRC_check
  2895                           
  2896                           ;Turn_counter.c: 531: break;
  2897  001208  D014               	goto	l2458
  2898  00120A                     l2452:
  2899                           
  2900                           ; BSR set to: 0
  2901  00120A  0100               	movlb	0	; () banked
  2902  00120C  5198               	movf	_get_crc_flag& (0+255),w,b
  2903                           
  2904                           ; Switch size 1, requested type "speed"
  2905                           ; Number of cases is 2, Range of values is 3 to 6
  2906                           ; switch strategies available:
  2907                           ; Name         Instructions Cycles
  2908                           ; simple_byte            7     4 (average)
  2909                           ;	Chosen strategy is simple_byte
  2910  00120E  0A03               	xorlw	3	; case 3
  2911  001210  E0F1               	bz	l2444
  2912  001212  0A05               	xorlw	5	; case 6
  2913  001214  E0E4               	bz	l2438
  2914  001216                     l2454:
  2915                           
  2916                           ; BSR set to: 0
  2917  001216  0E0A               	movlw	10
  2918  001218                     L10:
  2919  001218  0100               	movlb	0	; () banked
  2920  00121A  D78E               	goto	L3
  2921  00121C                     l2456:
  2922  00121C  0100               	movlb	0	; () banked
  2923  00121E  51BF               	movf	_rd_state& (0+255),w,b
  2924                           
  2925                           ; Switch size 1, requested type "speed"
  2926                           ; Number of cases is 4, Range of values is 10 to 13
  2927                           ; switch strategies available:
  2928                           ; Name         Instructions Cycles
  2929                           ; simple_byte           13     7 (average)
  2930                           ;	Chosen strategy is simple_byte
  2931  001220  0A0A               	xorlw	10	; case 10
  2932  001222  E080               	bz	l2396
  2933  001224  0A01               	xorlw	1	; case 11
  2934  001226  E093               	bz	l2406
  2935  001228  0A07               	xorlw	7	; case 12
  2936  00122A  E097               	bz	l285
  2937  00122C  0A01               	xorlw	1	; case 13
  2938  00122E  E09D               	bz	l2410
  2939  001230  D7F2               	goto	l2454
  2940  001232                     l2458:
  2941  001232  5045               	movf	_wr_ptr,w,c
  2942  001234  5C44               	subwf	_rd_ptr,w,c
  2943  001236  E201 D771          	bnc	l2394
  2944  00123A  0012               	return	
  2945  00123C                     __end_of_modbus_rx_sm:
  2946                           	opt stack 0
  2947                           tblptru	equ	0xFF8
  2948                           tblptrh	equ	0xFF7
  2949                           tblptrl	equ	0xFF6
  2950                           tablat	equ	0xFF5
  2951                           prodh	equ	0xFF4
  2952                           prodl	equ	0xFF3
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1l	equ	0xFE1
  2957                           postinc2	equ	0xFDE
  2958                           postdec2	equ	0xFDD
  2959                           fsr2h	equ	0xFDA
  2960                           fsr2l	equ	0xFD9
  2961                           status	equ	0xFD8
  2962                           
  2963 ;; *************** function _modbus_rx_CRC_check *****************
  2964 ;; Defined at:
  2965 ;;		line 408 in file "Turn_counter.c"
  2966 ;; Parameters:    Size  Location     Type
  2967 ;;  modbus_cmd      1    wreg     unsigned char 
  2968 ;; Auto vars:     Size  Location     Type
  2969 ;;  modbus_cmd      1   29[COMRAM] unsigned char 
  2970 ;; Return value:  Size  Location     Type
  2971 ;;                  1    wreg      void 
  2972 ;; Registers used:
  2973 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2974 ;; Tracked objects:
  2975 ;;		On entry : 0/0
  2976 ;;		On exit  : 0/0
  2977 ;;		Unchanged: 0/0
  2978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2980 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2982 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2983 ;;Total ram usage:        1 bytes
  2984 ;; Hardware stack levels used:    1
  2985 ;; Hardware stack levels required when called:    2
  2986 ;; This function calls:
  2987 ;;		_modbus_CRC16
  2988 ;; This function is called by:
  2989 ;;		_modbus_rx_sm
  2990 ;; This function uses a non-reentrant model
  2991 ;;
  2992                           
  2993                           	psect	text2
  2994  0018C2                     __ptext2:
  2995                           	opt stack 0
  2996  0018C2                     _modbus_rx_CRC_check:
  2997                           	opt stack 27
  2998                           
  2999                           ;incstack = 0
  3000                           ;modbus_rx_CRC_check@modbus_cmd stored from wreg
  3001  0018C2  6E1E               	movwf	modbus_rx_CRC_check@modbus_cmd,c
  3002                           
  3003                           ;Turn_counter.c: 411: crc_buf[0] = dev_id;
  3004  0018C4  C04C  F300         	movff	_dev_id,_crc_buf
  3005                           
  3006                           ;Turn_counter.c: 412: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  3007  0018C8  5040               	movf	_modbus_reg_addr+1,w,c
  3008  0018CA  0103               	movlb	3	; () banked
  3009  0018CC  6F02               	movwf	(_crc_buf+2)& (0+255),b
  3010                           
  3011                           ; BSR set to: 3
  3012                           ;Turn_counter.c: 413: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  3013  0018CE  C03F  F303         	movff	_modbus_reg_addr,_crc_buf+3
  3014                           
  3015                           ; BSR set to: 3
  3016                           ;Turn_counter.c: 414: CRC16 = modbus_CRC16(crc_buf,6);
  3017  0018D2  0E00               	movlw	low _crc_buf
  3018  0018D4  6E11               	movwf	modbus_CRC16@buf,c
  3019  0018D6  0E03               	movlw	high _crc_buf
  3020  0018D8  6E12               	movwf	modbus_CRC16@buf+1,c
  3021  0018DA  0E06               	movlw	6
  3022  0018DC  6E13               	movwf	modbus_CRC16@len,c
  3023  0018DE  EC52  F00B         	call	_modbus_CRC16	;wreg free
  3024  0018E2  C011  F082         	movff	?_modbus_CRC16,_CRC16
  3025  0018E6  C012  F083         	movff	?_modbus_CRC16+1,_CRC16+1
  3026                           
  3027                           ;Turn_counter.c: 415: if(CRC16 == temp_buf)
  3028  0018EA  503D               	movf	_temp_buf,w,c
  3029  0018EC  0100               	movlb	0	; () banked
  3030  0018EE  1982               	xorwf	_CRC16& (0+255),w,b
  3031  0018F0  E105               	bnz	l2322
  3032  0018F2  503E               	movf	_temp_buf+1,w,c
  3033  0018F4  1983               	xorwf	(_CRC16+1)& (0+255),w,b
  3034  0018F6  E102               	bnz	l2322
  3035                           
  3036                           ; BSR set to: 0
  3037                           ;Turn_counter.c: 416: {
  3038                           ;Turn_counter.c: 417: answer = modbus_cmd;
  3039  0018F8  C01E  F097         	movff	modbus_rx_CRC_check@modbus_cmd,_answer
  3040  0018FC                     l2322:
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;Turn_counter.c: 420: else
  3044                           ;Turn_counter.c: 421: {
  3045                           ;Turn_counter.c: 422: rd_state = 10;
  3046  0018FC  0E0A               	movlw	10
  3047  0018FE  0100               	movlb	0	; () banked
  3048  001900  6FBF               	movwf	_rd_state& (0+255),b
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;Turn_counter.c: 423: }
  3052                           ;Turn_counter.c: 425: get_crc_flag = 0;
  3053  001902  6B98               	clrf	_get_crc_flag& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056  001904  0C00               	retlw	0	;funcret
  3057  001906                     __end_of_modbus_rx_CRC_check:
  3058                           	opt stack 0
  3059                           tblptru	equ	0xFF8
  3060                           tblptrh	equ	0xFF7
  3061                           tblptrl	equ	0xFF6
  3062                           tablat	equ	0xFF5
  3063                           prodh	equ	0xFF4
  3064                           prodl	equ	0xFF3
  3065                           postinc0	equ	0xFEE
  3066                           wreg	equ	0xFE8
  3067                           postdec1	equ	0xFE5
  3068                           fsr1l	equ	0xFE1
  3069                           postinc2	equ	0xFDE
  3070                           postdec2	equ	0xFDD
  3071                           fsr2h	equ	0xFDA
  3072                           fsr2l	equ	0xFD9
  3073                           status	equ	0xFD8
  3074                           
  3075 ;; *************** function _get_rx_ch *****************
  3076 ;; Defined at:
  3077 ;;		line 289 in file "Turn_counter.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;		None
  3080 ;; Auto vars:     Size  Location     Type
  3081 ;;  rch             1   18[COMRAM] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  1    wreg      unsigned char 
  3084 ;; Registers used:
  3085 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3086 ;; Tracked objects:
  3087 ;;		On entry : 0/0
  3088 ;;		On exit  : 0/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3092 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3093 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3094 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3095 ;;Total ram usage:        3 bytes
  3096 ;; Hardware stack levels used:    1
  3097 ;; Hardware stack levels required when called:    1
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_modbus_rx_sm
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text3
  3106  001940                     __ptext3:
  3107                           	opt stack 0
  3108  001940                     _get_rx_ch:
  3109                           	opt stack 28
  3110                           
  3111                           ;Turn_counter.c: 291: unsigned char rch;
  3112                           ;Turn_counter.c: 293: if (rd_ptr < wr_ptr)
  3113                           
  3114                           ; BSR set to: 0
  3115                           ;incstack = 0
  3116  001940  5045               	movf	_wr_ptr,w,c
  3117  001942  5C44               	subwf	_rd_ptr,w,c
  3118  001944  E20D               	bc	l2222
  3119                           
  3120                           ;Turn_counter.c: 294: {
  3121                           ;Turn_counter.c: 295: rd_ptr++;
  3122  001946  2A44               	incf	_rd_ptr,f,c
  3123                           
  3124                           ;Turn_counter.c: 296: rch = rx_buf[rd_ptr & 0x0f];
  3125  001948  5044               	movf	_rd_ptr,w,c
  3126  00194A  0B0F               	andlw	15
  3127  00194C  6E11               	movwf	??_get_rx_ch& (0+255),c
  3128  00194E  6A12               	clrf	(??_get_rx_ch+1)& (0+255),c
  3129  001950  0E60               	movlw	low _rx_buf
  3130  001952  2411               	addwf	??_get_rx_ch,w,c
  3131  001954  6ED9               	movwf	fsr2l,c
  3132  001956  0E00               	movlw	high _rx_buf
  3133  001958  2012               	addwfc	??_get_rx_ch+1,w,c
  3134  00195A  6EDA               	movwf	fsr2h,c
  3135  00195C  50DF               	movf	indf2,w,c
  3136  00195E  D001               	goto	L11
  3137  001960                     l2222:
  3138                           
  3139                           ;Turn_counter.c: 298: else rch = 'x';
  3140  001960  0E78               	movlw	120
  3141  001962                     L11:
  3142  001962  6E13               	movwf	get_rx_ch@rch,c
  3143                           
  3144                           ;Turn_counter.c: 304: if (wr_ptr==rd_ptr && wr_ptr > 15)
  3145  001964  5044               	movf	_rd_ptr,w,c
  3146  001966  1845               	xorwf	_wr_ptr,w,c
  3147  001968  E105               	bnz	l242
  3148  00196A  0E0F               	movlw	15
  3149  00196C  6445               	cpfsgt	_wr_ptr,c
  3150  00196E  D002               	goto	l242
  3151                           
  3152                           ;Turn_counter.c: 305: {
  3153                           ;Turn_counter.c: 307: wr_ptr=0;
  3154  001970  6A45               	clrf	_wr_ptr,c
  3155                           
  3156                           ;Turn_counter.c: 308: rd_ptr=0;
  3157  001972  6A44               	clrf	_rd_ptr,c
  3158  001974                     l242:
  3159                           
  3160                           ;Turn_counter.c: 310: }
  3161                           ;Turn_counter.c: 313: return rch;
  3162  001974  5013               	movf	get_rx_ch@rch,w,c
  3163  001976  0012               	return	
  3164  001978                     __end_of_get_rx_ch:
  3165                           	opt stack 0
  3166                           tblptru	equ	0xFF8
  3167                           tblptrh	equ	0xFF7
  3168                           tblptrl	equ	0xFF6
  3169                           tablat	equ	0xFF5
  3170                           prodh	equ	0xFF4
  3171                           prodl	equ	0xFF3
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           postdec1	equ	0xFE5
  3175                           fsr1l	equ	0xFE1
  3176                           indf2	equ	0xFDF
  3177                           postinc2	equ	0xFDE
  3178                           postdec2	equ	0xFDD
  3179                           fsr2h	equ	0xFDA
  3180                           fsr2l	equ	0xFD9
  3181                           status	equ	0xFD8
  3182                           
  3183 ;; *************** function _modbus_poll *****************
  3184 ;; Defined at:
  3185 ;;		line 544 in file "Turn_counter.c"
  3186 ;; Parameters:    Size  Location     Type
  3187 ;;		None
  3188 ;; Auto vars:     Size  Location     Type
  3189 ;;		None
  3190 ;; Return value:  Size  Location     Type
  3191 ;;                  1    wreg      void 
  3192 ;; Registers used:
  3193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3194 ;; Tracked objects:
  3195 ;;		On entry : 0/0
  3196 ;;		On exit  : 0/0
  3197 ;;		Unchanged: 0/0
  3198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3200 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3202 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3203 ;;Total ram usage:        0 bytes
  3204 ;; Hardware stack levels used:    1
  3205 ;; Hardware stack levels required when called:    3
  3206 ;; This function calls:
  3207 ;;		_EEPROM_WrByte
  3208 ;;		_modbus_refresh
  3209 ;;		_modbus_reset
  3210 ;;		_modbus_rhr_answer
  3211 ;;		_modbus_wsr_answer
  3212 ;; This function is called by:
  3213 ;;		_main
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           	psect	text4
  3218  0014BC                     __ptext4:
  3219                           	opt stack 0
  3220  0014BC                     _modbus_poll:
  3221                           	opt stack 27
  3222                           
  3223                           ;Turn_counter.c: 548: if(answer == 0x03)
  3224                           
  3225                           ;incstack = 0
  3226  0014BC  0E03               	movlw	3
  3227  0014BE  0100               	movlb	0	; () banked
  3228  0014C0  1997               	xorwf	_answer& (0+255),w,b
  3229  0014C2  E110               	bnz	l2472
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;Turn_counter.c: 549: {
  3233                           ;Turn_counter.c: 550: addr_buf_1 = modbus_reg_addr - 1000;
  3234  0014C4  0E18               	movlw	24
  3235  0014C6  243F               	addwf	_modbus_reg_addr,w,c
  3236  0014C8  6E39               	movwf	_addr_buf_1,c
  3237  0014CA  0EFC               	movlw	252
  3238  0014CC  2040               	addwfc	_modbus_reg_addr+1,w,c
  3239  0014CE  6E3A               	movwf	_addr_buf_1+1,c
  3240                           
  3241                           ; BSR set to: 0
  3242                           ;Turn_counter.c: 551: modbus_refresh(0x03);
  3243  0014D0  0E03               	movlw	3
  3244  0014D2  EC08  F007         	call	_modbus_refresh
  3245                           
  3246                           ;Turn_counter.c: 552: modbus_rhr_answer();
  3247  0014D6  ECE7  F007         	call	_modbus_rhr_answer	;wreg free
  3248                           
  3249                           ;Turn_counter.c: 553: answer = 0;
  3250  0014DA  0E00               	movlw	0
  3251  0014DC  0100               	movlb	0	; () banked
  3252  0014DE  6F97               	movwf	_answer& (0+255),b
  3253                           
  3254                           ; BSR set to: 0
  3255                           ;Turn_counter.c: 554: modbus_reset();
  3256  0014E0  ECBC  F00C         	call	_modbus_reset	;wreg free
  3257  0014E4                     l2472:
  3258                           
  3259                           ;Turn_counter.c: 555: }
  3260                           ;Turn_counter.c: 558: if(answer == 0x06)
  3261  0014E4  0E06               	movlw	6
  3262  0014E6  0100               	movlb	0	; () banked
  3263  0014E8  1997               	xorwf	_answer& (0+255),w,b
  3264  0014EA  E11D               	bnz	l2486
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;Turn_counter.c: 559: {
  3268                           ;Turn_counter.c: 560: addr_buf_1 = modbus_reg_addr - 1000;
  3269  0014EC  0E18               	movlw	24
  3270  0014EE  243F               	addwf	_modbus_reg_addr,w,c
  3271  0014F0  6E39               	movwf	_addr_buf_1,c
  3272  0014F2  0EFC               	movlw	252
  3273  0014F4  2040               	addwfc	_modbus_reg_addr+1,w,c
  3274  0014F6  6E3A               	movwf	_addr_buf_1+1,c
  3275                           
  3276                           ; BSR set to: 0
  3277                           ;Turn_counter.c: 561: holding_register[addr_buf_1] = reg_wr_data;
  3278  0014F8  90D8               	bcf	status,0,c
  3279  0014FA  3439               	rlcf	_addr_buf_1,w,c
  3280  0014FC  6ED9               	movwf	fsr2l,c
  3281  0014FE  343A               	rlcf	_addr_buf_1+1,w,c
  3282  001500  6EDA               	movwf	fsr2h,c
  3283  001502  0E00               	movlw	low _holding_register
  3284  001504  26D9               	addwf	fsr2l,f,c
  3285  001506  0E02               	movlw	high _holding_register
  3286  001508  22DA               	addwfc	fsr2h,f,c
  3287  00150A  C037  FFDE         	movff	_reg_wr_data,postinc2
  3288  00150E  C038  FFDD         	movff	_reg_wr_data+1,postdec2
  3289                           
  3290                           ; BSR set to: 0
  3291                           ;Turn_counter.c: 562: modbus_refresh(0x06);
  3292  001512  0E06               	movlw	6
  3293  001514  EC08  F007         	call	_modbus_refresh
  3294                           
  3295                           ;Turn_counter.c: 563: modbus_wsr_answer();
  3296  001518  EC94  F00B         	call	_modbus_wsr_answer	;wreg free
  3297                           
  3298                           ;Turn_counter.c: 564: answer = 0;
  3299  00151C  0E00               	movlw	0
  3300  00151E  0100               	movlb	0	; () banked
  3301  001520  6F97               	movwf	_answer& (0+255),b
  3302                           
  3303                           ; BSR set to: 0
  3304                           ;Turn_counter.c: 565: modbus_reset();
  3305  001522  ECBC  F00C         	call	_modbus_reset	;wreg free
  3306  001526                     l2486:
  3307                           
  3308                           ;Turn_counter.c: 566: }
  3309                           ;Turn_counter.c: 568: if(bd_rate_fl)
  3310  001526  0100               	movlb	0	; () banked
  3311  001528  519C               	movf	_bd_rate_fl& (0+255),w,b
  3312  00152A  E00C               	bz	l2498
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;Turn_counter.c: 569: {
  3316                           ;Turn_counter.c: 570: PIE1bits.RC1IE = 0;
  3317  00152C  9A9D               	bcf	3997,5,c	;volatile
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;Turn_counter.c: 571: EEPROM_WrByte(1,bd_rate_code);
  3321  00152E  C04D  F011         	movff	_bd_rate_code,EEPROM_WrByte@bData
  3322  001532  0E01               	movlw	1
  3323  001534  EC83  F00C         	call	_EEPROM_WrByte
  3324                           
  3325                           ;Turn_counter.c: 572: bd_rate_fl = 0;
  3326  001538  0E00               	movlw	0
  3327  00153A  0100               	movlb	0	; () banked
  3328  00153C  6F9C               	movwf	_bd_rate_fl& (0+255),b
  3329                           
  3330                           ; BSR set to: 0
  3331                           ;Turn_counter.c: 573: modbus_reset();
  3332  00153E  ECBC  F00C         	call	_modbus_reset	;wreg free
  3333                           
  3334                           ;Turn_counter.c: 574: PIE1bits.RC1IE = 1;
  3335  001542  8A9D               	bsf	3997,5,c	;volatile
  3336  001544                     l2498:
  3337                           
  3338                           ;Turn_counter.c: 576: }
  3339                           ;Turn_counter.c: 578: if(id_change == 1)
  3340  001544  0100               	movlb	0	; () banked
  3341  001546  0596               	decf	_id_change& (0+255),w,b
  3342  001548  A4D8               	btfss	status,2,c
  3343  00154A  0012               	return	
  3344                           
  3345                           ; BSR set to: 0
  3346                           ;Turn_counter.c: 579: {
  3347                           ;Turn_counter.c: 580: if((dev_id >= 255 )|| (dev_id == 0)) return;
  3348  00154C  284C               	incf	_dev_id,w,c
  3349  00154E  B4D8               	btfsc	status,2,c
  3350  001550  0012               	return	
  3351                           
  3352                           ; BSR set to: 0
  3353  001552  504C               	movf	_dev_id,w,c
  3354  001554  E101               	bnz	l308
  3355                           
  3356                           ; BSR set to: 0
  3357  001556  0012               	return	
  3358  001558                     l308:
  3359                           
  3360                           ; BSR set to: 0
  3361                           ;Turn_counter.c: 582: dev_id = (unsigned char)holding_register[20];
  3362  001558  C228  F04C         	movff	_holding_register+40,_dev_id
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;Turn_counter.c: 583: EEPROM_WrByte(2,dev_id);
  3366  00155C  C04C  F011         	movff	_dev_id,EEPROM_WrByte@bData
  3367  001560  0E02               	movlw	2
  3368  001562  EC83  F00C         	call	_EEPROM_WrByte
  3369                           
  3370                           ;Turn_counter.c: 584: holding_register[19] = 0;
  3371  001566  0E00               	movlw	0
  3372  001568  0102               	movlb	2	; () banked
  3373  00156A  6F27               	movwf	(_holding_register+39)& (0+255),b
  3374  00156C  6F26               	movwf	(_holding_register+38)& (0+255),b
  3375                           
  3376                           ; BSR set to: 2
  3377                           ;Turn_counter.c: 585: modbus_reset();
  3378  00156E  ECBC  F00C         	call	_modbus_reset	;wreg free
  3379                           
  3380                           ;Turn_counter.c: 587: id_change = 0;
  3381  001572  0100               	movlb	0	; () banked
  3382  001574  6B96               	clrf	_id_change& (0+255),b
  3383  001576  0C00               	retlw	0
  3384  001578                     __end_of_modbus_poll:
  3385                           	opt stack 0
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           postinc0	equ	0xFEE
  3393                           wreg	equ	0xFE8
  3394                           postdec1	equ	0xFE5
  3395                           fsr1l	equ	0xFE1
  3396                           indf2	equ	0xFDF
  3397                           postinc2	equ	0xFDE
  3398                           postdec2	equ	0xFDD
  3399                           fsr2h	equ	0xFDA
  3400                           fsr2l	equ	0xFD9
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _modbus_wsr_answer *****************
  3404 ;; Defined at:
  3405 ;;		line 342 in file "Turn_counter.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;		None
  3408 ;; Auto vars:     Size  Location     Type
  3409 ;;		None
  3410 ;; Return value:  Size  Location     Type
  3411 ;;                  1    wreg      void 
  3412 ;; Registers used:
  3413 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3414 ;; Tracked objects:
  3415 ;;		On entry : 0/0
  3416 ;;		On exit  : 0/0
  3417 ;;		Unchanged: 0/0
  3418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3421 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3422 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3423 ;;Total ram usage:        1 bytes
  3424 ;; Hardware stack levels used:    1
  3425 ;; Hardware stack levels required when called:    2
  3426 ;; This function calls:
  3427 ;;		_modbus_CRC16
  3428 ;;		_uart_send_hex
  3429 ;; This function is called by:
  3430 ;;		_modbus_poll
  3431 ;; This function uses a non-reentrant model
  3432 ;;
  3433                           
  3434                           	psect	text5
  3435  001728                     __ptext5:
  3436                           	opt stack 0
  3437  001728                     _modbus_wsr_answer:
  3438                           	opt stack 27
  3439                           
  3440                           ;Turn_counter.c: 344: crc_buf[0] = dev_id;
  3441                           
  3442                           ; BSR set to: 0
  3443                           ;incstack = 0
  3444  001728  C04C  F300         	movff	_dev_id,_crc_buf
  3445                           
  3446                           ;Turn_counter.c: 345: crc_buf[1] = 0x06;
  3447  00172C  0E06               	movlw	6
  3448  00172E  0103               	movlb	3	; () banked
  3449  001730  6F01               	movwf	(_crc_buf+1)& (0+255),b
  3450                           
  3451                           ;Turn_counter.c: 346: crc_buf[2] = (unsigned char)(modbus_reg_addr >> 8);
  3452  001732  5040               	movf	_modbus_reg_addr+1,w,c
  3453  001734  6F02               	movwf	(_crc_buf+2)& (0+255),b
  3454                           
  3455                           ; BSR set to: 3
  3456                           ;Turn_counter.c: 347: crc_buf[3] = (unsigned char)(modbus_reg_addr & 0x00ff);
  3457  001736  C03F  F303         	movff	_modbus_reg_addr,_crc_buf+3
  3458                           
  3459                           ;Turn_counter.c: 348: crc_buf[4] = (unsigned char)(reg_wr_data >> 8);
  3460  00173A  5038               	movf	_reg_wr_data+1,w,c
  3461  00173C  6F04               	movwf	(_crc_buf+4)& (0+255),b
  3462                           
  3463                           ; BSR set to: 3
  3464                           ;Turn_counter.c: 349: crc_buf[5] = (unsigned char)(reg_wr_data & 0x00ff);
  3465  00173E  C037  F305         	movff	_reg_wr_data,_crc_buf+5
  3466                           
  3467                           ; BSR set to: 3
  3468                           ;Turn_counter.c: 350: CRC16 = modbus_CRC16(crc_buf, 6);
  3469  001742  0E00               	movlw	low _crc_buf
  3470  001744  6E11               	movwf	modbus_CRC16@buf,c
  3471  001746  0E03               	movlw	high _crc_buf
  3472  001748  6E12               	movwf	modbus_CRC16@buf+1,c
  3473  00174A  0E06               	movlw	6
  3474  00174C  6E13               	movwf	modbus_CRC16@len,c
  3475  00174E  EC52  F00B         	call	_modbus_CRC16	;wreg free
  3476  001752  C011  F082         	movff	?_modbus_CRC16,_CRC16
  3477  001756  C012  F083         	movff	?_modbus_CRC16+1,_CRC16+1
  3478                           
  3479                           ;Turn_counter.c: 353: LATCbits.LATC3=1;
  3480  00175A  868B               	bsf	3979,3,c	;volatile
  3481                           
  3482                           ;Turn_counter.c: 355: uart_send_hex((unsigned char)dev_id);
  3483  00175C  504C               	movf	_dev_id,w,c
  3484  00175E  EC25  F00D         	call	_uart_send_hex
  3485                           
  3486                           ;Turn_counter.c: 356: uart_send_hex(0x06);
  3487  001762  0E06               	movlw	6
  3488  001764  EC25  F00D         	call	_uart_send_hex
  3489                           
  3490                           ;Turn_counter.c: 357: uart_send_hex((unsigned char)(modbus_reg_addr >> 8));
  3491  001768  5040               	movf	_modbus_reg_addr+1,w,c
  3492  00176A  EC25  F00D         	call	_uart_send_hex
  3493                           
  3494                           ;Turn_counter.c: 358: uart_send_hex((unsigned char)(modbus_reg_addr & 0x00ff));
  3495  00176E  503F               	movf	_modbus_reg_addr,w,c
  3496  001770  EC25  F00D         	call	_uart_send_hex
  3497                           
  3498                           ;Turn_counter.c: 359: uart_send_hex((unsigned char)(reg_wr_data >> 8));
  3499  001774  5038               	movf	_reg_wr_data+1,w,c
  3500  001776  EC25  F00D         	call	_uart_send_hex
  3501                           
  3502                           ;Turn_counter.c: 360: uart_send_hex((unsigned char)(reg_wr_data & 0x00ff));
  3503  00177A  5037               	movf	_reg_wr_data,w,c
  3504  00177C  EC25  F00D         	call	_uart_send_hex
  3505                           
  3506                           ;Turn_counter.c: 362: uart_send_hex((unsigned char)(CRC16 >> 8));
  3507  001780  0100               	movlb	0	; () banked
  3508  001782  5183               	movf	(_CRC16+1)& (0+255),w,b
  3509  001784  EC25  F00D         	call	_uart_send_hex
  3510                           
  3511                           ;Turn_counter.c: 363: uart_send_hex((unsigned char)(CRC16 & 0x00ff));
  3512  001788  0100               	movlb	0	; () banked
  3513  00178A  5182               	movf	_CRC16& (0+255),w,b
  3514  00178C  EC25  F00D         	call	_uart_send_hex
  3515                           
  3516                           ;Turn_counter.c: 364: _delay((unsigned long)((2)*(40000000/4000.0)));
  3517  001790  0E1A               	movlw	26
  3518  001792  6E1E               	movwf	??_modbus_wsr_answer& (0+255),c
  3519  001794  0EF8               	movlw	248
  3520  001796                     u2657:
  3521  001796  2EE8               	decfsz	wreg,f,c
  3522  001798  D7FE               	bra	u2657
  3523  00179A  2E1E               	decfsz	??_modbus_wsr_answer& (0+255),f,c
  3524  00179C  D7FC               	bra	u2657
  3525  00179E  D000               	nop2	
  3526                           
  3527                           ;Turn_counter.c: 365: LATCbits.LATC3=0;
  3528  0017A0  968B               	bcf	3979,3,c	;volatile
  3529  0017A2  0012               	return		;funcret
  3530  0017A4                     __end_of_modbus_wsr_answer:
  3531                           	opt stack 0
  3532                           tblptru	equ	0xFF8
  3533                           tblptrh	equ	0xFF7
  3534                           tblptrl	equ	0xFF6
  3535                           tablat	equ	0xFF5
  3536                           prodh	equ	0xFF4
  3537                           prodl	equ	0xFF3
  3538                           postinc0	equ	0xFEE
  3539                           wreg	equ	0xFE8
  3540                           postdec1	equ	0xFE5
  3541                           fsr1l	equ	0xFE1
  3542                           indf2	equ	0xFDF
  3543                           postinc2	equ	0xFDE
  3544                           postdec2	equ	0xFDD
  3545                           fsr2h	equ	0xFDA
  3546                           fsr2l	equ	0xFD9
  3547                           status	equ	0xFD8
  3548                           
  3549 ;; *************** function _modbus_rhr_answer *****************
  3550 ;; Defined at:
  3551 ;;		line 369 in file "Turn_counter.c"
  3552 ;; Parameters:    Size  Location     Type
  3553 ;;		None
  3554 ;; Auto vars:     Size  Location     Type
  3555 ;;  j               1   32[COMRAM] unsigned char 
  3556 ;;  i               1   31[COMRAM] unsigned char 
  3557 ;;  cnt             1   33[COMRAM] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  1    wreg      void 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 0/0
  3564 ;;		On exit  : 0/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3568 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3569 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3570 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3571 ;;Total ram usage:        5 bytes
  3572 ;; Hardware stack levels used:    1
  3573 ;; Hardware stack levels required when called:    2
  3574 ;; This function calls:
  3575 ;;		_modbus_CRC16
  3576 ;;		_uart_send_hex
  3577 ;; This function is called by:
  3578 ;;		_modbus_poll
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text6
  3583  000FCE                     __ptext6:
  3584                           	opt stack 0
  3585  000FCE                     _modbus_rhr_answer:
  3586                           	opt stack 27
  3587                           
  3588                           ;Turn_counter.c: 371: addr_buf_2 = addr_buf_1;
  3589                           
  3590                           ;incstack = 0
  3591  000FCE  C039  F080         	movff	_addr_buf_1,_addr_buf_2
  3592  000FD2  C03A  F081         	movff	_addr_buf_1+1,_addr_buf_2+1
  3593                           
  3594                           ;Turn_counter.c: 373: crc_buf[0] = dev_id;
  3595  000FD6  C04C  F300         	movff	_dev_id,_crc_buf
  3596                           
  3597                           ;Turn_counter.c: 374: crc_buf[1] = 0x03;
  3598  000FDA  0E03               	movlw	3
  3599  000FDC  0103               	movlb	3	; () banked
  3600  000FDE  6F01               	movwf	(_crc_buf+1)& (0+255),b
  3601                           
  3602                           ; BSR set to: 3
  3603                           ;Turn_counter.c: 375: crc_buf[2] = regs2read*2;
  3604  000FE0  503B               	movf	_regs2read,w,c
  3605  000FE2  243B               	addwf	_regs2read,w,c
  3606  000FE4  6F02               	movwf	(_crc_buf+2)& (0+255),b
  3607                           
  3608                           ; BSR set to: 3
  3609                           ;Turn_counter.c: 377: unsigned char cnt = 3;
  3610  000FE6  0E03               	movlw	3
  3611  000FE8  6E22               	movwf	modbus_rhr_answer@cnt,c
  3612                           
  3613                           ; BSR set to: 3
  3614                           ;Turn_counter.c: 379: for(unsigned char i = 0; i < regs2read; i++)
  3615  000FEA  6A20               	clrf	modbus_rhr_answer@i,c
  3616  000FEC  D032               	goto	l2280
  3617  000FEE                     l2274:
  3618                           
  3619                           ;Turn_counter.c: 380: {
  3620                           ;Turn_counter.c: 381: crc_buf[cnt++] = (unsigned char)(holding_register[addr_buf_1] >> 8
      +                          );
  3621  000FEE  5022               	movf	modbus_rhr_answer@cnt,w,c
  3622  000FF0  0D01               	mullw	1
  3623  000FF2  0E00               	movlw	low _crc_buf
  3624  000FF4  24F3               	addwf	prodl,w,c
  3625  000FF6  6ED9               	movwf	fsr2l,c
  3626  000FF8  0E03               	movlw	high _crc_buf
  3627  000FFA  20F4               	addwfc	prodh,w,c
  3628  000FFC  6EDA               	movwf	fsr2h,c
  3629  000FFE  90D8               	bcf	status,0,c
  3630  001000  3439               	rlcf	_addr_buf_1,w,c
  3631  001002  6EE1               	movwf	fsr1l,c
  3632  001004  343A               	rlcf	_addr_buf_1+1,w,c
  3633  001006  6EE2               	movwf	fsr1h,c
  3634  001008  0E00               	movlw	low _holding_register
  3635  00100A  26E1               	addwf	fsr1l,f,c
  3636  00100C  0E02               	movlw	high _holding_register
  3637  00100E  22E2               	addwfc	fsr1h,f,c
  3638  001010  CFE6 F01E          	movff	postinc1,??_modbus_rhr_answer
  3639  001014  CFE5 F01F          	movff	postdec1,??_modbus_rhr_answer+1
  3640  001018  C01F  F01E         	movff	??_modbus_rhr_answer+1,??_modbus_rhr_answer
  3641  00101C  6A1F               	clrf	??_modbus_rhr_answer+1,c
  3642  00101E  501E               	movf	??_modbus_rhr_answer,w,c
  3643  001020  6EDF               	movwf	indf2,c
  3644  001022  2A22               	incf	modbus_rhr_answer@cnt,f,c
  3645                           
  3646                           ;Turn_counter.c: 382: crc_buf[cnt++] = (unsigned char)(holding_register[addr_buf_1] & 0x
      +                          00ff);
  3647  001024  90D8               	bcf	status,0,c
  3648  001026  3439               	rlcf	_addr_buf_1,w,c
  3649  001028  6ED9               	movwf	fsr2l,c
  3650  00102A  343A               	rlcf	_addr_buf_1+1,w,c
  3651  00102C  6EDA               	movwf	fsr2h,c
  3652  00102E  0E00               	movlw	low _holding_register
  3653  001030  26D9               	addwf	fsr2l,f,c
  3654  001032  0E02               	movlw	high _holding_register
  3655  001034  22DA               	addwfc	fsr2h,f,c
  3656  001036  5022               	movf	modbus_rhr_answer@cnt,w,c
  3657  001038  0D01               	mullw	1
  3658  00103A  0E00               	movlw	low _crc_buf
  3659  00103C  24F3               	addwf	prodl,w,c
  3660  00103E  6EE1               	movwf	fsr1l,c
  3661  001040  0E03               	movlw	high _crc_buf
  3662  001042  20F4               	addwfc	prodh,w,c
  3663  001044  6EE2               	movwf	fsr1h,c
  3664  001046  CFDF FFE7          	movff	indf2,indf1
  3665  00104A  2A22               	incf	modbus_rhr_answer@cnt,f,c
  3666                           
  3667                           ;Turn_counter.c: 383: ++addr_buf_1;
  3668  00104C  4A39               	infsnz	_addr_buf_1,f,c
  3669  00104E  2A3A               	incf	_addr_buf_1+1,f,c
  3670  001050  2A20               	incf	modbus_rhr_answer@i,f,c
  3671  001052                     l2280:
  3672  001052  5020               	movf	modbus_rhr_answer@i,w,c
  3673  001054  6E1E               	movwf	??_modbus_rhr_answer& (0+255),c
  3674  001056  6A1F               	clrf	(??_modbus_rhr_answer+1)& (0+255),c
  3675  001058  503B               	movf	_regs2read,w,c
  3676  00105A  5C1E               	subwf	??_modbus_rhr_answer,w,c
  3677  00105C  503C               	movf	_regs2read+1,w,c
  3678  00105E  581F               	subwfb	??_modbus_rhr_answer+1,w,c
  3679  001060  E201               	bc	l2282
  3680  001062  D7C5               	goto	l2274
  3681  001064                     l2282:
  3682                           
  3683                           ;Turn_counter.c: 384: }
  3684                           ;Turn_counter.c: 386: CRC16 = modbus_CRC16(crc_buf,(regs2read*2)+3);
  3685  001064  0E00               	movlw	low _crc_buf
  3686  001066  6E11               	movwf	modbus_CRC16@buf,c
  3687  001068  0E03               	movlw	high _crc_buf
  3688  00106A  6E12               	movwf	modbus_CRC16@buf+1,c
  3689  00106C  503B               	movf	_regs2read,w,c
  3690  00106E  243B               	addwf	_regs2read,w,c
  3691  001070  0F03               	addlw	3
  3692  001072  6E13               	movwf	modbus_CRC16@len,c
  3693  001074  EC52  F00B         	call	_modbus_CRC16	;wreg free
  3694  001078  C011  F082         	movff	?_modbus_CRC16,_CRC16
  3695  00107C  C012  F083         	movff	?_modbus_CRC16+1,_CRC16+1
  3696                           
  3697                           ;Turn_counter.c: 389: LATCbits.LATC3=1;
  3698  001080  868B               	bsf	3979,3,c	;volatile
  3699                           
  3700                           ;Turn_counter.c: 390: uart_send_hex((unsigned char)dev_id);
  3701  001082  504C               	movf	_dev_id,w,c
  3702  001084  EC25  F00D         	call	_uart_send_hex
  3703                           
  3704                           ;Turn_counter.c: 391: uart_send_hex(0x03);
  3705  001088  0E03               	movlw	3
  3706  00108A  EC25  F00D         	call	_uart_send_hex
  3707                           
  3708                           ;Turn_counter.c: 392: uart_send_hex(regs2read*2);
  3709  00108E  503B               	movf	_regs2read,w,c
  3710  001090  243B               	addwf	_regs2read,w,c
  3711  001092  EC25  F00D         	call	_uart_send_hex
  3712                           
  3713                           ;Turn_counter.c: 393: for(unsigned char j = 0; j < regs2read; j++)
  3714  001096  6A21               	clrf	modbus_rhr_answer@j,c
  3715  001098  D025               	goto	l2300
  3716  00109A                     l2294:
  3717                           
  3718                           ;Turn_counter.c: 394: {
  3719                           ;Turn_counter.c: 395: uart_send_hex((unsigned char)(holding_register[addr_buf_2] >> 8));
  3720  00109A  90D8               	bcf	status,0,c
  3721  00109C  0100               	movlb	0	; () banked
  3722  00109E  3580               	rlcf	_addr_buf_2& (0+255),w,b
  3723  0010A0  6ED9               	movwf	fsr2l,c
  3724  0010A2  3581               	rlcf	(_addr_buf_2+1)& (0+255),w,b
  3725  0010A4  6EDA               	movwf	fsr2h,c
  3726  0010A6  0E00               	movlw	low _holding_register
  3727  0010A8  26D9               	addwf	fsr2l,f,c
  3728  0010AA  0E02               	movlw	high _holding_register
  3729  0010AC  22DA               	addwfc	fsr2h,f,c
  3730  0010AE  CFDE F01E          	movff	postinc2,??_modbus_rhr_answer
  3731  0010B2  CFDD F01F          	movff	postdec2,??_modbus_rhr_answer+1
  3732  0010B6  C01F  F01E         	movff	??_modbus_rhr_answer+1,??_modbus_rhr_answer
  3733  0010BA  6A1F               	clrf	??_modbus_rhr_answer+1,c
  3734  0010BC  501E               	movf	??_modbus_rhr_answer,w,c
  3735  0010BE  EC25  F00D         	call	_uart_send_hex
  3736                           
  3737                           ;Turn_counter.c: 396: uart_send_hex((unsigned char)(holding_register[addr_buf_2] & 0x00f
      +                          f));
  3738  0010C2  90D8               	bcf	status,0,c
  3739  0010C4  0100               	movlb	0	; () banked
  3740  0010C6  3580               	rlcf	_addr_buf_2& (0+255),w,b
  3741  0010C8  6ED9               	movwf	fsr2l,c
  3742  0010CA  3581               	rlcf	(_addr_buf_2+1)& (0+255),w,b
  3743  0010CC  6EDA               	movwf	fsr2h,c
  3744  0010CE  0E00               	movlw	low _holding_register
  3745  0010D0  26D9               	addwf	fsr2l,f,c
  3746  0010D2  0E02               	movlw	high _holding_register
  3747  0010D4  22DA               	addwfc	fsr2h,f,c
  3748  0010D6  50DF               	movf	indf2,w,c
  3749  0010D8  EC25  F00D         	call	_uart_send_hex
  3750                           
  3751                           ;Turn_counter.c: 397: ++addr_buf_2;
  3752  0010DC  0100               	movlb	0	; () banked
  3753  0010DE  4B80               	infsnz	_addr_buf_2& (0+255),f,b
  3754  0010E0  2B81               	incf	(_addr_buf_2+1)& (0+255),f,b
  3755                           
  3756                           ; BSR set to: 0
  3757  0010E2  2A21               	incf	modbus_rhr_answer@j,f,c
  3758  0010E4                     l2300:
  3759  0010E4  5021               	movf	modbus_rhr_answer@j,w,c
  3760  0010E6  6E1E               	movwf	??_modbus_rhr_answer& (0+255),c
  3761  0010E8  6A1F               	clrf	(??_modbus_rhr_answer+1)& (0+255),c
  3762  0010EA  503B               	movf	_regs2read,w,c
  3763  0010EC  5C1E               	subwf	??_modbus_rhr_answer,w,c
  3764  0010EE  503C               	movf	_regs2read+1,w,c
  3765  0010F0  581F               	subwfb	??_modbus_rhr_answer+1,w,c
  3766  0010F2  E201               	bc	l2302
  3767  0010F4  D7D2               	goto	l2294
  3768  0010F6                     l2302:
  3769                           
  3770                           ;Turn_counter.c: 398: }
  3771                           ;Turn_counter.c: 400: uart_send_hex((unsigned char)(CRC16 >> 8));
  3772  0010F6  0100               	movlb	0	; () banked
  3773  0010F8  5183               	movf	(_CRC16+1)& (0+255),w,b
  3774  0010FA  EC25  F00D         	call	_uart_send_hex
  3775                           
  3776                           ;Turn_counter.c: 401: uart_send_hex((unsigned char)(CRC16 & 0x00ff));
  3777  0010FE  0100               	movlb	0	; () banked
  3778  001100  5182               	movf	_CRC16& (0+255),w,b
  3779  001102  EC25  F00D         	call	_uart_send_hex
  3780                           
  3781                           ;Turn_counter.c: 402: _delay((unsigned long)((2)*(40000000/4000.0)));
  3782  001106  0E1A               	movlw	26
  3783  001108  6E1E               	movwf	??_modbus_rhr_answer& (0+255),c
  3784  00110A  0EF8               	movlw	248
  3785  00110C                     u2667:
  3786  00110C  2EE8               	decfsz	wreg,f,c
  3787  00110E  D7FE               	bra	u2667
  3788  001110  2E1E               	decfsz	??_modbus_rhr_answer& (0+255),f,c
  3789  001112  D7FC               	bra	u2667
  3790  001114  D000               	nop2	
  3791                           
  3792                           ;Turn_counter.c: 403: LATCbits.LATC3=0;
  3793  001116  968B               	bcf	3979,3,c	;volatile
  3794  001118  0012               	return		;funcret
  3795  00111A                     __end_of_modbus_rhr_answer:
  3796                           	opt stack 0
  3797                           tblptru	equ	0xFF8
  3798                           tblptrh	equ	0xFF7
  3799                           tblptrl	equ	0xFF6
  3800                           tablat	equ	0xFF5
  3801                           prodh	equ	0xFF4
  3802                           prodl	equ	0xFF3
  3803                           postinc0	equ	0xFEE
  3804                           wreg	equ	0xFE8
  3805                           indf1	equ	0xFE7
  3806                           postinc1	equ	0xFE6
  3807                           postdec1	equ	0xFE5
  3808                           fsr1h	equ	0xFE2
  3809                           fsr1l	equ	0xFE1
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           fsr2h	equ	0xFDA
  3814                           fsr2l	equ	0xFD9
  3815                           status	equ	0xFD8
  3816                           
  3817 ;; *************** function _uart_send_hex *****************
  3818 ;; Defined at:
  3819 ;;		line 158 in file "Turn_counter.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;  temp            1    wreg     unsigned char 
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;  temp            1   16[COMRAM] unsigned char 
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, status,2, cstack
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3834 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3836 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3837 ;;Total ram usage:        1 bytes
  3838 ;; Hardware stack levels used:    1
  3839 ;; Hardware stack levels required when called:    1
  3840 ;; This function calls:
  3841 ;;		Nothing
  3842 ;; This function is called by:
  3843 ;;		_modbus_wsr_answer
  3844 ;;		_modbus_rhr_answer
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text7
  3849  001A4A                     __ptext7:
  3850                           	opt stack 0
  3851  001A4A                     _uart_send_hex:
  3852                           	opt stack 27
  3853                           
  3854                           ;incstack = 0
  3855                           ;uart_send_hex@temp stored from wreg
  3856  001A4A  6E11               	movwf	uart_send_hex@temp,c
  3857  001A4C                     l204:
  3858  001A4C  A2AC               	btfss	4012,1,c	;volatile
  3859  001A4E  D7FE               	goto	l204
  3860                           
  3861                           ;Turn_counter.c: 165: TXREG1bits.TXREG1 = temp;
  3862  001A50  C011  FFAD         	movff	uart_send_hex@temp,4013	;volatile
  3863                           
  3864                           ;Turn_counter.c: 166: _delay((unsigned long)((100)*(40000000/4000000.0)));
  3865  001A54  0EC8               	movlw	200
  3866  001A56                     u2677:
  3867  001A56  D000               	nop2	
  3868  001A58  2EE8               	decfsz	wreg,f,c
  3869  001A5A  D7FD               	bra	u2677
  3870  001A5C  0012               	return		;funcret
  3871  001A5E                     __end_of_uart_send_hex:
  3872                           	opt stack 0
  3873                           tblptru	equ	0xFF8
  3874                           tblptrh	equ	0xFF7
  3875                           tblptrl	equ	0xFF6
  3876                           tablat	equ	0xFF5
  3877                           prodh	equ	0xFF4
  3878                           prodl	equ	0xFF3
  3879                           postinc0	equ	0xFEE
  3880                           wreg	equ	0xFE8
  3881                           indf1	equ	0xFE7
  3882                           postinc1	equ	0xFE6
  3883                           postdec1	equ	0xFE5
  3884                           fsr1h	equ	0xFE2
  3885                           fsr1l	equ	0xFE1
  3886                           indf2	equ	0xFDF
  3887                           postinc2	equ	0xFDE
  3888                           postdec2	equ	0xFDD
  3889                           fsr2h	equ	0xFDA
  3890                           fsr2l	equ	0xFD9
  3891                           status	equ	0xFD8
  3892                           
  3893 ;; *************** function _modbus_CRC16 *****************
  3894 ;; Defined at:
  3895 ;;		line 316 in file "Turn_counter.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;  buf             2   16[COMRAM] PTR unsigned char 
  3898 ;;		 -> crc_buf(250), 
  3899 ;;  len             1   18[COMRAM] unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  i               1   26[COMRAM] unsigned char 
  3902 ;;  pos             1   25[COMRAM] unsigned char 
  3903 ;;  crc             2   27[COMRAM] unsigned int 
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  2   16[COMRAM] unsigned int 
  3906 ;; Registers used:
  3907 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3913 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3914 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3915 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3916 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3917 ;;Total ram usage:       13 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    1
  3920 ;; This function calls:
  3921 ;;		Nothing
  3922 ;; This function is called by:
  3923 ;;		_modbus_wsr_answer
  3924 ;;		_modbus_rhr_answer
  3925 ;;		_modbus_rx_CRC_check
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text8
  3930  0016A4                     __ptext8:
  3931                           	opt stack 0
  3932  0016A4                     _modbus_CRC16:
  3933                           	opt stack 27
  3934                           
  3935                           ;Turn_counter.c: 317: unsigned int crc = 0xFFFF;
  3936                           
  3937                           ;incstack = 0
  3938  0016A4  681C               	setf	modbus_CRC16@crc,c
  3939  0016A6  681D               	setf	modbus_CRC16@crc+1,c
  3940                           
  3941                           ;Turn_counter.c: 319: for (unsigned char pos = 0; pos < len; pos++)
  3942  0016A8  6A1A               	clrf	modbus_CRC16@pos,c
  3943  0016AA  D020               	goto	l2132
  3944  0016AC                     l2114:
  3945                           
  3946                           ;Turn_counter.c: 320: {
  3947                           ;Turn_counter.c: 321: crc ^= (unsigned int)buf[pos];
  3948  0016AC  501A               	movf	modbus_CRC16@pos,w,c
  3949  0016AE  0D01               	mullw	1
  3950  0016B0  50F3               	movf	prodl,w,c
  3951  0016B2  2411               	addwf	modbus_CRC16@buf,w,c
  3952  0016B4  6ED9               	movwf	fsr2l,c
  3953  0016B6  50F4               	movf	prodh,w,c
  3954  0016B8  2012               	addwfc	modbus_CRC16@buf+1,w,c
  3955  0016BA  6EDA               	movwf	fsr2h,c
  3956  0016BC  50DF               	movf	indf2,w,c
  3957  0016BE  6E14               	movwf	??_modbus_CRC16& (0+255),c
  3958  0016C0  5014               	movf	??_modbus_CRC16,w,c
  3959  0016C2  1A1C               	xorwf	modbus_CRC16@crc,f,c
  3960                           
  3961                           ;Turn_counter.c: 322: for (unsigned char i = 8; i != 0; i--)
  3962  0016C4  0E08               	movlw	8
  3963  0016C6  6E1B               	movwf	modbus_CRC16@i,c
  3964  0016C8                     l2118:
  3965  0016C8  501B               	movf	modbus_CRC16@i,w,c
  3966  0016CA  E00F               	bz	l2130
  3967                           
  3968                           ;Turn_counter.c: 323: {
  3969                           ;Turn_counter.c: 324: if ((crc & 0x0001) != 0)
  3970  0016CC  A01C               	btfss	modbus_CRC16@crc,0,c
  3971  0016CE  D008               	goto	l2126
  3972                           
  3973                           ;Turn_counter.c: 325: {
  3974                           ;Turn_counter.c: 326: crc >>= 1;
  3975  0016D0  90D8               	bcf	status,0,c
  3976  0016D2  321D               	rrcf	modbus_CRC16@crc+1,f,c
  3977  0016D4  321C               	rrcf	modbus_CRC16@crc,f,c
  3978                           
  3979                           ;Turn_counter.c: 327: crc ^= 0xA001;
  3980  0016D6  0E01               	movlw	1
  3981  0016D8  1A1C               	xorwf	modbus_CRC16@crc,f,c
  3982  0016DA  0EA0               	movlw	160
  3983  0016DC  1A1D               	xorwf	modbus_CRC16@crc+1,f,c
  3984                           
  3985                           ;Turn_counter.c: 328: }
  3986  0016DE  D003               	goto	l251
  3987  0016E0                     l2126:
  3988                           
  3989                           ;Turn_counter.c: 329: else
  3990                           ;Turn_counter.c: 330: crc >>= 1;
  3991  0016E0  90D8               	bcf	status,0,c
  3992  0016E2  321D               	rrcf	modbus_CRC16@crc+1,f,c
  3993  0016E4  321C               	rrcf	modbus_CRC16@crc,f,c
  3994  0016E6                     l251:
  3995  0016E6  061B               	decf	modbus_CRC16@i,f,c
  3996  0016E8  D7EF               	goto	l2118
  3997  0016EA                     l2130:
  3998  0016EA  2A1A               	incf	modbus_CRC16@pos,f,c
  3999  0016EC                     l2132:
  4000  0016EC  5013               	movf	modbus_CRC16@len,w,c
  4001  0016EE  5C1A               	subwf	modbus_CRC16@pos,w,c
  4002  0016F0  E201               	bc	l2134
  4003  0016F2  D7DC               	goto	l2114
  4004  0016F4                     l2134:
  4005                           
  4006                           ;Turn_counter.c: 331: }
  4007                           ;Turn_counter.c: 332: }
  4008                           ;Turn_counter.c: 337: crc = ((crc<<8)&0xff00)|((crc>>8)&0x00ff);
  4009  0016F4  6A14               	clrf	??_modbus_CRC16& (0+255),c
  4010  0016F6  6815               	setf	(??_modbus_CRC16+1)& (0+255),c
  4011  0016F8  501C               	movf	modbus_CRC16@crc,w,c
  4012  0016FA  6E17               	movwf	(??_modbus_CRC16+3)& (0+255),c
  4013  0016FC  6A16               	clrf	(??_modbus_CRC16+2)& (0+255),c
  4014  0016FE  5014               	movf	??_modbus_CRC16,w,c
  4015  001700  1616               	andwf	??_modbus_CRC16+2,f,c
  4016  001702  5015               	movf	??_modbus_CRC16+1,w,c
  4017  001704  1617               	andwf	??_modbus_CRC16+3,f,c
  4018  001706  C01C  F018         	movff	modbus_CRC16@crc,??_modbus_CRC16+4
  4019  00170A  C01D  F019         	movff	modbus_CRC16@crc+1,??_modbus_CRC16+5
  4020  00170E  C019  F018         	movff	??_modbus_CRC16+5,??_modbus_CRC16+4
  4021  001712  6A19               	clrf	??_modbus_CRC16+5,c
  4022  001714  5018               	movf	??_modbus_CRC16+4,w,c
  4023  001716  1016               	iorwf	??_modbus_CRC16+2,w,c
  4024  001718  6E1C               	movwf	modbus_CRC16@crc,c
  4025  00171A  5017               	movf	??_modbus_CRC16+3,w,c
  4026  00171C  6E1D               	movwf	modbus_CRC16@crc+1,c
  4027                           
  4028                           ;Turn_counter.c: 339: return crc;
  4029  00171E  C01C  F011         	movff	modbus_CRC16@crc,?_modbus_CRC16
  4030  001722  C01D  F012         	movff	modbus_CRC16@crc+1,?_modbus_CRC16+1
  4031  001726  0012               	return	
  4032  001728                     __end_of_modbus_CRC16:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           postinc0	equ	0xFEE
  4041                           wreg	equ	0xFE8
  4042                           indf1	equ	0xFE7
  4043                           postinc1	equ	0xFE6
  4044                           postdec1	equ	0xFE5
  4045                           fsr1h	equ	0xFE2
  4046                           fsr1l	equ	0xFE1
  4047                           indf2	equ	0xFDF
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054 ;; *************** function _modbus_reset *****************
  4055 ;; Defined at:
  4056 ;;		line 186 in file "Turn_counter.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;		None
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  i               2   16[COMRAM] int 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;                  1    wreg      void 
  4063 ;; Registers used:
  4064 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4071 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4073 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4074 ;;Total ram usage:        2 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    1
  4077 ;; This function calls:
  4078 ;;		Nothing
  4079 ;; This function is called by:
  4080 ;;		_modbus_poll
  4081 ;;		_main
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	text9
  4086  001978                     __ptext9:
  4087                           	opt stack 0
  4088  001978                     _modbus_reset:
  4089                           	opt stack 29
  4090                           
  4091                           ;Turn_counter.c: 188: for(int i = 0; i < 32; i++)
  4092                           
  4093                           ;incstack = 0
  4094  001978  0E00               	movlw	0
  4095  00197A  6E12               	movwf	modbus_reset@i+1,c
  4096  00197C  6E11               	movwf	modbus_reset@i,c
  4097  00197E                     l2158:
  4098  00197E  BE12               	btfsc	modbus_reset@i+1,7,c
  4099  001980  D005               	goto	l2162
  4100  001982  5012               	movf	modbus_reset@i+1,w,c
  4101  001984  E10E               	bnz	l2168
  4102  001986  0E20               	movlw	32
  4103  001988  5C11               	subwf	modbus_reset@i,w,c
  4104  00198A  E20B               	bc	l2168
  4105  00198C                     l2162:
  4106                           
  4107                           ;Turn_counter.c: 189: rx_buf[i] = 0;
  4108  00198C  0E60               	movlw	low _rx_buf
  4109  00198E  2411               	addwf	modbus_reset@i,w,c
  4110  001990  6ED9               	movwf	fsr2l,c
  4111  001992  0E00               	movlw	high _rx_buf
  4112  001994  2012               	addwfc	modbus_reset@i+1,w,c
  4113  001996  6EDA               	movwf	fsr2h,c
  4114  001998  0E00               	movlw	0
  4115  00199A  6EDF               	movwf	indf2,c
  4116  00199C  4A11               	infsnz	modbus_reset@i,f,c
  4117  00199E  2A12               	incf	modbus_reset@i+1,f,c
  4118  0019A0  D7EE               	goto	l2158
  4119  0019A2                     l2168:
  4120                           
  4121                           ;Turn_counter.c: 192: wr_ptr=0;
  4122  0019A2  6A45               	clrf	_wr_ptr,c
  4123                           
  4124                           ;Turn_counter.c: 193: rd_ptr=0;
  4125  0019A4  6A44               	clrf	_rd_ptr,c
  4126  0019A6  0C00               	retlw	0	;funcret
  4127  0019A8                     __end_of_modbus_reset:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           postinc0	equ	0xFEE
  4136                           wreg	equ	0xFE8
  4137                           indf1	equ	0xFE7
  4138                           postinc1	equ	0xFE6
  4139                           postdec1	equ	0xFE5
  4140                           fsr1h	equ	0xFE2
  4141                           fsr1l	equ	0xFE1
  4142                           indf2	equ	0xFDF
  4143                           postinc2	equ	0xFDE
  4144                           postdec2	equ	0xFDD
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _modbus_refresh *****************
  4150 ;; Defined at:
  4151 ;;		line 196 in file "Turn_counter.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  cmd_type        1    wreg     unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  cmd_type        1   21[COMRAM] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      void 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0, cstack
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4167 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4168 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4169 ;;Total ram usage:        3 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; Hardware stack levels required when called:    2
  4172 ;; This function calls:
  4173 ;;		_EEPROM_WrByte
  4174 ;; This function is called by:
  4175 ;;		_modbus_poll
  4176 ;; This function uses a non-reentrant model
  4177 ;;
  4178                           
  4179                           	psect	text10
  4180  000E10                     __ptext10:
  4181                           	opt stack 0
  4182  000E10                     _modbus_refresh:
  4183                           	opt stack 27
  4184                           
  4185                           ;incstack = 0
  4186                           ;modbus_refresh@cmd_type stored from wreg
  4187  000E10  6E16               	movwf	modbus_refresh@cmd_type,c
  4188                           
  4189                           ;Turn_counter.c: 199: if(cmd_type == 0x03)
  4190  000E12  0E03               	movlw	3
  4191  000E14  1816               	xorwf	modbus_refresh@cmd_type,w,c
  4192  000E16  E162               	bnz	l2190
  4193                           
  4194                           ;Turn_counter.c: 200: {
  4195                           ;Turn_counter.c: 201: holding_register[0] = set_zero;
  4196  000E18  C1D9  F200         	movff	_set_zero,_holding_register
  4197  000E1C  C1DA  F201         	movff	_set_zero+1,_holding_register+1
  4198                           
  4199                           ;Turn_counter.c: 202: holding_register[1] = offset;
  4200  000E20  C1DD  F202         	movff	_offset,_holding_register+2
  4201  000E24  C1DE  F203         	movff	_offset+1,_holding_register+3
  4202                           
  4203                           ;Turn_counter.c: 203: holding_register[2] = num_of_turns;
  4204  000E28  C1F9  F204         	movff	_num_of_turns,_holding_register+4
  4205  000E2C  C1FA  F205         	movff	_num_of_turns+1,_holding_register+5
  4206                           
  4207                           ;Turn_counter.c: 204: holding_register[3] = grad;
  4208  000E30  C1DB  F206         	movff	_grad,_holding_register+6
  4209  000E34  C1DC  F207         	movff	_grad+1,_holding_register+7
  4210                           
  4211                           ;Turn_counter.c: 205: holding_register[4] = turns_percent;
  4212  000E38  C1F7  F208         	movff	_turns_percent,_holding_register+8
  4213  000E3C  C1F8  F209         	movff	_turns_percent+1,_holding_register+9
  4214                           
  4215                           ;Turn_counter.c: 206: holding_register[5] = V_detect;
  4216  000E40  C090  F20A         	movff	_V_detect,_holding_register+10
  4217  000E44  C091  F20B         	movff	_V_detect+1,_holding_register+11
  4218                           
  4219                           ;Turn_counter.c: 207: holding_register[6] = current_max;
  4220  000E48  C1FB  F20C         	movff	_current_max,_holding_register+12
  4221  000E4C  C1FC  F20D         	movff	_current_max+1,_holding_register+13
  4222                           
  4223                           ;Turn_counter.c: 208: holding_register[7] = ADC_current_rms;
  4224  000E50  C1F3  F20E         	movff	_ADC_current_rms,_holding_register+14
  4225  000E54  C1F4  F20F         	movff	_ADC_current_rms+1,_holding_register+15
  4226                           
  4227                           ;Turn_counter.c: 209: holding_register[8] = overcurrent;
  4228  000E58  C1E1  F210         	movff	_overcurrent,_holding_register+16
  4229  000E5C  C1E2  F211         	movff	_overcurrent+1,_holding_register+17
  4230                           
  4231                           ;Turn_counter.c: 210: holding_register[10] = turns_percent_press;
  4232  000E60  C1F5  F214         	movff	_turns_percent_press,_holding_register+20
  4233  000E64  C1F6  F215         	movff	_turns_percent_press+1,_holding_register+21
  4234                           
  4235                           ;Turn_counter.c: 213: holding_register[11] = read_turns;
  4236  000E68  C088  F216         	movff	_read_turns,_holding_register+22
  4237  000E6C  C089  F217         	movff	_read_turns+1,_holding_register+23
  4238                           
  4239                           ;Turn_counter.c: 214: holding_register[12] = ADC_current_result;
  4240  000E70  C08C  F218         	movff	_ADC_current_result,_holding_register+24
  4241  000E74  C08D  F219         	movff	_ADC_current_result+1,_holding_register+25
  4242                           
  4243                           ;Turn_counter.c: 215: holding_register[13] = ADC_current_max;
  4244  000E78  C1EF  F21A         	movff	_ADC_current_max,_holding_register+26
  4245  000E7C  C1F0  F21B         	movff	_ADC_current_max+1,_holding_register+27
  4246                           
  4247                           ;Turn_counter.c: 216: holding_register[14] = ADC_current_min;
  4248  000E80  C1FD  F21C         	movff	_ADC_current_min,_holding_register+28
  4249  000E84  C1FE  F21D         	movff	_ADC_current_min+1,_holding_register+29
  4250                           
  4251                           ;Turn_counter.c: 217: holding_register[15] = GRAD_cutoff_null;
  4252  000E88  C1DF  F21E         	movff	_GRAD_cutoff_null,_holding_register+30
  4253  000E8C  C1E0  F21F         	movff	_GRAD_cutoff_null+1,_holding_register+31
  4254                           
  4255                           ;Turn_counter.c: 218: holding_register[16] = (unsigned int)bd_rate_code;
  4256  000E90  C04D  F220         	movff	_bd_rate_code,_holding_register+32
  4257  000E94  0102               	movlb	2	; () banked
  4258  000E96  6B21               	clrf	(_holding_register+33)& (0+255),b
  4259                           
  4260                           ;Turn_counter.c: 220: holding_register[21] = (unsigned int)dev_id;
  4261  000E98  C04C  F22A         	movff	_dev_id,_holding_register+42
  4262  000E9C  6B2B               	clrf	(_holding_register+43)& (0+255),b
  4263                           
  4264                           ; BSR set to: 2
  4265                           ;Turn_counter.c: 221: holding_register[25] = (unsigned int)20;
  4266  000E9E  6B33               	clrf	(_holding_register+51)& (0+255),b
  4267  000EA0  0E14               	movlw	20
  4268  000EA2  6F32               	movwf	(_holding_register+50)& (0+255),b
  4269                           
  4270                           ; BSR set to: 2
  4271                           ;Turn_counter.c: 223: holding_register[30] = (unsigned int)CHANGE_MOTOR;
  4272  000EA4  C04A  F23C         	movff	_CHANGE_MOTOR,_holding_register+60
  4273  000EA8  C04B  F23D         	movff	_CHANGE_MOTOR+1,_holding_register+61
  4274                           
  4275                           ; BSR set to: 2
  4276                           ;Turn_counter.c: 224: holding_register[31] = (unsigned int)POT_MIN;
  4277  000EAC  C048  F23E         	movff	_POT_MIN,_holding_register+62
  4278  000EB0  C049  F23F         	movff	_POT_MIN+1,_holding_register+63
  4279                           
  4280                           ; BSR set to: 2
  4281                           ;Turn_counter.c: 225: holding_register[32] = (unsigned int)SET_MIN;
  4282  000EB4  C1EB  F240         	movff	_SET_MIN,_holding_register+64
  4283  000EB8  C1EC  F241         	movff	_SET_MIN+1,_holding_register+65
  4284                           
  4285                           ; BSR set to: 2
  4286                           ;Turn_counter.c: 226: holding_register[33] = (unsigned int)POT_MAX;
  4287  000EBC  C046  F242         	movff	_POT_MAX,_holding_register+66
  4288  000EC0  C047  F243         	movff	_POT_MAX+1,_holding_register+67
  4289                           
  4290                           ; BSR set to: 2
  4291                           ;Turn_counter.c: 227: holding_register[34] = (unsigned int)SET_MAX;
  4292  000EC4  C1E9  F244         	movff	_SET_MAX,_holding_register+68
  4293  000EC8  C1EA  F245         	movff	_SET_MAX+1,_holding_register+69
  4294                           
  4295                           ; BSR set to: 2
  4296                           ;Turn_counter.c: 228: holding_register[35] = (unsigned int)GRAD_MAX;
  4297  000ECC  C1E7  F246         	movff	_GRAD_MAX,_holding_register+70
  4298  000ED0  C1E8  F247         	movff	_GRAD_MAX+1,_holding_register+71
  4299                           
  4300                           ; BSR set to: 2
  4301                           ;Turn_counter.c: 229: holding_register[36] = (unsigned int)TURN_PERCENT_2;
  4302  000ED4  C08A  F248         	movff	_TURN_PERCENT_2,_holding_register+72
  4303  000ED8  C08B  F249         	movff	_TURN_PERCENT_2+1,_holding_register+73
  4304  000EDC                     l2190:
  4305                           
  4306                           ;Turn_counter.c: 231: }
  4307                           ;Turn_counter.c: 234: if(cmd_type == 0x06)
  4308  000EDC  0E06               	movlw	6
  4309  000EDE  1816               	xorwf	modbus_refresh@cmd_type,w,c
  4310  000EE0  E058               	bz	l2208
  4311  000EE2  D06F               	goto	l224
  4312  000EE4                     l226:
  4313                           
  4314                           ;Turn_counter.c: 238: set_zero = holding_register[0];
  4315  000EE4  C200  F1D9         	movff	_holding_register,_set_zero
  4316  000EE8  C201  F1DA         	movff	_holding_register+1,_set_zero+1
  4317                           
  4318                           ;Turn_counter.c: 239: break;
  4319  000EEC  D06A               	goto	l224
  4320  000EEE                     l228:
  4321                           
  4322                           ;Turn_counter.c: 242: num_of_turns = holding_register[2];
  4323  000EEE  C204  F1F9         	movff	_holding_register+4,_num_of_turns
  4324  000EF2  C205  F1FA         	movff	_holding_register+5,_num_of_turns+1
  4325                           
  4326                           ;Turn_counter.c: 243: EEPROM_WrByte(3,num_of_turns & 0x00ff);
  4327  000EF6  C1F9  F011         	movff	_num_of_turns,EEPROM_WrByte@bData
  4328  000EFA  0E03               	movlw	3
  4329  000EFC  EC83  F00C         	call	_EEPROM_WrByte
  4330                           
  4331                           ;Turn_counter.c: 244: EEPROM_WrByte(4,num_of_turns >> 8);
  4332  000F00  0101               	movlb	1	; () banked
  4333  000F02  51FA               	movf	(_num_of_turns+1)& (0+255),w,b
  4334  000F04  6E11               	movwf	EEPROM_WrByte@bData,c
  4335  000F06  0E04               	movlw	4
  4336  000F08  EC83  F00C         	call	_EEPROM_WrByte
  4337                           
  4338                           ;Turn_counter.c: 245: break;
  4339  000F0C  D05A               	goto	l224
  4340  000F0E                     l229:
  4341                           
  4342                           ;Turn_counter.c: 248: current_max = holding_register[6];
  4343  000F0E  C20C  F1FB         	movff	_holding_register+12,_current_max
  4344  000F12  C20D  F1FC         	movff	_holding_register+13,_current_max+1
  4345                           
  4346                           ;Turn_counter.c: 249: EEPROM_WrByte(5,current_max & 0x00ff);
  4347  000F16  C1FB  F011         	movff	_current_max,EEPROM_WrByte@bData
  4348  000F1A  0E05               	movlw	5
  4349  000F1C  EC83  F00C         	call	_EEPROM_WrByte
  4350                           
  4351                           ;Turn_counter.c: 250: EEPROM_WrByte(6,current_max >> 8);
  4352  000F20  0101               	movlb	1	; () banked
  4353  000F22  51FC               	movf	(_current_max+1)& (0+255),w,b
  4354  000F24  6E11               	movwf	EEPROM_WrByte@bData,c
  4355  000F26  0E06               	movlw	6
  4356  000F28  EC83  F00C         	call	_EEPROM_WrByte
  4357                           
  4358                           ;Turn_counter.c: 251: break;
  4359  000F2C  D04A               	goto	l224
  4360  000F2E                     l230:
  4361                           
  4362                           ;Turn_counter.c: 254: bd_rate_code = (unsigned char)holding_register[16];
  4363  000F2E  C220  F04D         	movff	_holding_register+32,_bd_rate_code
  4364                           
  4365                           ;Turn_counter.c: 255: bd_rate_fl = 1;
  4366  000F32  0E01               	movlw	1
  4367  000F34  0100               	movlb	0	; () banked
  4368  000F36  6F9C               	movwf	_bd_rate_fl& (0+255),b
  4369                           
  4370                           ;Turn_counter.c: 256: break;
  4371  000F38  D044               	goto	l224
  4372  000F3A                     l2200:
  4373                           
  4374                           ;Turn_counter.c: 259: id_change = 1;
  4375  000F3A  0E01               	movlw	1
  4376  000F3C  0100               	movlb	0	; () banked
  4377  000F3E  6F96               	movwf	_id_change& (0+255),b
  4378                           
  4379                           ;Turn_counter.c: 260: break;
  4380  000F40  D040               	goto	l224
  4381  000F42                     l232:
  4382                           
  4383                           ;Turn_counter.c: 263: CHANGE_MOTOR = (unsigned char)holding_register[30];
  4384  000F42  C23C  F04A         	movff	_holding_register+60,_CHANGE_MOTOR
  4385  000F46  6A4B               	clrf	_CHANGE_MOTOR+1,c
  4386                           
  4387                           ;Turn_counter.c: 264: EEPROM_WrByte(13,CHANGE_MOTOR & 0x00ff);
  4388  000F48  C04A  F011         	movff	_CHANGE_MOTOR,EEPROM_WrByte@bData
  4389  000F4C  0E0D               	movlw	13
  4390  000F4E  EC83  F00C         	call	_EEPROM_WrByte
  4391                           
  4392                           ;Turn_counter.c: 265: EEPROM_WrByte(14,CHANGE_MOTOR >> 8);
  4393  000F52  504B               	movf	_CHANGE_MOTOR+1,w,c
  4394  000F54  6E11               	movwf	EEPROM_WrByte@bData,c
  4395  000F56  0E0E               	movlw	14
  4396  000F58  EC83  F00C         	call	_EEPROM_WrByte
  4397                           
  4398                           ;Turn_counter.c: 266: break;
  4399  000F5C  D032               	goto	l224
  4400  000F5E                     l233:
  4401                           
  4402                           ;Turn_counter.c: 269: SET_MIN = (unsigned char)holding_register[32];
  4403  000F5E  C240  F1EB         	movff	_holding_register+64,_SET_MIN
  4404  000F62  0101               	movlb	1	; () banked
  4405  000F64  6BEC               	clrf	(_SET_MIN+1)& (0+255),b
  4406                           
  4407                           ;Turn_counter.c: 270: break;
  4408  000F66  D02D               	goto	l224
  4409  000F68                     l234:
  4410                           
  4411                           ;Turn_counter.c: 273: SET_MAX = (unsigned char)holding_register[34];
  4412  000F68  C244  F1E9         	movff	_holding_register+68,_SET_MAX
  4413  000F6C  0101               	movlb	1	; () banked
  4414  000F6E  6BEA               	clrf	(_SET_MAX+1)& (0+255),b
  4415                           
  4416                           ;Turn_counter.c: 274: break;
  4417  000F70  D028               	goto	l224
  4418  000F72                     l235:
  4419                           
  4420                           ;Turn_counter.c: 277: GRAD_MAX = (unsigned int)holding_register[35];
  4421  000F72  C246  F1E7         	movff	_holding_register+70,_GRAD_MAX
  4422  000F76  C247  F1E8         	movff	_holding_register+71,_GRAD_MAX+1
  4423                           
  4424                           ;Turn_counter.c: 278: EEPROM_WrByte(15,GRAD_MAX & 0x00ff);
  4425  000F7A  C1E7  F011         	movff	_GRAD_MAX,EEPROM_WrByte@bData
  4426  000F7E  0E0F               	movlw	15
  4427  000F80  EC83  F00C         	call	_EEPROM_WrByte
  4428                           
  4429                           ;Turn_counter.c: 279: EEPROM_WrByte(16,GRAD_MAX >> 8);
  4430  000F84  0101               	movlb	1	; () banked
  4431  000F86  51E8               	movf	(_GRAD_MAX+1)& (0+255),w,b
  4432  000F88  6E11               	movwf	EEPROM_WrByte@bData,c
  4433  000F8A  0E10               	movlw	16
  4434  000F8C  EC83  F00C         	call	_EEPROM_WrByte
  4435                           
  4436                           ;Turn_counter.c: 282: default: break; }
  4437                           
  4438                           ;Turn_counter.c: 280: break;
  4439  000F90  D018               	goto	l224
  4440  000F92                     l2208:
  4441  000F92  C039  F014         	movff	_addr_buf_1,??_modbus_refresh
  4442  000F96  C03A  F015         	movff	_addr_buf_1+1,??_modbus_refresh+1
  4443                           
  4444                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4445                           ; Switch size 1, requested type "speed"
  4446                           ; Number of cases is 1, Range of values is 0 to 0
  4447                           ; switch strategies available:
  4448                           ; Name         Instructions Cycles
  4449                           ; simple_byte            4     3 (average)
  4450                           ;	Chosen strategy is simple_byte
  4451  000F9A  5015               	movf	??_modbus_refresh+1,w,c
  4452  000F9C  E112               	bnz	l224
  4453                           
  4454                           ; Switch size 1, requested type "speed"
  4455                           ; Number of cases is 9, Range of values is 0 to 35
  4456                           ; switch strategies available:
  4457                           ; Name         Instructions Cycles
  4458                           ; simple_byte           28    15 (average)
  4459                           ;	Chosen strategy is simple_byte
  4460  000F9E  5014               	movf	??_modbus_refresh,w,c
  4461  000FA0  E0A1               	bz	l226
  4462  000FA2  0A02               	xorlw	2	; case 2
  4463  000FA4  E0A4               	bz	l228
  4464  000FA6  0A04               	xorlw	4	; case 6
  4465  000FA8  E0B2               	bz	l229
  4466  000FAA  0A16               	xorlw	22	; case 16
  4467  000FAC  E0C0               	bz	l230
  4468  000FAE  0A03               	xorlw	3	; case 19
  4469  000FB0  E0C4               	bz	l2200
  4470  000FB2  0A0D               	xorlw	13	; case 30
  4471  000FB4  E0C6               	bz	l232
  4472  000FB6  0A3E               	xorlw	62	; case 32
  4473  000FB8  E0D2               	bz	l233
  4474  000FBA  0A02               	xorlw	2	; case 34
  4475  000FBC  E0D5               	bz	l234
  4476  000FBE  0A01               	xorlw	1	; case 35
  4477  000FC0  E0D8               	bz	l235
  4478  000FC2                     l224:
  4479                           
  4480                           ;Turn_counter.c: 283: }
  4481                           ;Turn_counter.c: 284: LATCbits.LATC4 = 1;
  4482  000FC2  888B               	bsf	3979,4,c	;volatile
  4483                           
  4484                           ;Turn_counter.c: 285: LATCbits.LATC5 = 1;
  4485  000FC4  8A8B               	bsf	3979,5,c	;volatile
  4486                           
  4487                           ;Turn_counter.c: 286: led_cnt = 0;
  4488  000FC6  0100               	movlb	0	; () banked
  4489  000FC8  6BBE               	clrf	(_led_cnt+1)& (0+255),b
  4490  000FCA  6BBD               	clrf	_led_cnt& (0+255),b
  4491                           
  4492                           ; BSR set to: 0
  4493  000FCC  0C00               	retlw	0	;funcret
  4494  000FCE                     __end_of_modbus_refresh:
  4495                           	opt stack 0
  4496                           tblptru	equ	0xFF8
  4497                           tblptrh	equ	0xFF7
  4498                           tblptrl	equ	0xFF6
  4499                           tablat	equ	0xFF5
  4500                           prodh	equ	0xFF4
  4501                           prodl	equ	0xFF3
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           indf1	equ	0xFE7
  4505                           postinc1	equ	0xFE6
  4506                           postdec1	equ	0xFE5
  4507                           fsr1h	equ	0xFE2
  4508                           fsr1l	equ	0xFE1
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function _EEPROM_WrByte *****************
  4517 ;; Defined at:
  4518 ;;		line 73 in file "Turn_counter.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  bAdd            1    wreg     unsigned char 
  4521 ;;  bData           1   16[COMRAM] unsigned char 
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  bAdd            1   17[COMRAM] unsigned char 
  4524 ;;  GIEBitsVal      1   18[COMRAM] unsigned char 
  4525 ;; Return value:  Size  Location     Type
  4526 ;;                  1    wreg      void 
  4527 ;; Registers used:
  4528 ;;		wreg, status,2
  4529 ;; Tracked objects:
  4530 ;;		On entry : 0/0
  4531 ;;		On exit  : 0/0
  4532 ;;		Unchanged: 0/0
  4533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4534 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4535 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4536 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4537 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4538 ;;Total ram usage:        3 bytes
  4539 ;; Hardware stack levels used:    1
  4540 ;; Hardware stack levels required when called:    1
  4541 ;; This function calls:
  4542 ;;		Nothing
  4543 ;; This function is called by:
  4544 ;;		_modbus_refresh
  4545 ;;		_modbus_poll
  4546 ;;		_main
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text11
  4551  001906                     __ptext11:
  4552                           	opt stack 0
  4553  001906                     _EEPROM_WrByte:
  4554                           	opt stack 27
  4555                           
  4556                           ; BSR set to: 0
  4557                           ;incstack = 0
  4558                           ;EEPROM_WrByte@bAdd stored from wreg
  4559  001906  6E12               	movwf	EEPROM_WrByte@bAdd,c
  4560                           
  4561                           ;Turn_counter.c: 75: unsigned char GIEBitsVal = 0;
  4562  001908  6A13               	clrf	EEPROM_WrByte@GIEBitsVal,c
  4563                           
  4564                           ;Turn_counter.c: 77: EEADR = bAdd & 0xff;
  4565  00190A  C012  FF74         	movff	EEPROM_WrByte@bAdd,3956	;volatile
  4566                           
  4567                           ;Turn_counter.c: 78: EEDATA = bData;
  4568  00190E  C011  FF73         	movff	EEPROM_WrByte@bData,3955	;volatile
  4569                           
  4570                           ;Turn_counter.c: 79: EECON1bits.EEPGD = 0;
  4571  001912  9E7F               	bcf	3967,7,c	;volatile
  4572                           
  4573                           ;Turn_counter.c: 80: EECON1bits.CFGS = 0;
  4574  001914  9C7F               	bcf	3967,6,c	;volatile
  4575                           
  4576                           ;Turn_counter.c: 81: EECON1bits.WREN = 1;
  4577  001916  847F               	bsf	3967,2,c	;volatile
  4578                           
  4579                           ;Turn_counter.c: 83: GIEBitsVal = INTCONbits.GIE;
  4580  001918  0E00               	movlw	0
  4581  00191A  BEF2               	btfsc	intcon,7,c	;volatile
  4582  00191C  0E01               	movlw	1
  4583  00191E  6E13               	movwf	EEPROM_WrByte@GIEBitsVal,c
  4584                           
  4585                           ;Turn_counter.c: 84: INTCONbits.GIE = 0;
  4586  001920  9EF2               	bcf	intcon,7,c	;volatile
  4587                           
  4588                           ;Turn_counter.c: 85: EECON2 = 0x55;
  4589  001922  0E55               	movlw	85
  4590  001924  6E7E               	movwf	3966,c	;volatile
  4591                           
  4592                           ;Turn_counter.c: 86: EECON2 = 0xAA;
  4593  001926  0EAA               	movlw	170
  4594  001928  6E7E               	movwf	3966,c	;volatile
  4595                           
  4596                           ;Turn_counter.c: 87: EECON1bits.WR = 1;
  4597  00192A  827F               	bsf	3967,1,c	;volatile
  4598  00192C                     l153:
  4599  00192C  B27F               	btfsc	3967,1,c	;volatile
  4600  00192E  D7FE               	goto	l153
  4601                           
  4602                           ;Turn_counter.c: 89: EECON1bits.WREN = 0;
  4603  001930  947F               	bcf	3967,2,c	;volatile
  4604                           
  4605                           ;Turn_counter.c: 90: INTCONbits.GIE = 1;
  4606  001932  8EF2               	bsf	intcon,7,c	;volatile
  4607                           
  4608                           ;Turn_counter.c: 91: INTCONbits.GIE = GIEBitsVal;
  4609  001934  B013               	btfsc	EEPROM_WrByte@GIEBitsVal,0,c
  4610  001936  D002               	bra	u1015
  4611  001938  9EF2               	bcf	intcon,7,c	;volatile
  4612  00193A  D001               	bra	u1016
  4613  00193C                     u1015:
  4614  00193C  8EF2               	bsf	intcon,7,c	;volatile
  4615  00193E                     u1016:
  4616  00193E  0012               	return		;funcret
  4617  001940                     __end_of_EEPROM_WrByte:
  4618                           	opt stack 0
  4619                           tblptru	equ	0xFF8
  4620                           tblptrh	equ	0xFF7
  4621                           tblptrl	equ	0xFF6
  4622                           tablat	equ	0xFF5
  4623                           prodh	equ	0xFF4
  4624                           prodl	equ	0xFF3
  4625                           intcon	equ	0xFF2
  4626                           postinc0	equ	0xFEE
  4627                           wreg	equ	0xFE8
  4628                           indf1	equ	0xFE7
  4629                           postinc1	equ	0xFE6
  4630                           postdec1	equ	0xFE5
  4631                           fsr1h	equ	0xFE2
  4632                           fsr1l	equ	0xFE1
  4633                           indf2	equ	0xFDF
  4634                           postinc2	equ	0xFDE
  4635                           postdec2	equ	0xFDD
  4636                           fsr2h	equ	0xFDA
  4637                           fsr2l	equ	0xFD9
  4638                           status	equ	0xFD8
  4639                           
  4640 ;; *************** function ___lwtoft *****************
  4641 ;; Defined at:
  4642 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwtoft.c"
  4643 ;; Parameters:    Size  Location     Type
  4644 ;;  c               2   24[COMRAM] unsigned int 
  4645 ;; Auto vars:     Size  Location     Type
  4646 ;;		None
  4647 ;; Return value:  Size  Location     Type
  4648 ;;                  3   24[COMRAM] float 
  4649 ;; Registers used:
  4650 ;;		wreg, status,2, status,0, cstack
  4651 ;; Tracked objects:
  4652 ;;		On entry : 0/0
  4653 ;;		On exit  : 0/0
  4654 ;;		Unchanged: 0/0
  4655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4656 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4659 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4660 ;;Total ram usage:        3 bytes
  4661 ;; Hardware stack levels used:    1
  4662 ;; Hardware stack levels required when called:    2
  4663 ;; This function calls:
  4664 ;;		___ftpack
  4665 ;; This function is called by:
  4666 ;;		_main
  4667 ;; This function uses a non-reentrant model
  4668 ;;
  4669                           
  4670                           	psect	text12
  4671  001A04                     __ptext12:
  4672                           	opt stack 0
  4673  001A04                     ___lwtoft:
  4674                           	opt stack 28
  4675                           
  4676                           ;incstack = 0
  4677  001A04  C019  F011         	movff	___lwtoft@c,___ftpack@arg
  4678  001A08  C01A  F012         	movff	___lwtoft@c+1,___ftpack@arg+1
  4679  001A0C  6A13               	clrf	___ftpack@arg+2,c
  4680  001A0E  0E8E               	movlw	142
  4681  001A10  6E14               	movwf	___ftpack@exp,c
  4682  001A12  0E00               	movlw	0
  4683  001A14  6E15               	movwf	___ftpack@sign,c
  4684  001A16  EC0C  F00B         	call	___ftpack	;wreg free
  4685  001A1A  C011  F019         	movff	?___ftpack,?___lwtoft
  4686  001A1E  C012  F01A         	movff	?___ftpack+1,?___lwtoft+1
  4687  001A22  C013  F01B         	movff	?___ftpack+2,?___lwtoft+2
  4688  001A26  0012               	return	
  4689  001A28                     __end_of___lwtoft:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           indf1	equ	0xFE7
  4701                           postinc1	equ	0xFE6
  4702                           postdec1	equ	0xFE5
  4703                           fsr1h	equ	0xFE2
  4704                           fsr1l	equ	0xFE1
  4705                           indf2	equ	0xFDF
  4706                           postinc2	equ	0xFDE
  4707                           postdec2	equ	0xFDD
  4708                           fsr2h	equ	0xFDA
  4709                           fsr2l	equ	0xFD9
  4710                           status	equ	0xFD8
  4711                           
  4712 ;; *************** function ___lwdiv *****************
  4713 ;; Defined at:
  4714 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lwdiv.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  dividend        2   16[COMRAM] unsigned int 
  4717 ;;  divisor         2   18[COMRAM] unsigned int 
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;  quotient        2   20[COMRAM] unsigned int 
  4720 ;;  counter         1   22[COMRAM] unsigned char 
  4721 ;; Return value:  Size  Location     Type
  4722 ;;                  2   16[COMRAM] unsigned int 
  4723 ;; Registers used:
  4724 ;;		wreg, status,2, status,0
  4725 ;; Tracked objects:
  4726 ;;		On entry : 0/0
  4727 ;;		On exit  : 0/0
  4728 ;;		Unchanged: 0/0
  4729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4730 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4731 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4733 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4734 ;;Total ram usage:        7 bytes
  4735 ;; Hardware stack levels used:    1
  4736 ;; Hardware stack levels required when called:    1
  4737 ;; This function calls:
  4738 ;;		Nothing
  4739 ;; This function is called by:
  4740 ;;		_main
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text13
  4745  001878                     __ptext13:
  4746                           	opt stack 0
  4747  001878                     ___lwdiv:
  4748                           	opt stack 29
  4749                           
  4750                           ;incstack = 0
  4751  001878  6A16               	clrf	___lwdiv@quotient+1,c
  4752  00187A  6A15               	clrf	___lwdiv@quotient,c
  4753  00187C  5013               	movf	___lwdiv@divisor,w,c
  4754  00187E  1014               	iorwf	___lwdiv@divisor+1,w,c
  4755  001880  E01B               	bz	l799
  4756  001882  0E01               	movlw	1
  4757  001884  6E17               	movwf	___lwdiv@counter,c
  4758  001886  D004               	goto	l2794
  4759  001888                     l2792:
  4760  001888  90D8               	bcf	status,0,c
  4761  00188A  3613               	rlcf	___lwdiv@divisor,f,c
  4762  00188C  3614               	rlcf	___lwdiv@divisor+1,f,c
  4763  00188E  2A17               	incf	___lwdiv@counter,f,c
  4764  001890                     l2794:
  4765  001890  AE14               	btfss	___lwdiv@divisor+1,7,c
  4766  001892  D7FA               	goto	l2792
  4767  001894                     l2796:
  4768  001894  90D8               	bcf	status,0,c
  4769  001896  3615               	rlcf	___lwdiv@quotient,f,c
  4770  001898  3616               	rlcf	___lwdiv@quotient+1,f,c
  4771  00189A  5013               	movf	___lwdiv@divisor,w,c
  4772  00189C  5C11               	subwf	___lwdiv@dividend,w,c
  4773  00189E  5014               	movf	___lwdiv@divisor+1,w,c
  4774  0018A0  5812               	subwfb	___lwdiv@dividend+1,w,c
  4775  0018A2  E305               	bnc	l2804
  4776  0018A4  5013               	movf	___lwdiv@divisor,w,c
  4777  0018A6  5E11               	subwf	___lwdiv@dividend,f,c
  4778  0018A8  5014               	movf	___lwdiv@divisor+1,w,c
  4779  0018AA  5A12               	subwfb	___lwdiv@dividend+1,f,c
  4780  0018AC  8015               	bsf	___lwdiv@quotient,0,c
  4781  0018AE                     l2804:
  4782  0018AE  90D8               	bcf	status,0,c
  4783  0018B0  3214               	rrcf	___lwdiv@divisor+1,f,c
  4784  0018B2  3213               	rrcf	___lwdiv@divisor,f,c
  4785  0018B4  2E17               	decfsz	___lwdiv@counter,f,c
  4786  0018B6  D7EE               	goto	l2796
  4787  0018B8                     l799:
  4788  0018B8  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  4789  0018BC  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  4790  0018C0  0012               	return		;funcret
  4791  0018C2                     __end_of___lwdiv:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           indf1	equ	0xFE7
  4803                           postinc1	equ	0xFE6
  4804                           postdec1	equ	0xFE5
  4805                           fsr1h	equ	0xFE2
  4806                           fsr1l	equ	0xFE1
  4807                           indf2	equ	0xFDF
  4808                           postinc2	equ	0xFDE
  4809                           postdec2	equ	0xFDD
  4810                           fsr2h	equ	0xFDA
  4811                           fsr2l	equ	0xFD9
  4812                           status	equ	0xFD8
  4813                           
  4814 ;; *************** function ___lldiv *****************
  4815 ;; Defined at:
  4816 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\lldiv.c"
  4817 ;; Parameters:    Size  Location     Type
  4818 ;;  dividend        4   16[COMRAM] unsigned long 
  4819 ;;  divisor         4   20[COMRAM] unsigned long 
  4820 ;; Auto vars:     Size  Location     Type
  4821 ;;  quotient        4   24[COMRAM] unsigned long 
  4822 ;;  counter         1   28[COMRAM] unsigned char 
  4823 ;; Return value:  Size  Location     Type
  4824 ;;                  4   16[COMRAM] unsigned long 
  4825 ;; Registers used:
  4826 ;;		wreg, status,2, status,0
  4827 ;; Tracked objects:
  4828 ;;		On entry : 0/0
  4829 ;;		On exit  : 0/0
  4830 ;;		Unchanged: 0/0
  4831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4832 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4833 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4835 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4836 ;;Total ram usage:       13 bytes
  4837 ;; Hardware stack levels used:    1
  4838 ;; Hardware stack levels required when called:    1
  4839 ;; This function calls:
  4840 ;;		Nothing
  4841 ;; This function is called by:
  4842 ;;		_main
  4843 ;; This function uses a non-reentrant model
  4844 ;;
  4845                           
  4846                           	psect	text14
  4847  0017A4                     __ptext14:
  4848                           	opt stack 0
  4849  0017A4                     ___lldiv:
  4850                           	opt stack 29
  4851                           
  4852                           ;incstack = 0
  4853  0017A4  6A19               	clrf	___lldiv@quotient,c
  4854  0017A6  6A1A               	clrf	___lldiv@quotient+1,c
  4855  0017A8  6A1B               	clrf	___lldiv@quotient+2,c
  4856  0017AA  6A1C               	clrf	___lldiv@quotient+3,c
  4857  0017AC  5015               	movf	___lldiv@divisor,w,c
  4858  0017AE  1016               	iorwf	___lldiv@divisor+1,w,c
  4859  0017B0  1017               	iorwf	___lldiv@divisor+2,w,c
  4860  0017B2  1018               	iorwf	___lldiv@divisor+3,w,c
  4861  0017B4  E029               	bz	l746
  4862  0017B6  0E01               	movlw	1
  4863  0017B8  6E1D               	movwf	___lldiv@counter,c
  4864  0017BA  D006               	goto	l2772
  4865  0017BC                     l2770:
  4866  0017BC  90D8               	bcf	status,0,c
  4867  0017BE  3615               	rlcf	___lldiv@divisor,f,c
  4868  0017C0  3616               	rlcf	___lldiv@divisor+1,f,c
  4869  0017C2  3617               	rlcf	___lldiv@divisor+2,f,c
  4870  0017C4  3618               	rlcf	___lldiv@divisor+3,f,c
  4871  0017C6  2A1D               	incf	___lldiv@counter,f,c
  4872  0017C8                     l2772:
  4873  0017C8  AE18               	btfss	___lldiv@divisor+3,7,c
  4874  0017CA  D7F8               	goto	l2770
  4875  0017CC                     l2774:
  4876  0017CC  90D8               	bcf	status,0,c
  4877  0017CE  3619               	rlcf	___lldiv@quotient,f,c
  4878  0017D0  361A               	rlcf	___lldiv@quotient+1,f,c
  4879  0017D2  361B               	rlcf	___lldiv@quotient+2,f,c
  4880  0017D4  361C               	rlcf	___lldiv@quotient+3,f,c
  4881  0017D6  5015               	movf	___lldiv@divisor,w,c
  4882  0017D8  5C11               	subwf	___lldiv@dividend,w,c
  4883  0017DA  5016               	movf	___lldiv@divisor+1,w,c
  4884  0017DC  5812               	subwfb	___lldiv@dividend+1,w,c
  4885  0017DE  5017               	movf	___lldiv@divisor+2,w,c
  4886  0017E0  5813               	subwfb	___lldiv@dividend+2,w,c
  4887  0017E2  5018               	movf	___lldiv@divisor+3,w,c
  4888  0017E4  5814               	subwfb	___lldiv@dividend+3,w,c
  4889  0017E6  E309               	bnc	l2782
  4890  0017E8  5015               	movf	___lldiv@divisor,w,c
  4891  0017EA  5E11               	subwf	___lldiv@dividend,f,c
  4892  0017EC  5016               	movf	___lldiv@divisor+1,w,c
  4893  0017EE  5A12               	subwfb	___lldiv@dividend+1,f,c
  4894  0017F0  5017               	movf	___lldiv@divisor+2,w,c
  4895  0017F2  5A13               	subwfb	___lldiv@dividend+2,f,c
  4896  0017F4  5018               	movf	___lldiv@divisor+3,w,c
  4897  0017F6  5A14               	subwfb	___lldiv@dividend+3,f,c
  4898  0017F8  8019               	bsf	___lldiv@quotient,0,c
  4899  0017FA                     l2782:
  4900  0017FA  90D8               	bcf	status,0,c
  4901  0017FC  3218               	rrcf	___lldiv@divisor+3,f,c
  4902  0017FE  3217               	rrcf	___lldiv@divisor+2,f,c
  4903  001800  3216               	rrcf	___lldiv@divisor+1,f,c
  4904  001802  3215               	rrcf	___lldiv@divisor,f,c
  4905  001804  2E1D               	decfsz	___lldiv@counter,f,c
  4906  001806  D7E2               	goto	l2774
  4907  001808                     l746:
  4908  001808  C019  F011         	movff	___lldiv@quotient,?___lldiv
  4909  00180C  C01A  F012         	movff	___lldiv@quotient+1,?___lldiv+1
  4910  001810  C01B  F013         	movff	___lldiv@quotient+2,?___lldiv+2
  4911  001814  C01C  F014         	movff	___lldiv@quotient+3,?___lldiv+3
  4912  001818  0012               	return		;funcret
  4913  00181A                     __end_of___lldiv:
  4914                           	opt stack 0
  4915                           tblptru	equ	0xFF8
  4916                           tblptrh	equ	0xFF7
  4917                           tblptrl	equ	0xFF6
  4918                           tablat	equ	0xFF5
  4919                           prodh	equ	0xFF4
  4920                           prodl	equ	0xFF3
  4921                           intcon	equ	0xFF2
  4922                           postinc0	equ	0xFEE
  4923                           wreg	equ	0xFE8
  4924                           indf1	equ	0xFE7
  4925                           postinc1	equ	0xFE6
  4926                           postdec1	equ	0xFE5
  4927                           fsr1h	equ	0xFE2
  4928                           fsr1l	equ	0xFE1
  4929                           indf2	equ	0xFDF
  4930                           postinc2	equ	0xFDE
  4931                           postdec2	equ	0xFDD
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936 ;; *************** function ___fttol *****************
  4937 ;; Defined at:
  4938 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\fttol.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  f1              3   50[COMRAM] float 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  lval            4   12[BANK0 ] unsigned long 
  4943 ;;  exp1            1   16[BANK0 ] unsigned char 
  4944 ;;  sign1           1   11[BANK0 ] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;                  4   50[COMRAM] long 
  4947 ;; Registers used:
  4948 ;;		wreg, status,2, status,0
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4954 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4955 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4956 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4957 ;;      Totals:         4      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4958 ;;Total ram usage:       15 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    1
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_main
  4965 ;; This function uses a non-reentrant model
  4966 ;;
  4967                           
  4968                           	psect	text15
  4969  00123C                     __ptext15:
  4970                           	opt stack 0
  4971  00123C                     ___fttol:
  4972                           	opt stack 29
  4973                           
  4974                           ;incstack = 0
  4975  00123C  C035  F0A4         	movff	___fttol@f1+2,??___fttol
  4976  001240  0100               	movlb	0	; () banked
  4977  001242  6BA5               	clrf	(??___fttol+1)& (0+255),b
  4978  001244  6BA6               	clrf	(??___fttol+2)& (0+255),b
  4979  001246  3434               	rlcf	___fttol@f1+1,w,c
  4980  001248  37A4               	rlcf	??___fttol& (0+255),f,b
  4981  00124A  E301               	bnc	u2141
  4982  00124C  81A5               	bsf	(??___fttol+1)& (0+255),0,b
  4983  00124E                     u2141:
  4984  00124E  0100               	movlb	0	; () banked
  4985  001250  51A4               	movf	??___fttol& (0+255),w,b
  4986  001252  6FAE               	movwf	___fttol@exp1& (0+255),b
  4987  001254  51AE               	movf	___fttol@exp1& (0+255),w,b
  4988  001256  E105               	bnz	l3228
  4989                           
  4990                           ; BSR set to: 0
  4991  001258  6A33               	clrf	?___fttol,c
  4992  00125A  6A34               	clrf	?___fttol+1,c
  4993  00125C  6A35               	clrf	?___fttol+2,c
  4994  00125E  6A36               	clrf	?___fttol+3,c
  4995                           
  4996                           ; BSR set to: 0
  4997  001260  0C00               	retlw	0
  4998  001262                     l3228:
  4999                           
  5000                           ; BSR set to: 0
  5001  001262  0E17               	movlw	23
  5002  001264  0100               	movlb	0	; () banked
  5003  001266  6FA4               	movwf	??___fttol& (0+255),b
  5004  001268  C033  F0A5         	movff	___fttol@f1,??___fttol+1
  5005  00126C  C034  F0A6         	movff	___fttol@f1+1,??___fttol+2
  5006  001270  C035  F0A7         	movff	___fttol@f1+2,??___fttol+3
  5007  001274  29A4               	incf	??___fttol& (0+255),w,b
  5008  001276  6FA8               	movwf	(??___fttol+4)& (0+255),b
  5009  001278  D005               	goto	u2160
  5010  00127A                     u2165:
  5011  00127A  0100               	movlb	0	; () banked
  5012  00127C  90D8               	bcf	status,0,c
  5013  00127E  33A7               	rrcf	(??___fttol+3)& (0+255),f,b
  5014  001280  33A6               	rrcf	(??___fttol+2)& (0+255),f,b
  5015  001282  33A5               	rrcf	(??___fttol+1)& (0+255),f,b
  5016  001284                     u2160:
  5017  001284  0100               	movlb	0	; () banked
  5018  001286  2FA8               	decfsz	(??___fttol+4)& (0+255),f,b
  5019  001288  D7F8               	goto	u2165
  5020  00128A  51A5               	movf	(??___fttol+1)& (0+255),w,b
  5021  00128C  6FA9               	movwf	___fttol@sign1& (0+255),b
  5022                           
  5023                           ; BSR set to: 0
  5024  00128E  8E34               	bsf	___fttol@f1+1,7,c
  5025                           
  5026                           ; BSR set to: 0
  5027  001290  6A35               	clrf	___fttol@f1+2,c
  5028                           
  5029                           ; BSR set to: 0
  5030  001292  5033               	movf	___fttol@f1,w,c
  5031  001294  6FAA               	movwf	___fttol@lval& (0+255),b
  5032  001296  5034               	movf	___fttol@f1+1,w,c
  5033  001298  6FAB               	movwf	(___fttol@lval+1)& (0+255),b
  5034  00129A  5035               	movf	___fttol@f1+2,w,c
  5035  00129C  6FAC               	movwf	(___fttol@lval+2)& (0+255),b
  5036  00129E  6BAD               	clrf	(___fttol@lval+3)& (0+255),b
  5037                           
  5038                           ; BSR set to: 0
  5039  0012A0  0E8E               	movlw	142
  5040  0012A2  5FAE               	subwf	___fttol@exp1& (0+255),f,b
  5041                           
  5042                           ; BSR set to: 0
  5043  0012A4  AFAE               	btfss	___fttol@exp1& (0+255),7,b
  5044  0012A6  D012               	goto	l3250
  5045                           
  5046                           ; BSR set to: 0
  5047  0012A8  51AE               	movf	___fttol@exp1& (0+255),w,b
  5048  0012AA  0A80               	xorlw	128
  5049  0012AC  0F8F               	addlw	143
  5050  0012AE  E205               	bc	l3246
  5051                           
  5052                           ; BSR set to: 0
  5053  0012B0  6A33               	clrf	?___fttol,c
  5054  0012B2  6A34               	clrf	?___fttol+1,c
  5055  0012B4  6A35               	clrf	?___fttol+2,c
  5056  0012B6  6A36               	clrf	?___fttol+3,c
  5057                           
  5058                           ; BSR set to: 0
  5059  0012B8  0C00               	retlw	0
  5060  0012BA                     l3246:
  5061                           
  5062                           ; BSR set to: 0
  5063  0012BA  0100               	movlb	0	; () banked
  5064  0012BC  90D8               	bcf	status,0,c
  5065  0012BE  33AD               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5066  0012C0  33AC               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5067  0012C2  33AB               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5068  0012C4  33AA               	rrcf	___fttol@lval& (0+255),f,b
  5069                           
  5070                           ; BSR set to: 0
  5071  0012C6  3FAE               	incfsz	___fttol@exp1& (0+255),f,b
  5072  0012C8  D7F8               	goto	l3246
  5073                           
  5074                           ; BSR set to: 0
  5075  0012CA  D014               	goto	l3260
  5076  0012CC                     l3250:
  5077                           
  5078                           ; BSR set to: 0
  5079  0012CC  0E17               	movlw	23
  5080  0012CE  0100               	movlb	0	; () banked
  5081  0012D0  65AE               	cpfsgt	___fttol@exp1& (0+255),b
  5082  0012D2  D00C               	goto	l3258
  5083                           
  5084                           ; BSR set to: 0
  5085  0012D4  6A33               	clrf	?___fttol,c
  5086  0012D6  6A34               	clrf	?___fttol+1,c
  5087  0012D8  6A35               	clrf	?___fttol+2,c
  5088  0012DA  6A36               	clrf	?___fttol+3,c
  5089                           
  5090                           ; BSR set to: 0
  5091  0012DC  0C00               	retlw	0
  5092  0012DE                     l3256:
  5093                           
  5094                           ; BSR set to: 0
  5095  0012DE  0100               	movlb	0	; () banked
  5096  0012E0  90D8               	bcf	status,0,c
  5097  0012E2  37AA               	rlcf	___fttol@lval& (0+255),f,b
  5098  0012E4  37AB               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5099  0012E6  37AC               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5100  0012E8  37AD               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5101  0012EA  07AE               	decf	___fttol@exp1& (0+255),f,b
  5102  0012EC                     l3258:
  5103                           
  5104                           ; BSR set to: 0
  5105  0012EC  0100               	movlb	0	; () banked
  5106  0012EE  51AE               	movf	___fttol@exp1& (0+255),w,b
  5107  0012F0  E001               	bz	l3260
  5108  0012F2  D7F5               	goto	l3256
  5109  0012F4                     l3260:
  5110                           
  5111                           ; BSR set to: 0
  5112  0012F4  0100               	movlb	0	; () banked
  5113  0012F6  51A9               	movf	___fttol@sign1& (0+255),w,b
  5114  0012F8  E008               	bz	l3264
  5115                           
  5116                           ; BSR set to: 0
  5117  0012FA  1FAD               	comf	(___fttol@lval+3)& (0+255),f,b
  5118  0012FC  1FAC               	comf	(___fttol@lval+2)& (0+255),f,b
  5119  0012FE  1FAB               	comf	(___fttol@lval+1)& (0+255),f,b
  5120  001300  6DAA               	negf	___fttol@lval& (0+255),b
  5121  001302  0E00               	movlw	0
  5122  001304  23AB               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5123  001306  23AC               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5124  001308  23AD               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5125  00130A                     l3264:
  5126                           
  5127                           ; BSR set to: 0
  5128  00130A  C0AA  F033         	movff	___fttol@lval,?___fttol
  5129  00130E  C0AB  F034         	movff	___fttol@lval+1,?___fttol+1
  5130  001312  C0AC  F035         	movff	___fttol@lval+2,?___fttol+2
  5131  001316  C0AD  F036         	movff	___fttol@lval+3,?___fttol+3
  5132  00131A  0012               	return	
  5133  00131C                     __end_of___fttol:
  5134                           	opt stack 0
  5135                           tblptru	equ	0xFF8
  5136                           tblptrh	equ	0xFF7
  5137                           tblptrl	equ	0xFF6
  5138                           tablat	equ	0xFF5
  5139                           prodh	equ	0xFF4
  5140                           prodl	equ	0xFF3
  5141                           intcon	equ	0xFF2
  5142                           postinc0	equ	0xFEE
  5143                           wreg	equ	0xFE8
  5144                           indf1	equ	0xFE7
  5145                           postinc1	equ	0xFE6
  5146                           postdec1	equ	0xFE5
  5147                           fsr1h	equ	0xFE2
  5148                           fsr1l	equ	0xFE1
  5149                           indf2	equ	0xFDF
  5150                           postinc2	equ	0xFDE
  5151                           postdec2	equ	0xFDD
  5152                           fsr2h	equ	0xFDA
  5153                           fsr2l	equ	0xFD9
  5154                           status	equ	0xFD8
  5155                           
  5156 ;; *************** function ___ftmul *****************
  5157 ;; Defined at:
  5158 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftmul.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  f1              3   27[COMRAM] float 
  5161 ;;  f2              3   30[COMRAM] float 
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;  f3_as_produc    3   38[COMRAM] unsigned um
  5164 ;;  sign            1   37[COMRAM] unsigned char 
  5165 ;;  exp             1   36[COMRAM] unsigned char 
  5166 ;;  cntr            1    0        unsigned char 
  5167 ;; Return value:  Size  Location     Type
  5168 ;;                  3   27[COMRAM] float 
  5169 ;; Registers used:
  5170 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5171 ;; Tracked objects:
  5172 ;;		On entry : 0/0
  5173 ;;		On exit  : 0/0
  5174 ;;		Unchanged: 0/0
  5175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5176 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5177 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5178 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5179 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5180 ;;Total ram usage:       14 bytes
  5181 ;; Hardware stack levels used:    1
  5182 ;; Hardware stack levels required when called:    2
  5183 ;; This function calls:
  5184 ;;		___ftpack
  5185 ;; This function is called by:
  5186 ;;		_main
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text16
  5191  00131C                     __ptext16:
  5192                           	opt stack 0
  5193  00131C                     ___ftmul:
  5194                           	opt stack 28
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;incstack = 0
  5198  00131C  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  5199  001320  6A23               	clrf	(??___ftmul+1)& (0+255),c
  5200  001322  6A24               	clrf	(??___ftmul+2)& (0+255),c
  5201  001324  341D               	rlcf	___ftmul@f1+1,w,c
  5202  001326  3622               	rlcf	??___ftmul& (0+255),f,c
  5203  001328  E301               	bnc	u2091
  5204  00132A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5205  00132C                     u2091:
  5206  00132C  5022               	movf	??___ftmul,w,c
  5207  00132E  6E25               	movwf	___ftmul@exp,c
  5208  001330  5025               	movf	___ftmul@exp,w,c
  5209  001332  E104               	bnz	l3186
  5210  001334  6A1C               	clrf	?___ftmul,c
  5211  001336  6A1D               	clrf	?___ftmul+1,c
  5212  001338  6A1E               	clrf	?___ftmul+2,c
  5213  00133A  0C00               	retlw	0
  5214  00133C                     l3186:
  5215  00133C  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  5216  001340  6A23               	clrf	(??___ftmul+1)& (0+255),c
  5217  001342  6A24               	clrf	(??___ftmul+2)& (0+255),c
  5218  001344  3420               	rlcf	___ftmul@f2+1,w,c
  5219  001346  3622               	rlcf	??___ftmul& (0+255),f,c
  5220  001348  E301               	bnc	u2111
  5221  00134A  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  5222  00134C                     u2111:
  5223  00134C  5022               	movf	??___ftmul,w,c
  5224  00134E  6E26               	movwf	___ftmul@sign,c
  5225  001350  5026               	movf	___ftmul@sign,w,c
  5226  001352  E104               	bnz	l3192
  5227  001354  6A1C               	clrf	?___ftmul,c
  5228  001356  6A1D               	clrf	?___ftmul+1,c
  5229  001358  6A1E               	clrf	?___ftmul+2,c
  5230  00135A  0C00               	retlw	0
  5231  00135C                     l3192:
  5232  00135C  5026               	movf	___ftmul@sign,w,c
  5233  00135E  0F7B               	addlw	123
  5234  001360  2625               	addwf	___ftmul@exp,f,c
  5235  001362  C01E  F026         	movff	___ftmul@f1+2,___ftmul@sign
  5236  001366  5021               	movf	___ftmul@f2+2,w,c
  5237  001368  1A26               	xorwf	___ftmul@sign,f,c
  5238  00136A  0E80               	movlw	128
  5239  00136C  1626               	andwf	___ftmul@sign,f,c
  5240  00136E  8E1D               	bsf	___ftmul@f1+1,7,c
  5241  001370  8E20               	bsf	___ftmul@f2+1,7,c
  5242  001372  6A21               	clrf	___ftmul@f2+2,c
  5243  001374  6A27               	clrf	___ftmul@f3_as_product,c
  5244  001376  6A28               	clrf	___ftmul@f3_as_product+1,c
  5245  001378  6A29               	clrf	___ftmul@f3_as_product+2,c
  5246  00137A  6A1E               	clrf	___ftmul@f1+2,c
  5247  00137C  501C               	movf	___ftmul@f1,w,c
  5248  00137E  021F               	mulwf	___ftmul@f2,c
  5249  001380  CFF4 FFF3          	movff	prodh,prodl
  5250  001384  6AF4               	clrf	prodh,c
  5251  001386  CFF3 F027          	movff	prodl,___ftmul@f3_as_product
  5252  00138A  CFF4 F028          	movff	prodh,___ftmul@f3_as_product+1
  5253  00138E  6A29               	clrf	___ftmul@f3_as_product+2,c
  5254  001390  501C               	movf	___ftmul@f1,w,c
  5255  001392  0220               	mulwf	___ftmul@f2+1,c
  5256  001394  50F3               	movf	prodl,w,c
  5257  001396  2627               	addwf	___ftmul@f3_as_product,f,c
  5258  001398  50F4               	movf	prodh,w,c
  5259  00139A  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5260  00139C  0E00               	movlw	0
  5261  00139E  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5262  0013A0  501D               	movf	___ftmul@f1+1,w,c
  5263  0013A2  021F               	mulwf	___ftmul@f2,c
  5264  0013A4  50F3               	movf	prodl,w,c
  5265  0013A6  2627               	addwf	___ftmul@f3_as_product,f,c
  5266  0013A8  50F4               	movf	prodh,w,c
  5267  0013AA  2228               	addwfc	___ftmul@f3_as_product+1,f,c
  5268  0013AC  0E00               	movlw	0
  5269  0013AE  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5270  0013B0  501D               	movf	___ftmul@f1+1,w,c
  5271  0013B2  0220               	mulwf	___ftmul@f2+1,c
  5272  0013B4  50F3               	movf	prodl,w,c
  5273  0013B6  2628               	addwf	___ftmul@f3_as_product+1,f,c
  5274  0013B8  50F4               	movf	prodh,w,c
  5275  0013BA  2229               	addwfc	___ftmul@f3_as_product+2,f,c
  5276  0013BC  AE29               	btfss	___ftmul@f3_as_product+2,7,c
  5277  0013BE  D005               	goto	l698
  5278  0013C0  90D8               	bcf	status,0,c
  5279  0013C2  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  5280  0013C4  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  5281  0013C6  3227               	rrcf	___ftmul@f3_as_product,f,c
  5282  0013C8  2A25               	incf	___ftmul@exp,f,c
  5283  0013CA                     l698:
  5284  0013CA  90D8               	bcf	status,0,c
  5285  0013CC  3229               	rrcf	___ftmul@f3_as_product+2,f,c
  5286  0013CE  3228               	rrcf	___ftmul@f3_as_product+1,f,c
  5287  0013D0  3227               	rrcf	___ftmul@f3_as_product,f,c
  5288  0013D2  C027  F011         	movff	___ftmul@f3_as_product,___ftpack@arg
  5289  0013D6  C028  F012         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  5290  0013DA  C029  F013         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  5291  0013DE  C025  F014         	movff	___ftmul@exp,___ftpack@exp
  5292  0013E2  C026  F015         	movff	___ftmul@sign,___ftpack@sign
  5293  0013E6  EC0C  F00B         	call	___ftpack	;wreg free
  5294  0013EA  C011  F01C         	movff	?___ftpack,?___ftmul
  5295  0013EE  C012  F01D         	movff	?___ftpack+1,?___ftmul+1
  5296  0013F2  C013  F01E         	movff	?___ftpack+2,?___ftmul+2
  5297  0013F6  0012               	return	
  5298  0013F8                     __end_of___ftmul:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           postinc0	equ	0xFEE
  5308                           wreg	equ	0xFE8
  5309                           indf1	equ	0xFE7
  5310                           postinc1	equ	0xFE6
  5311                           postdec1	equ	0xFE5
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           indf2	equ	0xFDF
  5315                           postinc2	equ	0xFDE
  5316                           postdec2	equ	0xFDD
  5317                           fsr2h	equ	0xFDA
  5318                           fsr2l	equ	0xFD9
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function ___ftdiv *****************
  5322 ;; Defined at:
  5323 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\ftdiv.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;  f1              3   41[COMRAM] float 
  5326 ;;  f2              3   44[COMRAM] float 
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;  f3              3    1[BANK0 ] float 
  5329 ;;  sign            1    5[BANK0 ] unsigned char 
  5330 ;;  exp             1    4[BANK0 ] unsigned char 
  5331 ;;  cntr            1    0[BANK0 ] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;                  3   41[COMRAM] float 
  5334 ;; Registers used:
  5335 ;;		wreg, status,2, status,0, cstack
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : 0/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5341 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5342 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5343 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5344 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5345 ;;Total ram usage:       15 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:    2
  5348 ;; This function calls:
  5349 ;;		___ftpack
  5350 ;; This function is called by:
  5351 ;;		_main
  5352 ;; This function uses a non-reentrant model
  5353 ;;
  5354                           
  5355                           	psect	text17
  5356  0013F8                     __ptext17:
  5357                           	opt stack 0
  5358  0013F8                     ___ftdiv:
  5359                           	opt stack 28
  5360                           
  5361                           ;incstack = 0
  5362  0013F8  C02C  F030         	movff	___ftdiv@f1+2,??___ftdiv
  5363  0013FC  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  5364  0013FE  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  5365  001400  342B               	rlcf	___ftdiv@f1+1,w,c
  5366  001402  3630               	rlcf	??___ftdiv& (0+255),f,c
  5367  001404  E301               	bnc	u2041
  5368  001406  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  5369  001408                     u2041:
  5370  001408  5030               	movf	??___ftdiv,w,c
  5371  00140A  0100               	movlb	0	; () banked
  5372  00140C  6FA2               	movwf	___ftdiv@exp& (0+255),b
  5373  00140E  51A2               	movf	___ftdiv@exp& (0+255),w,b
  5374  001410  E104               	bnz	l3140
  5375                           
  5376                           ; BSR set to: 0
  5377  001412  6A2A               	clrf	?___ftdiv,c
  5378  001414  6A2B               	clrf	?___ftdiv+1,c
  5379  001416  6A2C               	clrf	?___ftdiv+2,c
  5380                           
  5381                           ; BSR set to: 0
  5382  001418  0C00               	retlw	0
  5383  00141A                     l3140:
  5384                           
  5385                           ; BSR set to: 0
  5386  00141A  C02F  F030         	movff	___ftdiv@f2+2,??___ftdiv
  5387  00141E  6A31               	clrf	(??___ftdiv+1)& (0+255),c
  5388  001420  6A32               	clrf	(??___ftdiv+2)& (0+255),c
  5389  001422  342E               	rlcf	___ftdiv@f2+1,w,c
  5390  001424  3630               	rlcf	??___ftdiv& (0+255),f,c
  5391  001426  E301               	bnc	u2061
  5392  001428  8031               	bsf	(??___ftdiv+1)& (0+255),0,c
  5393  00142A                     u2061:
  5394  00142A  5030               	movf	??___ftdiv,w,c
  5395  00142C  0100               	movlb	0	; () banked
  5396  00142E  6FA3               	movwf	___ftdiv@sign& (0+255),b
  5397  001430  51A3               	movf	___ftdiv@sign& (0+255),w,b
  5398  001432  E104               	bnz	l3146
  5399                           
  5400                           ; BSR set to: 0
  5401  001434  6A2A               	clrf	?___ftdiv,c
  5402  001436  6A2B               	clrf	?___ftdiv+1,c
  5403  001438  6A2C               	clrf	?___ftdiv+2,c
  5404                           
  5405                           ; BSR set to: 0
  5406  00143A  0C00               	retlw	0
  5407  00143C                     l3146:
  5408                           
  5409                           ; BSR set to: 0
  5410  00143C  0100               	movlb	0	; () banked
  5411  00143E  6B9F               	clrf	___ftdiv@f3& (0+255),b
  5412  001440  6BA0               	clrf	(___ftdiv@f3+1)& (0+255),b
  5413  001442  6BA1               	clrf	(___ftdiv@f3+2)& (0+255),b
  5414                           
  5415                           ; BSR set to: 0
  5416  001444  51A3               	movf	___ftdiv@sign& (0+255),w,b
  5417  001446  0F89               	addlw	137
  5418  001448  5FA2               	subwf	___ftdiv@exp& (0+255),f,b
  5419                           
  5420                           ; BSR set to: 0
  5421  00144A  C02C  F0A3         	movff	___ftdiv@f1+2,___ftdiv@sign
  5422                           
  5423                           ; BSR set to: 0
  5424  00144E  502F               	movf	___ftdiv@f2+2,w,c
  5425  001450  1BA3               	xorwf	___ftdiv@sign& (0+255),f,b
  5426                           
  5427                           ; BSR set to: 0
  5428  001452  0E80               	movlw	128
  5429  001454  17A3               	andwf	___ftdiv@sign& (0+255),f,b
  5430                           
  5431                           ; BSR set to: 0
  5432  001456  8E2B               	bsf	___ftdiv@f1+1,7,c
  5433                           
  5434                           ; BSR set to: 0
  5435  001458  6A2C               	clrf	___ftdiv@f1+2,c
  5436                           
  5437                           ; BSR set to: 0
  5438  00145A  8E2E               	bsf	___ftdiv@f2+1,7,c
  5439                           
  5440                           ; BSR set to: 0
  5441  00145C  6A2F               	clrf	___ftdiv@f2+2,c
  5442                           
  5443                           ; BSR set to: 0
  5444  00145E  0E18               	movlw	24
  5445  001460  6F9E               	movwf	___ftdiv@cntr& (0+255),b
  5446  001462                     l3166:
  5447                           
  5448                           ; BSR set to: 0
  5449  001462  0100               	movlb	0	; () banked
  5450  001464  90D8               	bcf	status,0,c
  5451  001466  379F               	rlcf	___ftdiv@f3& (0+255),f,b
  5452  001468  37A0               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  5453  00146A  37A1               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  5454                           
  5455                           ; BSR set to: 0
  5456  00146C  502D               	movf	___ftdiv@f2,w,c
  5457  00146E  5C2A               	subwf	___ftdiv@f1,w,c
  5458  001470  502E               	movf	___ftdiv@f2+1,w,c
  5459  001472  582B               	subwfb	___ftdiv@f1+1,w,c
  5460  001474  502F               	movf	___ftdiv@f2+2,w,c
  5461  001476  582C               	subwfb	___ftdiv@f1+2,w,c
  5462  001478  E307               	bnc	l684
  5463                           
  5464                           ; BSR set to: 0
  5465  00147A  502D               	movf	___ftdiv@f2,w,c
  5466  00147C  5E2A               	subwf	___ftdiv@f1,f,c
  5467  00147E  502E               	movf	___ftdiv@f2+1,w,c
  5468  001480  5A2B               	subwfb	___ftdiv@f1+1,f,c
  5469  001482  502F               	movf	___ftdiv@f2+2,w,c
  5470  001484  5A2C               	subwfb	___ftdiv@f1+2,f,c
  5471                           
  5472                           ; BSR set to: 0
  5473  001486  819F               	bsf	___ftdiv@f3& (0+255),0,b
  5474  001488                     l684:
  5475                           
  5476                           ; BSR set to: 0
  5477  001488  90D8               	bcf	status,0,c
  5478  00148A  362A               	rlcf	___ftdiv@f1,f,c
  5479  00148C  362B               	rlcf	___ftdiv@f1+1,f,c
  5480  00148E  362C               	rlcf	___ftdiv@f1+2,f,c
  5481                           
  5482                           ; BSR set to: 0
  5483  001490  0100               	movlb	0	; () banked
  5484  001492  2F9E               	decfsz	___ftdiv@cntr& (0+255),f,b
  5485  001494  D7E6               	goto	l3166
  5486                           
  5487                           ; BSR set to: 0
  5488                           
  5489                           ; BSR set to: 0
  5490  001496  C09F  F011         	movff	___ftdiv@f3,___ftpack@arg
  5491  00149A  C0A0  F012         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5492  00149E  C0A1  F013         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5493  0014A2  C0A2  F014         	movff	___ftdiv@exp,___ftpack@exp
  5494  0014A6  C0A3  F015         	movff	___ftdiv@sign,___ftpack@sign
  5495  0014AA  EC0C  F00B         	call	___ftpack	;wreg free
  5496  0014AE  C011  F02A         	movff	?___ftpack,?___ftdiv
  5497  0014B2  C012  F02B         	movff	?___ftpack+1,?___ftdiv+1
  5498  0014B6  C013  F02C         	movff	?___ftpack+2,?___ftdiv+2
  5499  0014BA  0012               	return	
  5500  0014BC                     __end_of___ftdiv:
  5501                           	opt stack 0
  5502                           tblptru	equ	0xFF8
  5503                           tblptrh	equ	0xFF7
  5504                           tblptrl	equ	0xFF6
  5505                           tablat	equ	0xFF5
  5506                           prodh	equ	0xFF4
  5507                           prodl	equ	0xFF3
  5508                           intcon	equ	0xFF2
  5509                           postinc0	equ	0xFEE
  5510                           wreg	equ	0xFE8
  5511                           indf1	equ	0xFE7
  5512                           postinc1	equ	0xFE6
  5513                           postdec1	equ	0xFE5
  5514                           fsr1h	equ	0xFE2
  5515                           fsr1l	equ	0xFE1
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           fsr2h	equ	0xFDA
  5520                           fsr2l	equ	0xFD9
  5521                           status	equ	0xFD8
  5522                           
  5523 ;; *************** function ___ftpack *****************
  5524 ;; Defined at:
  5525 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.42\sources\common\float.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  arg             3   16[COMRAM] unsigned um
  5528 ;;  exp             1   19[COMRAM] unsigned char 
  5529 ;;  sign            1   20[COMRAM] unsigned char 
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;                  3   16[COMRAM] float 
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, status,0
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5541 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5543 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5544 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5545 ;;Total ram usage:        8 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    1
  5548 ;; This function calls:
  5549 ;;		Nothing
  5550 ;; This function is called by:
  5551 ;;		___ftdiv
  5552 ;;		___ftmul
  5553 ;;		___lwtoft
  5554 ;; This function uses a non-reentrant model
  5555 ;;
  5556                           
  5557                           	psect	text18
  5558  001618                     __ptext18:
  5559                           	opt stack 0
  5560  001618                     ___ftpack:
  5561                           	opt stack 28
  5562                           
  5563                           ;incstack = 0
  5564  001618  5014               	movf	___ftpack@exp,w,c
  5565  00161A  E005               	bz	l3102
  5566  00161C  5011               	movf	___ftpack@arg,w,c
  5567  00161E  1012               	iorwf	___ftpack@arg+1,w,c
  5568  001620  1013               	iorwf	___ftpack@arg+2,w,c
  5569  001622  E001               	bz	l3102
  5570  001624  D009               	goto	l3108
  5571  001626                     l3102:
  5572  001626  6A11               	clrf	?___ftpack,c
  5573  001628  6A12               	clrf	?___ftpack+1,c
  5574  00162A  6A13               	clrf	?___ftpack+2,c
  5575  00162C  0C00               	retlw	0
  5576  00162E                     l3106:
  5577  00162E  2A14               	incf	___ftpack@exp,f,c
  5578  001630  90D8               	bcf	status,0,c
  5579  001632  3213               	rrcf	___ftpack@arg+2,f,c
  5580  001634  3212               	rrcf	___ftpack@arg+1,f,c
  5581  001636  3211               	rrcf	___ftpack@arg,f,c
  5582  001638                     l3108:
  5583  001638  6A16               	clrf	??___ftpack& (0+255),c
  5584  00163A  6A17               	clrf	(??___ftpack+1)& (0+255),c
  5585  00163C  0EFE               	movlw	254
  5586  00163E  1413               	andwf	___ftpack@arg+2,w,c
  5587  001640  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5588  001642  5016               	movf	??___ftpack,w,c
  5589  001644  1017               	iorwf	??___ftpack+1,w,c
  5590  001646  1018               	iorwf	??___ftpack+2,w,c
  5591  001648  E00A               	bz	l3114
  5592  00164A  D7F1               	goto	l3106
  5593  00164C                     l3110:
  5594  00164C  2A14               	incf	___ftpack@exp,f,c
  5595  00164E  2A11               	incf	___ftpack@arg,f,c
  5596  001650  0E00               	movlw	0
  5597  001652  2212               	addwfc	___ftpack@arg+1,f,c
  5598  001654  2213               	addwfc	___ftpack@arg+2,f,c
  5599  001656  90D8               	bcf	status,0,c
  5600  001658  3213               	rrcf	___ftpack@arg+2,f,c
  5601  00165A  3212               	rrcf	___ftpack@arg+1,f,c
  5602  00165C  3211               	rrcf	___ftpack@arg,f,c
  5603  00165E                     l3114:
  5604  00165E  6A16               	clrf	??___ftpack& (0+255),c
  5605  001660  6A17               	clrf	(??___ftpack+1)& (0+255),c
  5606  001662  5013               	movf	___ftpack@arg+2,w,c
  5607  001664  6E18               	movwf	(??___ftpack+2)& (0+255),c
  5608  001666  5016               	movf	??___ftpack,w,c
  5609  001668  1017               	iorwf	??___ftpack+1,w,c
  5610  00166A  1018               	iorwf	??___ftpack+2,w,c
  5611  00166C  E006               	bz	l3118
  5612  00166E  D7EE               	goto	l3110
  5613  001670                     l3116:
  5614  001670  0614               	decf	___ftpack@exp,f,c
  5615  001672  90D8               	bcf	status,0,c
  5616  001674  3611               	rlcf	___ftpack@arg,f,c
  5617  001676  3612               	rlcf	___ftpack@arg+1,f,c
  5618  001678  3613               	rlcf	___ftpack@arg+2,f,c
  5619  00167A                     l3118:
  5620  00167A  BE12               	btfsc	___ftpack@arg+1,7,c
  5621  00167C  D003               	goto	l626
  5622  00167E  0E02               	movlw	2
  5623  001680  6014               	cpfslt	___ftpack@exp,c
  5624  001682  D7F6               	goto	l3116
  5625  001684                     l626:
  5626  001684  A014               	btfss	___ftpack@exp,0,c
  5627  001686  9E12               	bcf	___ftpack@arg+1,7,c
  5628  001688  90D8               	bcf	status,0,c
  5629  00168A  3214               	rrcf	___ftpack@exp,f,c
  5630  00168C  5014               	movf	___ftpack@exp,w,c
  5631  00168E  1213               	iorwf	___ftpack@arg+2,f,c
  5632  001690  5015               	movf	___ftpack@sign,w,c
  5633  001692  E001               	bz	l3130
  5634  001694  8E13               	bsf	___ftpack@arg+2,7,c
  5635  001696                     l3130:
  5636  001696  C011  F011         	movff	___ftpack@arg,?___ftpack
  5637  00169A  C012  F012         	movff	___ftpack@arg+1,?___ftpack+1
  5638  00169E  C013  F013         	movff	___ftpack@arg+2,?___ftpack+2
  5639  0016A2  0012               	return	
  5640  0016A4                     __end_of___ftpack:
  5641                           	opt stack 0
  5642                           tblptru	equ	0xFF8
  5643                           tblptrh	equ	0xFF7
  5644                           tblptrl	equ	0xFF6
  5645                           tablat	equ	0xFF5
  5646                           prodh	equ	0xFF4
  5647                           prodl	equ	0xFF3
  5648                           intcon	equ	0xFF2
  5649                           postinc0	equ	0xFEE
  5650                           wreg	equ	0xFE8
  5651                           indf1	equ	0xFE7
  5652                           postinc1	equ	0xFE6
  5653                           postdec1	equ	0xFE5
  5654                           fsr1h	equ	0xFE2
  5655                           fsr1l	equ	0xFE1
  5656                           indf2	equ	0xFDF
  5657                           postinc2	equ	0xFDE
  5658                           postdec2	equ	0xFDD
  5659                           fsr2h	equ	0xFDA
  5660                           fsr2l	equ	0xFD9
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function _Timer1_init *****************
  5664 ;; Defined at:
  5665 ;;		line 784 in file "Turn_counter.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;		None
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;		None
  5670 ;; Return value:  Size  Location     Type
  5671 ;;                  1    wreg      void 
  5672 ;; Registers used:
  5673 ;;		wreg, status,2
  5674 ;; Tracked objects:
  5675 ;;		On entry : 0/0
  5676 ;;		On exit  : 0/0
  5677 ;;		Unchanged: 0/0
  5678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5683 ;;Total ram usage:        0 bytes
  5684 ;; Hardware stack levels used:    1
  5685 ;; Hardware stack levels required when called:    1
  5686 ;; This function calls:
  5687 ;;		Nothing
  5688 ;; This function is called by:
  5689 ;;		_main
  5690 ;; This function uses a non-reentrant model
  5691 ;;
  5692                           
  5693                           	psect	text19
  5694  001A84                     __ptext19:
  5695                           	opt stack 0
  5696  001A84                     _Timer1_init:
  5697                           	opt stack 29
  5698                           
  5699                           ;Turn_counter.c: 786: T1GCONbits.TMR1GE = 0;
  5700                           
  5701                           ;incstack = 0
  5702  001A84  9EAA               	bcf	4010,7,c	;volatile
  5703                           
  5704                           ;Turn_counter.c: 787: T1CONbits.SOSCEN = 1;
  5705  001A86  86CD               	bsf	4045,3,c	;volatile
  5706                           
  5707                           ;Turn_counter.c: 788: T1CONbits.TMR1CS = 0;
  5708  001A88  0E3F               	movlw	-193
  5709  001A8A  16CD               	andwf	4045,f,c	;volatile
  5710                           
  5711                           ;Turn_counter.c: 789: T1CONbits.T1CKPS = 3;
  5712  001A8C  0E30               	movlw	48
  5713  001A8E  12CD               	iorwf	4045,f,c	;volatile
  5714                           
  5715                           ;Turn_counter.c: 790: T1CONbits.nT1SYNC = 0;
  5716  001A90  94CD               	bcf	4045,2,c	;volatile
  5717  001A92  0C30               	retlw	48	;funcret
  5718  001A94                     __end_of_Timer1_init:
  5719                           	opt stack 0
  5720                           tblptru	equ	0xFF8
  5721                           tblptrh	equ	0xFF7
  5722                           tblptrl	equ	0xFF6
  5723                           tablat	equ	0xFF5
  5724                           prodh	equ	0xFF4
  5725                           prodl	equ	0xFF3
  5726                           intcon	equ	0xFF2
  5727                           postinc0	equ	0xFEE
  5728                           wreg	equ	0xFE8
  5729                           indf1	equ	0xFE7
  5730                           postinc1	equ	0xFE6
  5731                           postdec1	equ	0xFE5
  5732                           fsr1h	equ	0xFE2
  5733                           fsr1l	equ	0xFE1
  5734                           indf2	equ	0xFDF
  5735                           postinc2	equ	0xFDE
  5736                           postdec2	equ	0xFDD
  5737                           fsr2h	equ	0xFDA
  5738                           fsr2l	equ	0xFD9
  5739                           status	equ	0xFD8
  5740                           
  5741 ;; *************** function _Interrupt_Init *****************
  5742 ;; Defined at:
  5743 ;;		line 678 in file "Turn_counter.c"
  5744 ;; Parameters:    Size  Location     Type
  5745 ;;		None
  5746 ;; Auto vars:     Size  Location     Type
  5747 ;;		None
  5748 ;; Return value:  Size  Location     Type
  5749 ;;                  1    wreg      void 
  5750 ;; Registers used:
  5751 ;;		wreg, status,2
  5752 ;; Tracked objects:
  5753 ;;		On entry : 0/0
  5754 ;;		On exit  : 0/0
  5755 ;;		Unchanged: 0/0
  5756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5761 ;;Total ram usage:        0 bytes
  5762 ;; Hardware stack levels used:    1
  5763 ;; Hardware stack levels required when called:    1
  5764 ;; This function calls:
  5765 ;;		Nothing
  5766 ;; This function is called by:
  5767 ;;		_main
  5768 ;; This function uses a non-reentrant model
  5769 ;;
  5770                           
  5771                           	psect	text20
  5772  001A28                     __ptext20:
  5773                           	opt stack 0
  5774  001A28                     _Interrupt_Init:
  5775                           	opt stack 29
  5776                           
  5777                           ;Turn_counter.c: 680: RCONbits.IPEN = 0;
  5778                           
  5779                           ;incstack = 0
  5780  001A28  9ED0               	bcf	4048,7,c	;volatile
  5781                           
  5782                           ;Turn_counter.c: 681: INTCONbits.GIEH = 1;
  5783  001A2A  8EF2               	bsf	intcon,7,c	;volatile
  5784                           
  5785                           ;Turn_counter.c: 682: INTCONbits.GIEL = 1;
  5786  001A2C  8CF2               	bsf	intcon,6,c	;volatile
  5787                           
  5788                           ;Turn_counter.c: 683: INTCONbits.TMR0IE = 0;
  5789  001A2E  9AF2               	bcf	intcon,5,c	;volatile
  5790                           
  5791                           ;Turn_counter.c: 685: PIR1bits.ADIF = 0;
  5792  001A30  9C9E               	bcf	3998,6,c	;volatile
  5793                           
  5794                           ;Turn_counter.c: 686: PIE1bits.ADIE = 0;
  5795  001A32  9C9D               	bcf	3997,6,c	;volatile
  5796                           
  5797                           ;Turn_counter.c: 688: INTCONbits.RBIE = 0;
  5798  001A34  96F2               	bcf	intcon,3,c	;volatile
  5799                           
  5800                           ;Turn_counter.c: 689: INTCONbits.RBIF = 0;
  5801  001A36  90F2               	bcf	intcon,0,c	;volatile
  5802                           
  5803                           ;Turn_counter.c: 691: INTCONbits.INT0IF = 0;
  5804  001A38  92F2               	bcf	intcon,1,c	;volatile
  5805                           
  5806                           ;Turn_counter.c: 692: IOCB = 0;
  5807  001A3A  010F               	movlb	15	; () banked
  5808  001A3C  6B5A               	clrf	90,b	;volatile
  5809                           
  5810                           ; BSR set to: 15
  5811                           ;Turn_counter.c: 693: INTCON2bits.nRBPU = 1;
  5812  001A3E  8EF1               	bsf	intcon2,7,c	;volatile
  5813                           
  5814                           ; BSR set to: 15
  5815                           ;Turn_counter.c: 695: INTCON2bits.INTEDG1 = 1;
  5816  001A40  8AF1               	bsf	intcon2,5,c	;volatile
  5817                           
  5818                           ; BSR set to: 15
  5819                           ;Turn_counter.c: 697: INTCON3bits.INT1IE = 1;
  5820  001A42  86F0               	bsf	intcon3,3,c	;volatile
  5821                           
  5822                           ; BSR set to: 15
  5823                           ;Turn_counter.c: 698: PIE1bits.RC1IE = 1;
  5824  001A44  8A9D               	bsf	3997,5,c	;volatile
  5825                           
  5826                           ; BSR set to: 15
  5827                           ;Turn_counter.c: 700: PIE1bits.TMR1IE = 1;
  5828  001A46  809D               	bsf	3997,0,c	;volatile
  5829                           
  5830                           ; BSR set to: 15
  5831  001A48  0C00               	retlw	0	;funcret
  5832  001A4A                     __end_of_Interrupt_Init:
  5833                           	opt stack 0
  5834                           tblptru	equ	0xFF8
  5835                           tblptrh	equ	0xFF7
  5836                           tblptrl	equ	0xFF6
  5837                           tablat	equ	0xFF5
  5838                           prodh	equ	0xFF4
  5839                           prodl	equ	0xFF3
  5840                           intcon	equ	0xFF2
  5841                           intcon2	equ	0xFF1
  5842                           intcon3	equ	0xFF0
  5843                           postinc0	equ	0xFEE
  5844                           wreg	equ	0xFE8
  5845                           indf1	equ	0xFE7
  5846                           postinc1	equ	0xFE6
  5847                           postdec1	equ	0xFE5
  5848                           fsr1h	equ	0xFE2
  5849                           fsr1l	equ	0xFE1
  5850                           indf2	equ	0xFDF
  5851                           postinc2	equ	0xFDE
  5852                           postdec2	equ	0xFDD
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _Hold_reg_Inint *****************
  5858 ;; Defined at:
  5859 ;;		line 622 in file "Turn_counter.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;		None
  5862 ;; Auto vars:     Size  Location     Type
  5863 ;;		None
  5864 ;; Return value:  Size  Location     Type
  5865 ;;                  1    wreg      void 
  5866 ;; Registers used:
  5867 ;;		wreg, status,2
  5868 ;; Tracked objects:
  5869 ;;		On entry : 0/0
  5870 ;;		On exit  : 0/0
  5871 ;;		Unchanged: 0/0
  5872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5877 ;;Total ram usage:        0 bytes
  5878 ;; Hardware stack levels used:    1
  5879 ;; Hardware stack levels required when called:    1
  5880 ;; This function calls:
  5881 ;;		Nothing
  5882 ;; This function is called by:
  5883 ;;		_main
  5884 ;; This function uses a non-reentrant model
  5885 ;;
  5886                           
  5887                           	psect	text21
  5888  001A72                     __ptext21:
  5889                           	opt stack 0
  5890  001A72                     _Hold_reg_Inint:
  5891                           	opt stack 29
  5892                           
  5893                           ;Turn_counter.c: 624: num_of_turns = 5;
  5894                           
  5895                           ; BSR set to: 15
  5896                           ;incstack = 0
  5897  001A72  0101               	movlb	1	; () banked
  5898  001A74  6BFA               	clrf	(_num_of_turns+1)& (0+255),b
  5899  001A76  0E05               	movlw	5
  5900  001A78  6FF9               	movwf	_num_of_turns& (0+255),b
  5901                           
  5902                           ;Turn_counter.c: 625: current_max = 700;
  5903  001A7A  0E02               	movlw	2
  5904  001A7C  6FFC               	movwf	(_current_max+1)& (0+255),b
  5905  001A7E  0EBC               	movlw	188
  5906  001A80  6FFB               	movwf	_current_max& (0+255),b
  5907                           
  5908                           ; BSR set to: 1
  5909  001A82  0CBC               	retlw	188	;funcret
  5910  001A84                     __end_of_Hold_reg_Inint:
  5911                           	opt stack 0
  5912                           tblptru	equ	0xFF8
  5913                           tblptrh	equ	0xFF7
  5914                           tblptrl	equ	0xFF6
  5915                           tablat	equ	0xFF5
  5916                           prodh	equ	0xFF4
  5917                           prodl	equ	0xFF3
  5918                           intcon	equ	0xFF2
  5919                           intcon2	equ	0xFF1
  5920                           intcon3	equ	0xFF0
  5921                           postinc0	equ	0xFEE
  5922                           wreg	equ	0xFE8
  5923                           indf1	equ	0xFE7
  5924                           postinc1	equ	0xFE6
  5925                           postdec1	equ	0xFE5
  5926                           fsr1h	equ	0xFE2
  5927                           fsr1l	equ	0xFE1
  5928                           indf2	equ	0xFDF
  5929                           postinc2	equ	0xFDE
  5930                           postdec2	equ	0xFDD
  5931                           fsr2h	equ	0xFDA
  5932                           fsr2l	equ	0xFD9
  5933                           status	equ	0xFD8
  5934                           
  5935 ;; *************** function _GPIO_init *****************
  5936 ;; Defined at:
  5937 ;;		line 594 in file "Turn_counter.c"
  5938 ;; Parameters:    Size  Location     Type
  5939 ;;		None
  5940 ;; Auto vars:     Size  Location     Type
  5941 ;;		None
  5942 ;; Return value:  Size  Location     Type
  5943 ;;                  1    wreg      void 
  5944 ;; Registers used:
  5945 ;;		None
  5946 ;; Tracked objects:
  5947 ;;		On entry : 0/0
  5948 ;;		On exit  : 0/0
  5949 ;;		Unchanged: 0/0
  5950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5955 ;;Total ram usage:        0 bytes
  5956 ;; Hardware stack levels used:    1
  5957 ;; Hardware stack levels required when called:    1
  5958 ;; This function calls:
  5959 ;;		Nothing
  5960 ;; This function is called by:
  5961 ;;		_main
  5962 ;; This function uses a non-reentrant model
  5963 ;;
  5964                           
  5965                           	psect	text22
  5966  0019A8                     __ptext22:
  5967                           	opt stack 0
  5968  0019A8                     _GPIO_init:
  5969                           	opt stack 29
  5970                           
  5971                           ;Turn_counter.c: 597: TRISAbits.TRISA0 = 1;
  5972                           
  5973                           ; BSR set to: 1
  5974                           ;incstack = 0
  5975  0019A8  8092               	bsf	3986,0,c	;volatile
  5976                           
  5977                           ;Turn_counter.c: 598: TRISAbits.TRISA1 = 0;
  5978  0019AA  9292               	bcf	3986,1,c	;volatile
  5979                           
  5980                           ;Turn_counter.c: 599: TRISAbits.TRISA2 = 0;
  5981  0019AC  9492               	bcf	3986,2,c	;volatile
  5982                           
  5983                           ;Turn_counter.c: 600: TRISAbits.TRISA3 = 0;
  5984  0019AE  9692               	bcf	3986,3,c	;volatile
  5985                           
  5986                           ;Turn_counter.c: 602: TRISBbits.TRISB0 = 0;
  5987  0019B0  9093               	bcf	3987,0,c	;volatile
  5988                           
  5989                           ;Turn_counter.c: 603: TRISBbits.TRISB1 = 1;
  5990  0019B2  8293               	bsf	3987,1,c	;volatile
  5991                           
  5992                           ;Turn_counter.c: 604: TRISBbits.TRISB2 = 1;
  5993  0019B4  8493               	bsf	3987,2,c	;volatile
  5994                           
  5995                           ;Turn_counter.c: 605: TRISBbits.TRISB3 = 1;
  5996  0019B6  8693               	bsf	3987,3,c	;volatile
  5997                           
  5998                           ;Turn_counter.c: 606: TRISBbits.TRISB4 = 1;
  5999  0019B8  8893               	bsf	3987,4,c	;volatile
  6000                           
  6001                           ;Turn_counter.c: 607: TRISBbits.TRISB5 = 0;
  6002  0019BA  9A93               	bcf	3987,5,c	;volatile
  6003                           
  6004                           ;Turn_counter.c: 609: TRISCbits.TRISC1 = 0;
  6005  0019BC  9294               	bcf	3988,1,c	;volatile
  6006                           
  6007                           ;Turn_counter.c: 610: TRISCbits.TRISC2 = 0;
  6008  0019BE  9494               	bcf	3988,2,c	;volatile
  6009                           
  6010                           ;Turn_counter.c: 611: TRISCbits.TRISC3 = 0;
  6011  0019C0  9694               	bcf	3988,3,c	;volatile
  6012                           
  6013                           ;Turn_counter.c: 612: TRISCbits.TRISC4 = 0;
  6014  0019C2  9894               	bcf	3988,4,c	;volatile
  6015                           
  6016                           ;Turn_counter.c: 613: TRISCbits.TRISC5 = 0;
  6017  0019C4  9A94               	bcf	3988,5,c	;volatile
  6018                           
  6019                           ;Turn_counter.c: 614: TRISCbits.TRISC6 = 0;
  6020  0019C6  9C94               	bcf	3988,6,c	;volatile
  6021                           
  6022                           ;Turn_counter.c: 615: TRISCbits.TRISC7 = 1;
  6023  0019C8  8E94               	bsf	3988,7,c	;volatile
  6024                           
  6025                           ;Turn_counter.c: 617: ANCON0bits.ANSEL0 = 1;
  6026  0019CA  010F               	movlb	15	; () banked
  6027  0019CC  815D               	bsf	93,0,b	;volatile
  6028                           
  6029                           ;Turn_counter.c: 618: ANCON0bits.ANSEL1 = 1;
  6030  0019CE  835D               	bsf	93,1,b	;volatile
  6031                           
  6032                           ;Turn_counter.c: 619: ANCON1bits.ANSEL8 = 0;
  6033  0019D0  915C               	bcf	92,0,b	;volatile
  6034                           
  6035                           ;Turn_counter.c: 620: ANCON1bits.ANSEL10 = 0;
  6036  0019D2  955C               	bcf	92,2,b	;volatile
  6037                           
  6038                           ; BSR set to: 15
  6039  0019D4  0012               	return		;funcret
  6040  0019D6                     __end_of_GPIO_init:
  6041                           	opt stack 0
  6042                           tblptru	equ	0xFF8
  6043                           tblptrh	equ	0xFF7
  6044                           tblptrl	equ	0xFF6
  6045                           tablat	equ	0xFF5
  6046                           prodh	equ	0xFF4
  6047                           prodl	equ	0xFF3
  6048                           intcon	equ	0xFF2
  6049                           intcon2	equ	0xFF1
  6050                           intcon3	equ	0xFF0
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           indf1	equ	0xFE7
  6054                           postinc1	equ	0xFE6
  6055                           postdec1	equ	0xFE5
  6056                           fsr1h	equ	0xFE2
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _EEprom_restore *****************
  6066 ;; Defined at:
  6067 ;;		line 797 in file "Turn_counter.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;		None
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;		None
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      void 
  6074 ;; Registers used:
  6075 ;;		wreg, status,2, status,0, cstack
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6082 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6083 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6084 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6085 ;;Total ram usage:        3 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    2
  6088 ;; This function calls:
  6089 ;;		_EEPROM_RdByte
  6090 ;;		_UART_Init
  6091 ;; This function is called by:
  6092 ;;		_main
  6093 ;; This function uses a non-reentrant model
  6094 ;;
  6095                           
  6096                           	psect	text23
  6097  000C46                     __ptext23:
  6098                           	opt stack 0
  6099  000C46                     _EEprom_restore:
  6100                           	opt stack 28
  6101                           
  6102                           ;Turn_counter.c: 799: bd_rate_code = EEPROM_RdByte(1);
  6103                           
  6104                           ; BSR set to: 15
  6105                           ;incstack = 0
  6106  000C46  0E01               	movlw	1
  6107  000C48  EC2F  F00D         	call	_EEPROM_RdByte
  6108  000C4C  6E4D               	movwf	_bd_rate_code,c
  6109                           
  6110                           ;Turn_counter.c: 800: if(bd_rate_code > 5)
  6111  000C4E  0E05               	movlw	5
  6112  000C50  644D               	cpfsgt	_bd_rate_code,c
  6113  000C52  D002               	goto	l2552
  6114                           
  6115                           ;Turn_counter.c: 801: bd_rate_code = 4;
  6116  000C54  0E04               	movlw	4
  6117  000C56  6E4D               	movwf	_bd_rate_code,c
  6118  000C58                     l2552:
  6119                           
  6120                           ;Turn_counter.c: 802: UART_Init(bd_rate_code);
  6121  000C58  504D               	movf	_bd_rate_code,w,c
  6122  000C5A  EC0D  F00C         	call	_UART_Init
  6123                           
  6124                           ;Turn_counter.c: 804: dev_id = EEPROM_RdByte(2);
  6125  000C5E  0E02               	movlw	2
  6126  000C60  EC2F  F00D         	call	_EEPROM_RdByte
  6127  000C64  6E4C               	movwf	_dev_id,c
  6128                           
  6129                           ;Turn_counter.c: 805: if((dev_id >= 255 )|| (dev_id == 0))
  6130  000C66  284C               	incf	_dev_id,w,c
  6131  000C68  E003               	bz	l2558
  6132  000C6A  504C               	movf	_dev_id,w,c
  6133  000C6C  E001               	bz	l2558
  6134  000C6E  D002               	goto	l2560
  6135  000C70                     l2558:
  6136                           
  6137                           ;Turn_counter.c: 806: dev_id = (unsigned char) 10;
  6138  000C70  0E0A               	movlw	10
  6139  000C72  6E4C               	movwf	_dev_id,c
  6140  000C74                     l2560:
  6141                           
  6142                           ;Turn_counter.c: 809: eeprom_buf = 0x00ff & EEPROM_RdByte(3);
  6143  000C74  0E03               	movlw	3
  6144  000C76  EC2F  F00D         	call	_EEPROM_RdByte
  6145  000C7A  6E12               	movwf	??_EEprom_restore& (0+255),c
  6146  000C7C  5012               	movf	??_EEprom_restore,w,c
  6147  000C7E  6E41               	movwf	_eeprom_buf,c
  6148  000C80  6A42               	clrf	_eeprom_buf+1,c
  6149                           
  6150                           ;Turn_counter.c: 810: eeprom_buf |= EEPROM_RdByte(4) << 8;
  6151  000C82  0E04               	movlw	4
  6152  000C84  EC2F  F00D         	call	_EEPROM_RdByte
  6153  000C88  6E12               	movwf	??_EEprom_restore& (0+255),c
  6154  000C8A  5012               	movf	??_EEprom_restore,w,c
  6155  000C8C  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6156  000C8E  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6157  000C90  5013               	movf	??_EEprom_restore+1,w,c
  6158  000C92  1241               	iorwf	_eeprom_buf,f,c
  6159  000C94  5014               	movf	??_EEprom_restore+2,w,c
  6160  000C96  1242               	iorwf	_eeprom_buf+1,f,c
  6161                           
  6162                           ;Turn_counter.c: 811: if(eeprom_buf > 9)
  6163  000C98  5042               	movf	_eeprom_buf+1,w,c
  6164  000C9A  E103               	bnz	u1410
  6165  000C9C  0E0A               	movlw	10
  6166  000C9E  5C41               	subwf	_eeprom_buf,w,c
  6167  000CA0  E303               	bnc	l2568
  6168  000CA2                     u1410:
  6169                           
  6170                           ;Turn_counter.c: 812: eeprom_buf = 5;
  6171  000CA2  6A42               	clrf	_eeprom_buf+1,c
  6172  000CA4  0E05               	movlw	5
  6173  000CA6  6E41               	movwf	_eeprom_buf,c
  6174  000CA8                     l2568:
  6175                           
  6176                           ;Turn_counter.c: 813: num_of_turns = eeprom_buf;
  6177  000CA8  C041  F1F9         	movff	_eeprom_buf,_num_of_turns
  6178  000CAC  C042  F1FA         	movff	_eeprom_buf+1,_num_of_turns+1
  6179                           
  6180                           ;Turn_counter.c: 816: eeprom_buf = 0x00ff & EEPROM_RdByte(5);
  6181  000CB0  0E05               	movlw	5
  6182  000CB2  EC2F  F00D         	call	_EEPROM_RdByte
  6183  000CB6  6E12               	movwf	??_EEprom_restore& (0+255),c
  6184  000CB8  5012               	movf	??_EEprom_restore,w,c
  6185  000CBA  6E41               	movwf	_eeprom_buf,c
  6186  000CBC  6A42               	clrf	_eeprom_buf+1,c
  6187                           
  6188                           ;Turn_counter.c: 817: eeprom_buf |= EEPROM_RdByte(6) << 8;
  6189  000CBE  0E06               	movlw	6
  6190  000CC0  EC2F  F00D         	call	_EEPROM_RdByte
  6191  000CC4  6E12               	movwf	??_EEprom_restore& (0+255),c
  6192  000CC6  5012               	movf	??_EEprom_restore,w,c
  6193  000CC8  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6194  000CCA  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6195  000CCC  5013               	movf	??_EEprom_restore+1,w,c
  6196  000CCE  1241               	iorwf	_eeprom_buf,f,c
  6197  000CD0  5014               	movf	??_EEprom_restore+2,w,c
  6198  000CD2  1242               	iorwf	_eeprom_buf+1,f,c
  6199                           
  6200                           ;Turn_counter.c: 818: if(eeprom_buf > 1200)
  6201  000CD4  0EB1               	movlw	177
  6202  000CD6  5C41               	subwf	_eeprom_buf,w,c
  6203  000CD8  0E04               	movlw	4
  6204  000CDA  5842               	subwfb	_eeprom_buf+1,w,c
  6205  000CDC  E304               	bnc	l2578
  6206                           
  6207                           ;Turn_counter.c: 819: eeprom_buf = 1000;
  6208  000CDE  0E03               	movlw	3
  6209  000CE0  6E42               	movwf	_eeprom_buf+1,c
  6210  000CE2  0EE8               	movlw	232
  6211  000CE4  6E41               	movwf	_eeprom_buf,c
  6212  000CE6                     l2578:
  6213                           
  6214                           ;Turn_counter.c: 820: current_max = eeprom_buf;
  6215  000CE6  C041  F1FB         	movff	_eeprom_buf,_current_max
  6216  000CEA  C042  F1FC         	movff	_eeprom_buf+1,_current_max+1
  6217                           
  6218                           ;Turn_counter.c: 823: eeprom_buf = (unsigned int)(0x00ff & EEPROM_RdByte(7));
  6219  000CEE  0E07               	movlw	7
  6220  000CF0  EC2F  F00D         	call	_EEPROM_RdByte
  6221  000CF4  6E12               	movwf	??_EEprom_restore& (0+255),c
  6222  000CF6  5012               	movf	??_EEprom_restore,w,c
  6223  000CF8  6E41               	movwf	_eeprom_buf,c
  6224  000CFA  6A42               	clrf	_eeprom_buf+1,c
  6225                           
  6226                           ;Turn_counter.c: 824: eeprom_buf |= (unsigned int)(EEPROM_RdByte(8) << 8);
  6227  000CFC  0E08               	movlw	8
  6228  000CFE  EC2F  F00D         	call	_EEPROM_RdByte
  6229  000D02  6E12               	movwf	??_EEprom_restore& (0+255),c
  6230  000D04  5012               	movf	??_EEprom_restore,w,c
  6231  000D06  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6232  000D08  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6233  000D0A  5013               	movf	??_EEprom_restore+1,w,c
  6234  000D0C  1241               	iorwf	_eeprom_buf,f,c
  6235  000D0E  5014               	movf	??_EEprom_restore+2,w,c
  6236  000D10  1242               	iorwf	_eeprom_buf+1,f,c
  6237                           
  6238                           ;Turn_counter.c: 825: if(eeprom_buf >= 4095)
  6239  000D12  2841               	incf	_eeprom_buf,w,c
  6240  000D14  0E0F               	movlw	15
  6241  000D16  5842               	subwfb	_eeprom_buf+1,w,c
  6242  000D18  E302               	bnc	l2588
  6243                           
  6244                           ;Turn_counter.c: 826: eeprom_buf = 0;
  6245  000D1A  6A42               	clrf	_eeprom_buf+1,c
  6246  000D1C  6A41               	clrf	_eeprom_buf,c
  6247  000D1E                     l2588:
  6248                           
  6249                           ;Turn_counter.c: 827: offset = eeprom_buf;
  6250  000D1E  C041  F1DD         	movff	_eeprom_buf,_offset
  6251  000D22  C042  F1DE         	movff	_eeprom_buf+1,_offset+1
  6252                           
  6253                           ;Turn_counter.c: 829: eeprom_buf = 0x00ff & EEPROM_RdByte(9);
  6254  000D26  0E09               	movlw	9
  6255  000D28  EC2F  F00D         	call	_EEPROM_RdByte
  6256  000D2C  6E12               	movwf	??_EEprom_restore& (0+255),c
  6257  000D2E  5012               	movf	??_EEprom_restore,w,c
  6258  000D30  6E41               	movwf	_eeprom_buf,c
  6259  000D32  6A42               	clrf	_eeprom_buf+1,c
  6260                           
  6261                           ;Turn_counter.c: 830: eeprom_buf |= EEPROM_RdByte(10) << 8;
  6262  000D34  0E0A               	movlw	10
  6263  000D36  EC2F  F00D         	call	_EEPROM_RdByte
  6264  000D3A  6E12               	movwf	??_EEprom_restore& (0+255),c
  6265  000D3C  5012               	movf	??_EEprom_restore,w,c
  6266  000D3E  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6267  000D40  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6268  000D42  5013               	movf	??_EEprom_restore+1,w,c
  6269  000D44  1241               	iorwf	_eeprom_buf,f,c
  6270  000D46  5014               	movf	??_EEprom_restore+2,w,c
  6271  000D48  1242               	iorwf	_eeprom_buf+1,f,c
  6272                           
  6273                           ;Turn_counter.c: 831: if(eeprom_buf > 4095) eeprom_buf = 0;
  6274  000D4A  0E10               	movlw	16
  6275  000D4C  5C42               	subwf	_eeprom_buf+1,w,c
  6276  000D4E  E302               	bnc	l2598
  6277  000D50  6A42               	clrf	_eeprom_buf+1,c
  6278  000D52  6A41               	clrf	_eeprom_buf,c
  6279  000D54                     l2598:
  6280                           
  6281                           ;Turn_counter.c: 832: POT_MIN = eeprom_buf;
  6282  000D54  C041  F048         	movff	_eeprom_buf,_POT_MIN
  6283  000D58  C042  F049         	movff	_eeprom_buf+1,_POT_MIN+1
  6284                           
  6285                           ;Turn_counter.c: 834: eeprom_buf = 0x00ff & EEPROM_RdByte(11);
  6286  000D5C  0E0B               	movlw	11
  6287  000D5E  EC2F  F00D         	call	_EEPROM_RdByte
  6288  000D62  6E12               	movwf	??_EEprom_restore& (0+255),c
  6289  000D64  5012               	movf	??_EEprom_restore,w,c
  6290  000D66  6E41               	movwf	_eeprom_buf,c
  6291  000D68  6A42               	clrf	_eeprom_buf+1,c
  6292                           
  6293                           ;Turn_counter.c: 835: eeprom_buf |= EEPROM_RdByte(12) << 8;
  6294  000D6A  0E0C               	movlw	12
  6295  000D6C  EC2F  F00D         	call	_EEPROM_RdByte
  6296  000D70  6E12               	movwf	??_EEprom_restore& (0+255),c
  6297  000D72  5012               	movf	??_EEprom_restore,w,c
  6298  000D74  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6299  000D76  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6300  000D78  5013               	movf	??_EEprom_restore+1,w,c
  6301  000D7A  1241               	iorwf	_eeprom_buf,f,c
  6302  000D7C  5014               	movf	??_EEprom_restore+2,w,c
  6303  000D7E  1242               	iorwf	_eeprom_buf+1,f,c
  6304                           
  6305                           ;Turn_counter.c: 836: if(eeprom_buf > 4095) eeprom_buf = 4095;
  6306  000D80  0E10               	movlw	16
  6307  000D82  5C42               	subwf	_eeprom_buf+1,w,c
  6308  000D84  E303               	bnc	l2608
  6309  000D86  0E0F               	movlw	15
  6310  000D88  6E42               	movwf	_eeprom_buf+1,c
  6311  000D8A  6841               	setf	_eeprom_buf,c
  6312  000D8C                     l2608:
  6313                           
  6314                           ;Turn_counter.c: 837: POT_MAX = eeprom_buf;
  6315  000D8C  C041  F046         	movff	_eeprom_buf,_POT_MAX
  6316  000D90  C042  F047         	movff	_eeprom_buf+1,_POT_MAX+1
  6317                           
  6318                           ;Turn_counter.c: 839: eeprom_buf = 0x00ff & EEPROM_RdByte(13);
  6319  000D94  0E0D               	movlw	13
  6320  000D96  EC2F  F00D         	call	_EEPROM_RdByte
  6321  000D9A  6E12               	movwf	??_EEprom_restore& (0+255),c
  6322  000D9C  5012               	movf	??_EEprom_restore,w,c
  6323  000D9E  6E41               	movwf	_eeprom_buf,c
  6324  000DA0  6A42               	clrf	_eeprom_buf+1,c
  6325                           
  6326                           ;Turn_counter.c: 840: eeprom_buf |= EEPROM_RdByte(14) << 8;
  6327  000DA2  0E0E               	movlw	14
  6328  000DA4  EC2F  F00D         	call	_EEPROM_RdByte
  6329  000DA8  6E12               	movwf	??_EEprom_restore& (0+255),c
  6330  000DAA  5012               	movf	??_EEprom_restore,w,c
  6331  000DAC  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6332  000DAE  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6333  000DB0  5013               	movf	??_EEprom_restore+1,w,c
  6334  000DB2  1241               	iorwf	_eeprom_buf,f,c
  6335  000DB4  5014               	movf	??_EEprom_restore+2,w,c
  6336  000DB6  1242               	iorwf	_eeprom_buf+1,f,c
  6337                           
  6338                           ;Turn_counter.c: 841: if(eeprom_buf > 2) eeprom_buf = 1;
  6339  000DB8  5042               	movf	_eeprom_buf+1,w,c
  6340  000DBA  E103               	bnz	u1460
  6341  000DBC  0E03               	movlw	3
  6342  000DBE  5C41               	subwf	_eeprom_buf,w,c
  6343  000DC0  E303               	bnc	l2618
  6344  000DC2                     u1460:
  6345  000DC2  6A42               	clrf	_eeprom_buf+1,c
  6346  000DC4  0E01               	movlw	1
  6347  000DC6  6E41               	movwf	_eeprom_buf,c
  6348  000DC8                     l2618:
  6349                           
  6350                           ;Turn_counter.c: 842: CHANGE_MOTOR = eeprom_buf;
  6351  000DC8  C041  F04A         	movff	_eeprom_buf,_CHANGE_MOTOR
  6352  000DCC  C042  F04B         	movff	_eeprom_buf+1,_CHANGE_MOTOR+1
  6353                           
  6354                           ;Turn_counter.c: 844: eeprom_buf = 0x00ff & EEPROM_RdByte(15);
  6355  000DD0  0E0F               	movlw	15
  6356  000DD2  EC2F  F00D         	call	_EEPROM_RdByte
  6357  000DD6  6E12               	movwf	??_EEprom_restore& (0+255),c
  6358  000DD8  5012               	movf	??_EEprom_restore,w,c
  6359  000DDA  6E41               	movwf	_eeprom_buf,c
  6360  000DDC  6A42               	clrf	_eeprom_buf+1,c
  6361                           
  6362                           ;Turn_counter.c: 845: eeprom_buf |= EEPROM_RdByte(16) << 8;
  6363  000DDE  0E10               	movlw	16
  6364  000DE0  EC2F  F00D         	call	_EEPROM_RdByte
  6365  000DE4  6E12               	movwf	??_EEprom_restore& (0+255),c
  6366  000DE6  5012               	movf	??_EEprom_restore,w,c
  6367  000DE8  6E14               	movwf	(??_EEprom_restore+2)& (0+255),c
  6368  000DEA  6A13               	clrf	(??_EEprom_restore+1)& (0+255),c
  6369  000DEC  5013               	movf	??_EEprom_restore+1,w,c
  6370  000DEE  1241               	iorwf	_eeprom_buf,f,c
  6371  000DF0  5014               	movf	??_EEprom_restore+2,w,c
  6372  000DF2  1242               	iorwf	_eeprom_buf+1,f,c
  6373                           
  6374                           ;Turn_counter.c: 846: if(eeprom_buf > 360) eeprom_buf = 360;
  6375  000DF4  0E69               	movlw	105
  6376  000DF6  5C41               	subwf	_eeprom_buf,w,c
  6377  000DF8  0E01               	movlw	1
  6378  000DFA  5842               	subwfb	_eeprom_buf+1,w,c
  6379  000DFC  E304               	bnc	l2628
  6380  000DFE  0E01               	movlw	1
  6381  000E00  6E42               	movwf	_eeprom_buf+1,c
  6382  000E02  0E68               	movlw	104
  6383  000E04  6E41               	movwf	_eeprom_buf,c
  6384  000E06                     l2628:
  6385                           
  6386                           ;Turn_counter.c: 847: GRAD_MAX = eeprom_buf;
  6387  000E06  C041  F1E7         	movff	_eeprom_buf,_GRAD_MAX
  6388  000E0A  C042  F1E8         	movff	_eeprom_buf+1,_GRAD_MAX+1
  6389  000E0E  0012               	return		;funcret
  6390  000E10                     __end_of_EEprom_restore:
  6391                           	opt stack 0
  6392                           tblptru	equ	0xFF8
  6393                           tblptrh	equ	0xFF7
  6394                           tblptrl	equ	0xFF6
  6395                           tablat	equ	0xFF5
  6396                           prodh	equ	0xFF4
  6397                           prodl	equ	0xFF3
  6398                           intcon	equ	0xFF2
  6399                           intcon2	equ	0xFF1
  6400                           intcon3	equ	0xFF0
  6401                           postinc0	equ	0xFEE
  6402                           wreg	equ	0xFE8
  6403                           indf1	equ	0xFE7
  6404                           postinc1	equ	0xFE6
  6405                           postdec1	equ	0xFE5
  6406                           fsr1h	equ	0xFE2
  6407                           fsr1l	equ	0xFE1
  6408                           indf2	equ	0xFDF
  6409                           postinc2	equ	0xFDE
  6410                           postdec2	equ	0xFDD
  6411                           fsr2h	equ	0xFDA
  6412                           fsr2l	equ	0xFD9
  6413                           status	equ	0xFD8
  6414                           
  6415 ;; *************** function _UART_Init *****************
  6416 ;; Defined at:
  6417 ;;		line 642 in file "Turn_counter.c"
  6418 ;; Parameters:    Size  Location     Type
  6419 ;;  bd_rate_code    1    wreg     unsigned char 
  6420 ;; Auto vars:     Size  Location     Type
  6421 ;;  bd_rate_code    1   16[COMRAM] unsigned char 
  6422 ;; Return value:  Size  Location     Type
  6423 ;;                  1    wreg      void 
  6424 ;; Registers used:
  6425 ;;		wreg, status,2, status,0
  6426 ;; Tracked objects:
  6427 ;;		On entry : 0/0
  6428 ;;		On exit  : 0/0
  6429 ;;		Unchanged: 0/0
  6430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6432 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6434 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6435 ;;Total ram usage:        1 bytes
  6436 ;; Hardware stack levels used:    1
  6437 ;; Hardware stack levels required when called:    1
  6438 ;; This function calls:
  6439 ;;		Nothing
  6440 ;; This function is called by:
  6441 ;;		_EEprom_restore
  6442 ;;		_main
  6443 ;; This function uses a non-reentrant model
  6444 ;;
  6445                           
  6446                           	psect	text24
  6447  00181A                     __ptext24:
  6448                           	opt stack 0
  6449  00181A                     _UART_Init:
  6450                           	opt stack 29
  6451                           
  6452                           ;incstack = 0
  6453                           ;UART_Init@bd_rate_code stored from wreg
  6454  00181A  6E11               	movwf	UART_Init@bd_rate_code,c
  6455                           
  6456                           ;Turn_counter.c: 644: switch(bd_rate_code)
  6457  00181C  D012               	goto	l2354
  6458  00181E                     l2328:
  6459  00181E  94AC               	bcf	4012,2,c	;volatile
  6460  001820  D01D               	goto	l325
  6461  001822                     l2330:
  6462  001822  0E81               	movlw	129
  6463  001824  D009               	goto	L15
  6464  001826                     l2332:
  6465  001826  84AC               	bsf	4012,2,c	;volatile
  6466  001828  D019               	goto	l325
  6467  00182A                     l2334:
  6468  00182A  0E40               	movlw	64
  6469  00182C  D005               	goto	L15
  6470  00182E                     l2338:
  6471  00182E  0E2A               	movlw	42
  6472  001830  D003               	goto	L15
  6473  001832                     l2342:
  6474  001832  0E15               	movlw	21
  6475  001834  D001               	goto	L15
  6476  001836                     l2346:
  6477  001836  0E0A               	movlw	10
  6478  001838                     L15:
  6479  001838  6EAF               	movwf	4015,c	;volatile
  6480  00183A  D7F5               	goto	l2332
  6481  00183C                     l2350:
  6482  00183C  0E40               	movlw	64
  6483  00183E  6EAF               	movwf	4015,c	;volatile
  6484  001840  D7EE               	goto	l2328
  6485  001842                     l2354:
  6486  001842  5011               	movf	UART_Init@bd_rate_code,w,c
  6487                           
  6488                           ; Switch size 1, requested type "speed"
  6489                           ; Number of cases is 6, Range of values is 0 to 5
  6490                           ; switch strategies available:
  6491                           ; Name         Instructions Cycles
  6492                           ; simple_byte           19    10 (average)
  6493                           ;	Chosen strategy is simple_byte
  6494  001844  E0FB               	bz	l2350
  6495  001846  0A01               	xorlw	1	; case 1
  6496  001848  E0EC               	bz	l2330
  6497  00184A  0A03               	xorlw	3	; case 2
  6498  00184C  E0EE               	bz	l2334
  6499  00184E  0A01               	xorlw	1	; case 3
  6500  001850  E0EE               	bz	l2338
  6501  001852  0A07               	xorlw	7	; case 4
  6502  001854  E0EE               	bz	l2342
  6503  001856  0A01               	xorlw	1	; case 5
  6504  001858  E0EE               	bz	l2346
  6505  00185A  D7F0               	goto	l2350
  6506  00185C                     l325:
  6507                           
  6508                           ;Turn_counter.c: 656: TXSTA1bits.SYNC = 0;
  6509  00185C  98AC               	bcf	4012,4,c	;volatile
  6510                           
  6511                           ;Turn_counter.c: 657: TXSTA1bits.TX9 = 0;
  6512  00185E  9CAC               	bcf	4012,6,c	;volatile
  6513                           
  6514                           ;Turn_counter.c: 658: TXSTA1bits.TXEN = 1;
  6515  001860  8AAC               	bsf	4012,5,c	;volatile
  6516                           
  6517                           ;Turn_counter.c: 662: RCSTA1bits.CREN1 = 1;
  6518  001862  88AB               	bsf	4011,4,c	;volatile
  6519                           
  6520                           ;Turn_counter.c: 663: RCSTA1bits.RX9 = 0;
  6521  001864  9CAB               	bcf	4011,6,c	;volatile
  6522                           
  6523                           ;Turn_counter.c: 664: RCSTA1bits.SPEN = 1;
  6524  001866  8EAB               	bsf	4011,7,c	;volatile
  6525                           
  6526                           ;Turn_counter.c: 665: RCSTA1bits.CREN1 = 1;
  6527  001868  88AB               	bsf	4011,4,c	;volatile
  6528                           
  6529                           ;Turn_counter.c: 666: RCSTA1bits.FERR = 0;
  6530  00186A  94AB               	bcf	4011,2,c	;volatile
  6531                           
  6532                           ;Turn_counter.c: 667: RCSTA1bits.OERR =0;
  6533  00186C  92AB               	bcf	4011,1,c	;volatile
  6534                           
  6535                           ;Turn_counter.c: 670: BAUDCON1bits.RXDTP1 = 0;
  6536  00186E  9AA7               	bcf	4007,5,c	;volatile
  6537                           
  6538                           ;Turn_counter.c: 671: BAUDCON1bits.TXCKP1 = 0;
  6539  001870  98A7               	bcf	4007,4,c	;volatile
  6540                           
  6541                           ;Turn_counter.c: 672: BAUDCON1bits.BRG16 = 0;
  6542  001872  96A7               	bcf	4007,3,c	;volatile
  6543                           
  6544                           ;Turn_counter.c: 674: BAUDCON1bits.ABDEN1 = 0;
  6545  001874  90A7               	bcf	4007,0,c	;volatile
  6546  001876  0012               	return		;funcret
  6547  001878                     __end_of_UART_Init:
  6548                           	opt stack 0
  6549                           tblptru	equ	0xFF8
  6550                           tblptrh	equ	0xFF7
  6551                           tblptrl	equ	0xFF6
  6552                           tablat	equ	0xFF5
  6553                           prodh	equ	0xFF4
  6554                           prodl	equ	0xFF3
  6555                           intcon	equ	0xFF2
  6556                           intcon2	equ	0xFF1
  6557                           intcon3	equ	0xFF0
  6558                           postinc0	equ	0xFEE
  6559                           wreg	equ	0xFE8
  6560                           indf1	equ	0xFE7
  6561                           postinc1	equ	0xFE6
  6562                           postdec1	equ	0xFE5
  6563                           fsr1h	equ	0xFE2
  6564                           fsr1l	equ	0xFE1
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572 ;; *************** function _EEPROM_RdByte *****************
  6573 ;; Defined at:
  6574 ;;		line 95 in file "Turn_counter.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  bAdd            1    wreg     unsigned char 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  bAdd            1   16[COMRAM] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;                  1    wreg      unsigned char 
  6581 ;; Registers used:
  6582 ;;		wreg, status,2
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6592 ;;Total ram usage:        1 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; Hardware stack levels required when called:    1
  6595 ;; This function calls:
  6596 ;;		Nothing
  6597 ;; This function is called by:
  6598 ;;		_EEprom_restore
  6599 ;; This function uses a non-reentrant model
  6600 ;;
  6601                           
  6602                           	psect	text25
  6603  001A5E                     __ptext25:
  6604                           	opt stack 0
  6605  001A5E                     _EEPROM_RdByte:
  6606                           	opt stack 28
  6607                           
  6608                           ;incstack = 0
  6609                           ;EEPROM_RdByte@bAdd stored from wreg
  6610  001A5E  6E11               	movwf	EEPROM_RdByte@bAdd,c
  6611                           
  6612                           ;Turn_counter.c: 102: EEADR = bAdd & 0x0ff;
  6613  001A60  C011  FF74         	movff	EEPROM_RdByte@bAdd,3956	;volatile
  6614                           
  6615                           ;Turn_counter.c: 103: EECON1bits.CFGS = 0;
  6616  001A64  9C7F               	bcf	3967,6,c	;volatile
  6617                           
  6618                           ;Turn_counter.c: 104: EECON1bits.EEPGD = 0;
  6619  001A66  9E7F               	bcf	3967,7,c	;volatile
  6620                           
  6621                           ;Turn_counter.c: 105: EECON1bits.RD = 1;
  6622  001A68  807F               	bsf	3967,0,c	;volatile
  6623                           
  6624                           ;Turn_counter.c: 106: __nop();
  6625  001A6A  F000               	nop	
  6626                           
  6627                           ;Turn_counter.c: 107: __nop();
  6628  001A6C  F000               	nop	
  6629                           
  6630                           ;Turn_counter.c: 108: return EEDATA;
  6631  001A6E  5073               	movf	3955,w,c	;volatile
  6632  001A70  0012               	return	
  6633  001A72                     __end_of_EEPROM_RdByte:
  6634                           	opt stack 0
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           prodh	equ	0xFF4
  6640                           prodl	equ	0xFF3
  6641                           intcon	equ	0xFF2
  6642                           intcon2	equ	0xFF1
  6643                           intcon3	equ	0xFF0
  6644                           postinc0	equ	0xFEE
  6645                           wreg	equ	0xFE8
  6646                           indf1	equ	0xFE7
  6647                           postinc1	equ	0xFE6
  6648                           postdec1	equ	0xFE5
  6649                           fsr1h	equ	0xFE2
  6650                           fsr1l	equ	0xFE1
  6651                           indf2	equ	0xFDF
  6652                           postinc2	equ	0xFDE
  6653                           postdec2	equ	0xFDD
  6654                           fsr2h	equ	0xFDA
  6655                           fsr2l	equ	0xFD9
  6656                           status	equ	0xFD8
  6657                           
  6658 ;; *************** function _ADC_Init *****************
  6659 ;; Defined at:
  6660 ;;		line 628 in file "Turn_counter.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;		None
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;		None
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  1    wreg      void 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6678 ;;Total ram usage:        0 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    1
  6681 ;; This function calls:
  6682 ;;		Nothing
  6683 ;; This function is called by:
  6684 ;;		_main
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           	psect	text26
  6689  0019D6                     __ptext26:
  6690                           	opt stack 0
  6691  0019D6                     _ADC_Init:
  6692                           	opt stack 29
  6693                           
  6694                           ;Turn_counter.c: 631: ADCON0bits.GO_nDONE = 0;
  6695                           
  6696                           ;incstack = 0
  6697  0019D6  92C2               	bcf	4034,1,c	;volatile
  6698                           
  6699                           ;Turn_counter.c: 632: ADCON0bits.CHS = 0;
  6700  0019D8  94C2               	bcf	4034,2,c	;volatile
  6701  0019DA  96C2               	bcf	4034,3,c	;volatile
  6702  0019DC  98C2               	bcf	4034,4,c	;volatile
  6703  0019DE  9AC2               	bcf	4034,5,c	;volatile
  6704  0019E0  9CC2               	bcf	4034,6,c	;volatile
  6705                           
  6706                           ;Turn_counter.c: 633: ADCON1bits.CHSN = 0;
  6707  0019E2  90C1               	bcf	4033,0,c	;volatile
  6708  0019E4  92C1               	bcf	4033,1,c	;volatile
  6709  0019E6  94C1               	bcf	4033,2,c	;volatile
  6710                           
  6711                           ;Turn_counter.c: 634: ADCON1bits.VCFG = 0;
  6712  0019E8  0ECF               	movlw	-49
  6713  0019EA  16C1               	andwf	4033,f,c	;volatile
  6714                           
  6715                           ;Turn_counter.c: 635: ADCON1bits.VNCFG = 0;
  6716  0019EC  96C1               	bcf	4033,3,c	;volatile
  6717                           
  6718                           ;Turn_counter.c: 636: ADCON2bits.ACQT = 2;
  6719  0019EE  50C0               	movf	4032,w,c	;volatile
  6720  0019F0  0BC7               	andlw	-57
  6721  0019F2  0910               	iorlw	16
  6722  0019F4  6EC0               	movwf	4032,c	;volatile
  6723                           
  6724                           ;Turn_counter.c: 637: ADCON2bits.ADCS = 1;
  6725  0019F6  50C0               	movf	4032,w,c	;volatile
  6726  0019F8  0BF8               	andlw	-8
  6727  0019FA  0901               	iorlw	1
  6728  0019FC  6EC0               	movwf	4032,c	;volatile
  6729                           
  6730                           ;Turn_counter.c: 638: ADCON2bits.ADFM = 1;
  6731  0019FE  8EC0               	bsf	4032,7,c	;volatile
  6732                           
  6733                           ;Turn_counter.c: 640: ADCON0bits.ADON = 1;
  6734  001A00  80C2               	bsf	4034,0,c	;volatile
  6735  001A02  0012               	return		;funcret
  6736  001A04                     __end_of_ADC_Init:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           intcon	equ	0xFF2
  6745                           intcon2	equ	0xFF1
  6746                           intcon3	equ	0xFF0
  6747                           postinc0	equ	0xFEE
  6748                           wreg	equ	0xFE8
  6749                           indf1	equ	0xFE7
  6750                           postinc1	equ	0xFE6
  6751                           postdec1	equ	0xFE5
  6752                           fsr1h	equ	0xFE2
  6753                           fsr1l	equ	0xFE1
  6754                           indf2	equ	0xFDF
  6755                           postinc2	equ	0xFDE
  6756                           postdec2	equ	0xFDD
  6757                           fsr2h	equ	0xFDA
  6758                           fsr2l	equ	0xFD9
  6759                           status	equ	0xFD8
  6760                           
  6761 ;; *************** function _ISR *****************
  6762 ;; Defined at:
  6763 ;;		line 734 in file "Turn_counter.c"
  6764 ;; Parameters:    Size  Location     Type
  6765 ;;		None
  6766 ;; Auto vars:     Size  Location     Type
  6767 ;;		None
  6768 ;; Return value:  Size  Location     Type
  6769 ;;                  1    wreg      void 
  6770 ;; Registers used:
  6771 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6772 ;; Tracked objects:
  6773 ;;		On entry : 0/0
  6774 ;;		On exit  : 0/0
  6775 ;;		Unchanged: 0/0
  6776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6779 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6780 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6781 ;;Total ram usage:       16 bytes
  6782 ;; Hardware stack levels used:    1
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		Interrupt level 2
  6787 ;; This function uses a non-reentrant model
  6788 ;;
  6789                           
  6790                           	psect	intcode
  6791  000008                     __pintcode:
  6792                           	opt stack 0
  6793  000008                     _ISR:
  6794                           	opt stack 27
  6795                           
  6796                           ;incstack = 0
  6797  000008  824E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  6798  00000A  CFFA F003          	movff	pclath,??_ISR+2
  6799  00000E  CFFB F004          	movff	pclatu,??_ISR+3
  6800  000012  CFE9 F005          	movff	fsr0l,??_ISR+4
  6801  000016  CFEA F006          	movff	fsr0h,??_ISR+5
  6802  00001A  CFE1 F007          	movff	fsr1l,??_ISR+6
  6803  00001E  CFE2 F008          	movff	fsr1h,??_ISR+7
  6804  000022  CFD9 F009          	movff	fsr2l,??_ISR+8
  6805  000026  CFDA F00A          	movff	fsr2h,??_ISR+9
  6806  00002A  CFF3 F00B          	movff	prodl,??_ISR+10
  6807  00002E  CFF4 F00C          	movff	prodh,??_ISR+11
  6808  000032  CFF6 F00D          	movff	tblptrl,??_ISR+12
  6809  000036  CFF7 F00E          	movff	tblptrh,??_ISR+13
  6810  00003A  CFF8 F00F          	movff	tblptru,??_ISR+14
  6811  00003E  CFF5 F010          	movff	tablat,??_ISR+15
  6812                           
  6813                           ;Turn_counter.c: 736: if(INTCON3bits.INT1IF)
  6814  000042  A0F0               	btfss	intcon3,0,c	;volatile
  6815  000044  D00B               	goto	i2l2820
  6816                           
  6817                           ;Turn_counter.c: 737: {
  6818                           ;Turn_counter.c: 739: TMR1L = 0x00;
  6819  000046  0E00               	movlw	0
  6820  000048  6ECE               	movwf	4046,c	;volatile
  6821                           
  6822                           ;Turn_counter.c: 740: TMR1H = 0x0f;
  6823  00004A  0E0F               	movlw	15
  6824  00004C  6ECF               	movwf	4047,c	;volatile
  6825                           
  6826                           ;Turn_counter.c: 741: T1CONbits.TMR1ON = 1;
  6827  00004E  80CD               	bsf	4045,0,c	;volatile
  6828                           
  6829                           ;Turn_counter.c: 743: V_detect = 1;
  6830  000050  0E00               	movlw	0
  6831  000052  0100               	movlb	0	; () banked
  6832  000054  6F91               	movwf	(_V_detect+1)& (0+255),b
  6833  000056  0E01               	movlw	1
  6834  000058  6F90               	movwf	_V_detect& (0+255),b
  6835                           
  6836                           ; BSR set to: 0
  6837                           ;Turn_counter.c: 744: INTCON3bits.INT1IF = 0;
  6838  00005A  90F0               	bcf	intcon3,0,c	;volatile
  6839  00005C                     i2l2820:
  6840                           
  6841                           ;Turn_counter.c: 746: }
  6842                           ;Turn_counter.c: 748: if (PIR1bits.RC1IF)
  6843  00005C  AA9E               	btfss	3998,5,c	;volatile
  6844  00005E  D00D               	goto	i2l2826
  6845                           
  6846                           ;Turn_counter.c: 749: {
  6847                           ;Turn_counter.c: 750: wr_ptr++;
  6848  000060  2A45               	incf	_wr_ptr,f,c
  6849                           
  6850                           ;Turn_counter.c: 751: rx_buf[wr_ptr & 0x0F] = RCREG1;
  6851  000062  5045               	movf	_wr_ptr,w,c
  6852  000064  0B0F               	andlw	15
  6853  000066  6E01               	movwf	??_ISR& (0+255),c
  6854  000068  6A02               	clrf	(??_ISR+1)& (0+255),c
  6855  00006A  0E60               	movlw	low _rx_buf
  6856  00006C  2401               	addwf	??_ISR,w,c
  6857  00006E  6ED9               	movwf	fsr2l,c
  6858  000070  0E00               	movlw	high _rx_buf
  6859  000072  2002               	addwfc	??_ISR+1,w,c
  6860  000074  6EDA               	movwf	fsr2h,c
  6861  000076  CFAE FFDF          	movff	4014,indf2	;volatile
  6862  00007A                     i2l2826:
  6863                           
  6864                           ;Turn_counter.c: 752: }
  6865                           ;Turn_counter.c: 754: if (PIR1bits.TMR1IF)
  6866  00007A  A09E               	btfss	3998,0,c	;volatile
  6867  00007C  D006               	goto	i2l349
  6868                           
  6869                           ;Turn_counter.c: 755: {
  6870                           ;Turn_counter.c: 756: T1CONbits.TMR1ON = 0;
  6871  00007E  90CD               	bcf	4045,0,c	;volatile
  6872                           
  6873                           ;Turn_counter.c: 757: V_detect = 0;
  6874  000080  0E00               	movlw	0
  6875  000082  0100               	movlb	0	; () banked
  6876  000084  6F91               	movwf	(_V_detect+1)& (0+255),b
  6877  000086  6F90               	movwf	_V_detect& (0+255),b
  6878                           
  6879                           ; BSR set to: 0
  6880                           ;Turn_counter.c: 758: PIR1bits.TMR1IF = 0;
  6881  000088  909E               	bcf	3998,0,c	;volatile
  6882  00008A                     i2l349:
  6883  00008A  C010  FFF5         	movff	??_ISR+15,tablat
  6884  00008E  C00F  FFF8         	movff	??_ISR+14,tblptru
  6885  000092  C00E  FFF7         	movff	??_ISR+13,tblptrh
  6886  000096  C00D  FFF6         	movff	??_ISR+12,tblptrl
  6887  00009A  C00C  FFF4         	movff	??_ISR+11,prodh
  6888  00009E  C00B  FFF3         	movff	??_ISR+10,prodl
  6889  0000A2  C00A  FFDA         	movff	??_ISR+9,fsr2h
  6890  0000A6  C009  FFD9         	movff	??_ISR+8,fsr2l
  6891  0000AA  C008  FFE2         	movff	??_ISR+7,fsr1h
  6892  0000AE  C007  FFE1         	movff	??_ISR+6,fsr1l
  6893  0000B2  C006  FFEA         	movff	??_ISR+5,fsr0h
  6894  0000B6  C005  FFE9         	movff	??_ISR+4,fsr0l
  6895  0000BA  C004  FFFB         	movff	??_ISR+3,pclatu
  6896  0000BE  C003  FFFA         	movff	??_ISR+2,pclath
  6897  0000C2  924E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  6898  0000C4  0011               	retfie		f
  6899  0000C6                     __end_of_ISR:
  6900                           	opt stack 0
  6901  0000                     pclatu	equ	0xFFB
  6902                           pclath	equ	0xFFA
  6903                           tblptru	equ	0xFF8
  6904                           tblptrh	equ	0xFF7
  6905                           tblptrl	equ	0xFF6
  6906                           tablat	equ	0xFF5
  6907                           prodh	equ	0xFF4
  6908                           prodl	equ	0xFF3
  6909                           intcon	equ	0xFF2
  6910                           intcon2	equ	0xFF1
  6911                           intcon3	equ	0xFF0
  6912                           postinc0	equ	0xFEE
  6913                           fsr0h	equ	0xFEA
  6914                           fsr0l	equ	0xFE9
  6915                           wreg	equ	0xFE8
  6916                           indf1	equ	0xFE7
  6917                           postinc1	equ	0xFE6
  6918                           postdec1	equ	0xFE5
  6919                           fsr1h	equ	0xFE2
  6920                           fsr1l	equ	0xFE1
  6921                           indf2	equ	0xFDF
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           pclatu	equ	0xFFB
  6928                           pclath	equ	0xFFA
  6929                           tblptru	equ	0xFF8
  6930                           tblptrh	equ	0xFF7
  6931                           tblptrl	equ	0xFF6
  6932                           tablat	equ	0xFF5
  6933                           prodh	equ	0xFF4
  6934                           prodl	equ	0xFF3
  6935                           intcon	equ	0xFF2
  6936                           intcon2	equ	0xFF1
  6937                           intcon3	equ	0xFF0
  6938                           postinc0	equ	0xFEE
  6939                           fsr0h	equ	0xFEA
  6940                           fsr0l	equ	0xFE9
  6941                           wreg	equ	0xFE8
  6942                           indf1	equ	0xFE7
  6943                           postinc1	equ	0xFE6
  6944                           postdec1	equ	0xFE5
  6945                           fsr1h	equ	0xFE2
  6946                           fsr1l	equ	0xFE1
  6947                           indf2	equ	0xFDF
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954                           	psect	rparam
  6955  0000                     pclatu	equ	0xFFB
  6956                           pclath	equ	0xFFA
  6957                           tblptru	equ	0xFF8
  6958                           tblptrh	equ	0xFF7
  6959                           tblptrl	equ	0xFF6
  6960                           tablat	equ	0xFF5
  6961                           prodh	equ	0xFF4
  6962                           prodl	equ	0xFF3
  6963                           intcon	equ	0xFF2
  6964                           intcon2	equ	0xFF1
  6965                           intcon3	equ	0xFF0
  6966                           postinc0	equ	0xFEE
  6967                           fsr0h	equ	0xFEA
  6968                           fsr0l	equ	0xFE9
  6969                           wreg	equ	0xFE8
  6970                           indf1	equ	0xFE7
  6971                           postinc1	equ	0xFE6
  6972                           postdec1	equ	0xFE5
  6973                           fsr1h	equ	0xFE2
  6974                           fsr1l	equ	0xFE1
  6975                           indf2	equ	0xFDF
  6976                           postinc2	equ	0xFDE
  6977                           postdec2	equ	0xFDD
  6978                           fsr2h	equ	0xFDA
  6979                           fsr2l	equ	0xFD9
  6980                           status	equ	0xFD8
  6981                           
  6982                           	psect	temp
  6983  00004E                     btemp:
  6984                           	opt stack 0
  6985  00004E                     	ds	1
  6986  0000                     int$flags	set	btemp
  6987                           pclatu	equ	0xFFB
  6988                           pclath	equ	0xFFA
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           prodh	equ	0xFF4
  6994                           prodl	equ	0xFF3
  6995                           intcon	equ	0xFF2
  6996                           intcon2	equ	0xFF1
  6997                           intcon3	equ	0xFF0
  6998                           postinc0	equ	0xFEE
  6999                           fsr0h	equ	0xFEA
  7000                           fsr0l	equ	0xFE9
  7001                           wreg	equ	0xFE8
  7002                           indf1	equ	0xFE7
  7003                           postinc1	equ	0xFE6
  7004                           postdec1	equ	0xFE5
  7005                           fsr1h	equ	0xFE2
  7006                           fsr1l	equ	0xFE1
  7007                           indf2	equ	0xFDF
  7008                           postinc2	equ	0xFDE
  7009                           postdec2	equ	0xFDD
  7010                           fsr2h	equ	0xFDA
  7011                           fsr2l	equ	0xFD9
  7012                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        13
    BSS         609
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      77
    BANK0           160     31      96
    BANK1           256    217     255
    BANK2           256      0     250
    BANK3           256      0     250
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14           65      0       0

Pointer List with Targets:

    modbus_CRC16@buf	PTR unsigned char  size(2) Largest target is 250
		 -> crc_buf(BANK3[250]), 


Critical Paths under _main in COMRAM

    _main->___fttol
    _modbus_rx_sm->_modbus_rx_CRC_check
    _modbus_rx_CRC_check->_modbus_CRC16
    _modbus_poll->_modbus_rhr_answer
    _modbus_wsr_answer->_modbus_CRC16
    _modbus_rhr_answer->_modbus_CRC16
    _modbus_refresh->_EEPROM_WrByte
    ___lwtoft->___ftpack
    ___fttol->___ftdiv
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _EEprom_restore->_EEPROM_RdByte
    _EEprom_restore->_UART_Init

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->___ftdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                               231   231      0   20800
                                             17 BANK0     14    14      0
                                              0 BANK1    217   217      0
                           _ADC_Init
                      _EEPROM_WrByte
                     _EEprom_restore
                          _GPIO_init
                     _Hold_reg_Inint
                     _Interrupt_Init
                        _Timer1_init
                          _UART_Init
                            ___ftdiv
                            ___ftmul
                            ___fttol
                            ___lldiv
                            ___lwdiv
                           ___lwtoft
                        _modbus_poll
                       _modbus_reset
                       _modbus_rx_sm
 ---------------------------------------------------------------------------------
 (1) _modbus_rx_sm                                         0     0      0     732
                          _get_rx_ch
                _modbus_rx_CRC_check
 ---------------------------------------------------------------------------------
 (2) _modbus_rx_CRC_check                                  1     1      0     708
                                             29 COMRAM     1     1      0
                       _modbus_CRC16
 ---------------------------------------------------------------------------------
 (2) _get_rx_ch                                            3     3      0      24
                                             16 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _modbus_poll                                          0     0      0    4495
                      _EEPROM_WrByte
                     _modbus_refresh
                       _modbus_reset
                  _modbus_rhr_answer
                  _modbus_wsr_answer
 ---------------------------------------------------------------------------------
 (2) _modbus_wsr_answer                                    1     1      0     708
                                             29 COMRAM     1     1      0
                       _modbus_CRC16
                      _uart_send_hex
 ---------------------------------------------------------------------------------
 (2) _modbus_rhr_answer                                    5     5      0     803
                                             29 COMRAM     5     5      0
                       _modbus_CRC16
                      _uart_send_hex
 ---------------------------------------------------------------------------------
 (3) _uart_send_hex                                        1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _modbus_CRC16                                        13    10      3     686
                                             16 COMRAM    13    10      3
 ---------------------------------------------------------------------------------
 (1) _modbus_reset                                         2     2      0      68
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _modbus_refresh                                       3     3      0    1480
                                             19 COMRAM     3     3      0
                      _EEPROM_WrByte
 ---------------------------------------------------------------------------------
 (3) _EEPROM_WrByte                                        3     2      1    1436
                                             16 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    3224
                                             24 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              7     3      4     466
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) ___lldiv                                             13     5      8     922
                                             16 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     641
                                             50 COMRAM     4     0      4
                                              6 BANK0     11    11      0
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftmul                                             15     9      6    4140
                                             27 COMRAM    14     8      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3753
                                             41 COMRAM     9     3      6
                                              0 BANK0      6     6      0
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftpack                                             8     3      5    2833
                                             16 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _Timer1_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Interrupt_Init                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Hold_reg_Inint                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GPIO_init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EEprom_restore                                       3     3      0      44
                                             17 COMRAM     3     3      0
                      _EEPROM_RdByte
                          _UART_Init
 ---------------------------------------------------------------------------------
 (1) _UART_Init                                            1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EEPROM_RdByte                                        1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                 16    16      0       0
                                              0 COMRAM    16    16      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Init
   _EEPROM_WrByte
   _EEprom_restore
     _EEPROM_RdByte
     _UART_Init
   _GPIO_init
   _Hold_reg_Inint
   _Interrupt_Init
   _Timer1_init
   _UART_Init
   ___ftdiv
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___fttol
     ___ftdiv (ARG)
       ___ftmul (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul (ARG)
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft (ARG)
       ___ftpack
   ___lldiv
   ___lwdiv
   ___lwtoft
     ___ftpack
   _modbus_poll
     _EEPROM_WrByte
     _modbus_refresh
       _EEPROM_WrByte
     _modbus_reset
     _modbus_rhr_answer
       _modbus_CRC16
       _uart_send_hex
     _modbus_wsr_answer
       _modbus_CRC16
       _uart_send_hex
   _modbus_reset
   _modbus_rx_sm
     _get_rx_ch
     _modbus_rx_CRC_check
       _modbus_CRC16

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             E40      0       0      35        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      FA      12       97.7%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      FA      10       97.7%
BITBANK1           100      0       0       7        0.0%
BANK1              100     D9      FF       8       99.6%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     1F      60       5       60.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      4D       1       81.9%
BITBANK14           41      0       0      33        0.0%
BANK14              41      0       0      34        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     3A0       6        0.0%
DATA                 0      0     3A0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Thu Oct 04 10:14:28 2018

             ??_Interrupt_Init 0011                    __CFG_BORV$3 000000                     _TXREG1bits 000FAD  
       __end_of_modbus_refresh 0FCE                   __CFG_CP0$OFF 000000                   __CFG_CP1$OFF 000000  
                 __CFG_CP2$OFF 000000                   __CFG_CP3$OFF 000000                            l204 1A4C  
                          l230 0F2E                            l232 0F42                            l224 0FC2  
                          l153 192C                            l233 0F5E                            l234 0F68  
                          l226 0EE4                            l242 1974                            l235 0F72  
                          l251 16E6                            l228 0EEE                            l308 1558  
                          l325 185C                            l229 0F0E                            l380 016C  
                          l285 115A                            l390 0408                            l383 01CC  
                          l375 0126                            l289 118E                            l626 1684  
                          l387 026E                            l746 1808                            l684 1488  
                          l698 13CA                            l799 18B8                   __CFG_CPB$OFF 000000  
                 __CFG_CPD$OFF 000000                            _ISR 0008                            _Buf 0092  
                          prod 000FF3                            wreg 000FE8                     _TXSTA1bits 000FAC  
              ??_uart_send_hex 0011                           ?_ISR 0001                   ___ftdiv@cntr 009E  
                 ___ftdiv@sign 00A3                           l2200 0F3A                           l2130 16EA  
                         l2114 16AC                           l2132 16EC                           l2300 10E4  
                         l3110 164C                           l3102 1626                           l2134 16F4  
                         l2126 16E0                           l2118 16C8                           l2302 10F6  
                         l2222 1960                           l2208 0F92                           l2400 1130  
                         l2330 1822                           l3130 1696                           l3114 165E  
                         l3106 162E                           l2162 198C                           l2322 18FC  
                         l2410 116A                           l2402 113C                           l2332 1826  
                         l3116 1670                           l3108 1638                           l3140 141A  
                         l2420 1188                           l2350 183C                           l2342 1832  
                         l2334 182A                           l3118 167A                           l2190 0EDC  
                         l2158 197E                           l2422 119A                           l2406 114E  
                         l2328 181E                           l2168 19A2                           l2280 1052  
                         l3400 0410                           l3312 014A                           l2346 1836  
                         l2338 182E                           l2354 1842                           l3146 143C  
                         l3250 12CC                           l2282 1064                           l2274 0FEE  
                         l3260 12F4                           l3228 1262                           l2444 11F4  
                         l2436 11D2                           l2452 120A                           l2428 11B2  
                         l3166 1462                           l3246 12BA                           l2294 109A  
                         l2454 1216                           l2438 11DE                           l3406 053E  
                         l3350 021E                           l3326 0192                           l2608 0D8C  
                         l2560 0C74                           l2552 0C58                           l3192 135C  
                         l3264 130A                           l3256 12DE                           l2472 14E4  
                         l2456 121C                           l3432 05CA                           l3408 0544  
                         l3352 0226                           l3336 01BC                           l2618 0DC8  
                         l3186 133C                           l3258 12EC                           l2394 111C  
                         l2458 1232                           l3362 02A6                           l2628 0E06  
                         l2804 18AE                           l2396 1124                           l3356 0236  
                         l3292 00FE                           l2558 0C70                           l2486 1526  
                         l3454 0646                           l3366 02AE                           l2568 0CA8  
                         l2578 0CE6                           l2770 17BC                           l2498 1544  
                         l3298 0128                           l2588 0D1E                           l2772 17C8  
                         l3492 0BBC                           l3476 0866                           l2598 0D54  
                         l2782 17FA                           l2774 17CC                           l3478 0B9A  
                         l2792 1888                           l2794 1890                           l2796 1894  
                         u1015 193C                           u1016 193E                           u2111 134C  
                         u2041 1408                           u1410 0CA2                           _IOCB 000F5A  
                         u2061 142A                           u2141 124E                           u2230 0126  
                         u2160 1284                           u2410 0BB2                           u2091 132C  
                         u1460 0DC2                           u2260 016C                           u2165 127A  
                         u2507 0374                           u2517 0562                           u2437 0152  
                         u2607 082E                           u2527 056C                           u2447 01AE  
                         u2617 0BD8                           u2537 059E                           u2457 01D0  
                         u2627 0BE2                           u2547 05BA                           u2467 020C  
                         u2637 0C1A                           u2557 05DE                           u2477 032C  
                         u2647 0C38                           u2567 05E8                           u2487 0336  
                         u2657 1796                           u2577 061A                           u2497 036A  
                         u2667 110C                           u2587 0636                           u2677 1A56  
                         u2597 0824                   __CFG_WDTPS$1 000000                           _flag 0094  
               _Hold_reg_Inint 1A72                           _grad 01DB                           _main 00CA  
                 ___ftpack@arg 0011                   ___ftpack@exp 0014                           fsr0h 000FEA  
                         fsr1h 000FE2                           fsr2h 000FDA                           fsr0l 000FE9  
                         indf1 000FE7                           indf2 000FDF                           fsr1l 000FE1  
                         fsr2l 000FD9                           btemp 004E               __end_of_ADC_Init 1A04  
                         prodh 000FF4                           prodl 000FF3                           start 00C6  
                __CFG_IESO$OFF 000000                  __CFG_FOSC$HS1 000000             __size_of_GPIO_init 002E  
                __CFG_MCLRE$ON 000000    __end_of_modbus_rx_CRC_check 1906                   ___param_bank 000000  
                 ___ftmul@sign 0026                          ??_ISR 0001                   ___fttol@exp1 00AE  
                 ___fttol@lval 00AA                   _BAUDCON1bits 000FA7                ?_modbus_refresh 0001  
                        ?_main 0001                          _EEADR 000F74                          _CRC16 0082  
              __end_of___ftdiv 14BC                __end_of___lldiv 181A                __end_of___ftmul 13F8  
              __end_of___fttol 131C                __end_of___lwdiv 18C2                          i2l349 008A  
                        _TMR0H 000FD7                          _TMR1H 000FCF                          _TMR0L 000FD6  
                        _TMR1L 000FCE                   main@curr_arr 0100                  __CFG_WRT0$OFF 000000  
                __CFG_WRT1$OFF 000000                  __CFG_WRT2$OFF 000000                  __CFG_WRT3$OFF 000000  
               __CFG_EBTR0$OFF 000000                 __CFG_FCMEN$OFF 000000                 __CFG_EBTR1$OFF 000000  
               __CFG_EBTR2$OFF 000000                 __CFG_EBTR3$OFF 000000             __size_of_UART_Init 005E  
                 get_rx_ch@rch 0013                  __CFG_WRTB$OFF 000000                  __CFG_WRTC$OFF 000000  
                __CFG_WRTD$OFF 000000                 __CFG_EBTRB$OFF 000000                          _count 009D  
      __size_of_EEprom_restore 01CA         modbus_refresh@cmd_type 0016                  ___ftpack@sign 0015  
           _ADC_current_result 008C                          main@i 01CF                          main@y 01D3  
       __end_of_Hold_reg_Inint 1A84                 __CFG_BOREN$OFF 000000                          pclath 000FFA  
                        tablat 000FF5                   _CHANGE_MOTOR 004A              EEPROM_WrByte@bAdd 0012  
                        status 000FD8                __initialization 1578                   ?_modbus_poll 0001  
                 __end_of_main 0C46          __end_of_EEPROM_RdByte 1A72                  modbus_CRC16@i 001B  
        __end_of_EEPROM_WrByte 1940                         ??_main 00AF                  ___fttol@sign1 00A9  
                __activetblptr 000002                 __CFG_PLLCFG$ON 000000                 __CFG_RETEN$OFF 000000  
                 _bd_rate_code 004D                 _refresh_offset 0084              __end_of_GPIO_init 19D6  
                       _ADRESH 000FC4                         _ADRESL 000FC3                         _EEDATA 000F73  
                       _EECON2 000F7E               __end_of___ftpack 16A4                ?_Hold_reg_Inint 0001  
              __CFG_BBSIZ$BB2K 000000                 __CFG_WDTEN$OFF 000000                         i2l2820 005C  
                       i2l2826 007A                         _RCREG1 000FAE               __end_of___lwtoft 1A28  
                       _SPBRG1 000FAF                 __CFG_XINST$OFF 000000                  ??_Timer1_init 0011  
            __end_of_UART_Init 1878                 __CFG_STVREN$ON 000000                      ??___ftdiv 0030  
                    ??___lldiv 0019                      ??___ftmul 0022                      ??___fttol 00A4  
                       _dev_id 004C                      ??___lwdiv 0015                         _answer 0097  
                       _offset 01DD                         clear_0 15D4                         clear_1 15E0  
                       clear_2 15EC                         clear_3 15F8                         clear_4 1604  
                       _rd_ptr 0044                         _rx_buf 0060                         _wr_ptr 0045  
        ___ftmul@f3_as_product 0027                   __pdataCOMRAM 0046                      ?_ADC_Init 0001  
                modbus_reset@i 0011                         tblptrh 000FF7                         tblptrl 000FF6  
                       tblptru 000FF8             EEPROM_WrByte@bData 0011                     __accesstop 0060  
                ?_modbus_CRC16 0011        __end_of__initialization 160A                  ___rparam_used 000001  
                   ___ftdiv@f1 002A                     ___ftdiv@f2 002D                     ___ftdiv@f3 009F  
                   ___ftmul@f1 001C                     ___ftmul@f2 001F                     ___fttol@f1 0033  
               __pcstackCOMRAM 0001                  ?_modbus_reset 0001                   __pidataBANK0 1A9C  
                 __pidataBANK1 1A9F                  ?_modbus_rx_sm 0001        EEPROM_WrByte@GIEBitsVal 0013  
          __end_of_Timer1_init 1A94                     ___lwtoft@c 0019                     _addr_buf_1 0039  
                   _addr_buf_2 0080                     _bd_rate_fl 009C                     ??_ADC_Init 0011  
               _EEprom_restore 0C46             __size_of_get_rx_ch 0038            _turns_percent_press 01F5  
                   __pbssBANK0 0060                     __pbssBANK1 01D9                     __pbssBANK2 0200  
                   __pbssBANK3 0300                 ??_modbus_CRC16 0014                 ??_modbus_reset 0011  
               ??_modbus_rx_sm 001F               ??_modbus_refresh 0014           __size_of_modbus_poll 00BC  
                    ?___ftpack 0011                      ?___lwtoft 0019               __CFG_CANMX$PORTC 000000  
                   _eeprom_buf 0041         __end_of_EEprom_restore 0E10                        _SET_MAX 01E9  
                      _SET_MIN 01EB                        _POT_MAX 0046                        _POT_MIN 0048  
        __end_of_uart_send_hex 1A5E              uart_send_hex@temp 0011                  _reg_addr_flag 009B  
              __CFG_PWRTEN$OFF 000000                        __Hparam 0000             modbus_rhr_answer@i 0020  
           modbus_rhr_answer@j 0021                        __Lparam 0000                    _Timer1_init 1A84  
            __end_of_get_rx_ch 1978                 _TURN_PERCENT_2 008A                        ___ftdiv 13F8  
                      ___lldiv 17A4                        ___ftmul 131C                        ___fttol 123C  
                      ___lwdiv 1878                        __pcinit 1578                     ??___ftpack 0016  
                      __ramtop 0F00                        _crc_buf 0300                        __ptext0 00CA  
                      __ptext1 111A                        __ptext2 18C2                        __ptext3 1940  
                      __ptext4 14BC                        __ptext5 1728                        __ptext6 0FCE  
                      __ptext7 1A4A                        __ptext8 16A4                        __ptext9 1978  
 __size_of_modbus_rx_CRC_check 0044                     ??___lwtoft 001C                        _led_cnt 00BD  
                    _T0CONbits 000FD5                     _read_turns 0088                   __size_of_ISR 00BE  
                    _T1CONbits 000FCD        __size_of_Interrupt_Init 0022                ?_EEprom_restore 0001  
             ??_Hold_reg_Inint 0011              __CFG_MSSPMSK$MSK7 000000                        _rx_byte 0043  
           __CFG_INTOSCSEL$LOW 000000           end_of_initialization 160A                      _GPIO_init 19A8  
                 _get_crc_flag 0098                  __Lmediumconst 0000                  _turns_percent 01F7  
              ___lldiv@divisor 0015                ___lldiv@counter 001D                        postdec1 000FE5  
                      postdec2 000FDD                        postinc0 000FEE                        postinc1 000FE6  
                      postinc2 000FDE                      _UART_Init 181A           __end_of_modbus_CRC16 1728  
                    _PORTBbits 000F81  modbus_rx_CRC_check@modbus_cmd 001E                      _TRISAbits 000F92  
                    _TRISBbits 000F93                      _TRISCbits 000F94           __end_of_modbus_reset 19A8  
            __size_of_ADC_Init 002E                     main@i_1337 01CD                     main@i_1338 01D1  
                   main@i_1339 01D7           __end_of_modbus_rx_sm 123C                     ?_GPIO_init 0001  
       __size_of_EEPROM_RdByte 0014         __size_of_EEPROM_WrByte 003A                    ___ftdiv@exp 00A2  
                  ___ftmul@exp 0025                    _ADC_RES_BUF 01ED                     ?_UART_Init 0001  
                __pidataCOMRAM 1A94            start_initialization 1578                    __end_of_ISR 00C6  
              modbus_CRC16@crc 001C                modbus_CRC16@buf 0011                modbus_CRC16@len 0013  
              modbus_CRC16@pos 001A           modbus_rhr_answer@cnt 0022                 _set_zero_error 0086  
                  __pdataBANK0 00BD                    __pdataBANK1 01FD                  _EEPROM_RdByte 1A5E  
                _EEPROM_WrByte 1906                 _Interrupt_Init 1A28              __size_of___ftpack 008C  
                  __pbssCOMRAM 0037              __size_of___lwtoft 0024                  __pcstackBANK0 009E  
                __pcstackBANK1 0100                _ADC_cutoff_null 008E                _ADC_current_dif 01F1  
              _ADC_current_max 01EF                _ADC_current_min 01FD                _ADC_current_rms 01F3  
                  ??_GPIO_init 0011            _modbus_rx_CRC_check 18C2                      __pnvBANK1 01F9  
                    _main$1934 01CB                      _main$1935 01C8               ___lwdiv@dividend 0011  
                    _id_change 0096                   ?_Timer1_init 0001                  ??_modbus_poll 0023  
        __size_of_modbus_CRC16 0084                      __pintcode 0008                       ?___ftdiv 002A  
                     ?___lldiv 0011                       ?___ftmul 001C                       ?___fttol 0033  
               ?_EEPROM_RdByte 0001                       ?___lwdiv 0011                    ??_UART_Init 0011  
             ??_EEprom_restore 0012                 ?_EEPROM_WrByte 0011         __end_of_Interrupt_Init 1A4A  
         ?_modbus_rx_CRC_check 0001                      _get_rx_ch 1940              _modbus_rhr_answer 0FCE  
        __size_of_modbus_reset 0030                      _grad_step 01E5          __size_of_modbus_rx_sm 0122  
                     _ADC_Init 19D6             ?_modbus_rhr_answer 0001               ___lwdiv@quotient 0015  
                    _regs2read 003B            ??_modbus_rhr_answer 001E                       _GRAD_MAX 01E7  
                 _modbus_CRC16 16A4                       _LATCbits 000F8B                       _PIE1bits 000F9D  
                     _PIR1bits 000F9E                       _GO_nDONE 007E11                       _RCONbits 000FD0  
                 _modbus_reset 1978                   _modbus_rx_sm 111A         __size_of_uart_send_hex 0014  
    __end_of_modbus_rhr_answer 111A          ??_modbus_rx_CRC_check 001E                ?_Interrupt_Init 0001  
                   ?_get_rx_ch 0001            __end_of_modbus_poll 1578                     _ADCON0bits 000FC2  
                   _ADCON1bits 000FC1                     _ADCON2bits 000FC0                   _reg_qty_flag 0099  
             __CFG_SOSCSEL$DIG 000000        __size_of_modbus_refresh 01BE                   _percent_step 01E3  
                  _INTCON2bits 000FF1                    _INTCON3bits 000FF0                      copy_data0 15C2  
            _modbus_wsr_answer 1728             ?_modbus_wsr_answer 0001                     _EECON1bits 000F7F  
                     _V_detect 0090                     _ANCON0bits 000F5D                     _ANCON1bits 000F5C  
                     __Hrparam 0000                       __Lrparam 0000                ??_EEPROM_RdByte 0011  
          ??_modbus_wsr_answer 001E                ??_EEPROM_WrByte 0012               __size_of___ftdiv 00C4  
             __size_of___lldiv 0076               __size_of___ftmul 00DC               __size_of___fttol 00E0  
             __size_of___lwdiv 004A                       ___ftpack 1618               _GRAD_cutoff_null 01DF  
                     ___lwtoft 1A04                    _current_max 01FB                ___lwdiv@divisor 0013  
              ___lwdiv@counter 0017      __end_of_modbus_wsr_answer 17A4                       __ptext10 0E10  
                     __ptext11 1906                       __ptext20 1A28                       __ptext12 1A04  
                     __ptext21 1A72                       __ptext13 1878                     _T1GCONbits 000FAA  
                     __ptext22 19A8                       __ptext14 17A4                       __ptext23 0C46  
                     __ptext15 123C                       __ptext24 181A                       __ptext16 131C  
                     __ptext25 1A5E                       __ptext17 13F8                       __ptext26 19D6  
                     __ptext18 1618                       __ptext19 1A84                  _uart_send_hex 1A4A  
                __size_of_main 0B7C        __size_of_Hold_reg_Inint 0012                       _rd_state 00BF  
             _holding_register 0200                       _temp_buf 003D                       _set_zero 01D9  
                  _modbus_poll 14BC          UART_Init@bd_rate_code 0011                       int$flags 004E  
                  _reg_wr_data 0037                    _reg_wr_flag 009A           __size_of_Timer1_init 0010  
   __size_of_modbus_rhr_answer 014C                    ??_get_rx_ch 0011                     _INTCONbits 000FF2  
               ?_uart_send_hex 0001                _modbus_reg_addr 003F                       intlevel2 0000  
            EEPROM_RdByte@bAdd 0011                   _num_of_turns 01F9               ___lldiv@dividend 0011  
                   _RCSTA1bits 000FAB                 _modbus_refresh 0E10               ___lldiv@quotient 0019  
   __size_of_modbus_wsr_answer 007C            __CFG_BORPWR$ZPBORMV 000000                    _overcurrent 01E1  
