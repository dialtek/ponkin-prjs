CCS PCM C Compiler, Version 4.065, 38112               21-ט‏כ-11 12:36

               Filename: bskt.lst

               ROM used: 227 words (6%)
                         Largest free fragment is 2048
               RAM used: 34 (9%) at main() level
                         34 (9%) worst case
               Stack:    1 worst case (0 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   06B
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  BTFSS  0B.4
001D:  GOTO   020
001E:  BTFSC  0B.1
001F:  GOTO   043
0020:  MOVLW  8C
0021:  MOVWF  04
0022:  BTFSS  00.0
0023:  GOTO   026
0024:  BTFSC  0C.0
0025:  GOTO   045
0026:  MOVLW  8C
0027:  MOVWF  04
0028:  BTFSS  00.1
0029:  GOTO   02C
002A:  BTFSC  0C.1
002B:  GOTO   047
002C:  BTFSS  0B.5
002D:  GOTO   030
002E:  BTFSC  0B.2
002F:  GOTO   049
0030:  MOVF   22,W
0031:  MOVWF  04
0032:  MOVF   23,W
0033:  MOVWF  77
0034:  MOVF   24,W
0035:  MOVWF  78
0036:  MOVF   25,W
0037:  MOVWF  79
0038:  MOVF   26,W
0039:  MOVWF  7A
003A:  MOVF   27,W
003B:  MOVWF  7B
003C:  MOVF   28,W
003D:  MOVWF  0A
003E:  SWAPF  21,W
003F:  MOVWF  03
0040:  SWAPF  7F,F
0041:  SWAPF  7F,W
0042:  RETFIE
0043:  BCF    0A.3
0044:  GOTO   057
0045:  BCF    0A.3
0046:  GOTO   04B
0047:  BCF    0A.3
0048:  GOTO   04F
0049:  BCF    0A.3
004A:  GOTO   053
.................... //#include "C:\PRJ\BSKT-220\bskt.h" 
....................  
.................... #include <16F88.h> 
.................... //////// Standard Header file for the PIC16F88 device //////////////// 
.................... #device PIC16F88 
.................... #list 
....................  
.................... #device *=16 
.................... #device adc=10 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES HS                       //High speed Osc (> 4mhz) 
.................... #FUSES NOPUT                    //No Power Up Timer 
.................... #FUSES MCLR                     //Master Clear pin enabled 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOFCMEN                  //Fail-safe clock monitor disabled 
.................... #FUSES NOIESO                    //Internal External Switch Over mode enabled 
....................  
....................  
.................... //#fuses   HS,NOPROTECT,NOWDT,PUT,NOMCLR,NOBROWNOUT,NOLVP,NOCPD 
....................  
.................... #BYTE portA = 0x05 
.................... #BYTE portB = 0x06 
....................  
.................... #BYTE TRISA = 0x85                
.................... #BYTE TRISB = 0x86 
....................  
.................... #BYTE CMCON = 0x9C 
....................  
.................... #BIT C1INV=CMCON.4 
.................... #BIT C2INV=CMCON.5 
....................  
.................... #BYTE SPBRG = 0x99 
.................... #BYTE TXSTA = 0x98 
.................... #BIT BRGH=TXSTA.2 
....................  
.................... #BIT B0=portB.0 
.................... #BIT B1=portB.1 
.................... #BIT B2=portB.2 
.................... #BIT B3=portB.3 
.................... #BIT B4=portB.4 
.................... #BIT B5=portB.5 
.................... #BIT B6=portB.6 
.................... #BIT B7=portB.7 
....................  
.................... #BIT TRB0=TRISB.0 
.................... #BIT TRB1=TRISB.1 
.................... #BIT TRB2=TRISB.2 
.................... #BIT TRB3=TRISB.3 
.................... #BIT TRB4=TRISB.4 
.................... #BIT TRB5=TRISB.5 
.................... #BIT TRB6=TRISB.6 
.................... #BIT TRB7=TRISB.7 
....................  
.................... #use delay(clock=20000000) 
....................  
.................... #use rs232(UART1,baud=38400,parity=N,xmit=PIN_B5,bits=8) 
....................  
.................... signed int8 x=0; 
*
007F:  BCF    03.5
0080:  CLRF   29
.................... int1 fl1=0,fl2=0; 
0081:  BCF    2A.0
0082:  BCF    2A.1
.................... unsigned int8 phase=0,buf,buf1=0,buf2=0,buf3=0;  
0083:  CLRF   2B
0084:  CLRF   2D
0085:  CLRF   2E
0086:  CLRF   2F
.................... unsigned int16 angle=0,buf4=0,buf5=0; 
0087:  CLRF   30
0088:  CLRF   31
0089:  CLRF   32
008A:  CLRF   33
008B:  CLRF   34
008C:  CLRF   35
.................... //int16 turns=0; 
.................... signed int16 turn_counter=0,sum1=0; 
008D:  CLRF   36
008E:  CLRF   37
008F:  CLRF   38
0090:  CLRF   39
.................... signed int16 counter=0; 
0091:  CLRF   3A
0092:  CLRF   3B
.................... #int_TIMER1 
.................... void  TIMER1_isr(void)  
.................... { 
.................... clear_interrupt(int_timer1); 
*
004B:  BCF    0C.0
.................... } 
....................  
004C:  BCF    0C.0
004D:  BCF    0A.3
004E:  GOTO   030
.................... #int_TIMER2 
.................... void  TIMER2_isr(void) { 
....................  
.................... clear_interrupt(int_timer2); 
004F:  BCF    0C.1
.................... } 
....................  
0050:  BCF    0C.1
0051:  BCF    0A.3
0052:  GOTO   030
.................... #int_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
.................... clear_interrupt(int_timer0); 
0053:  BCF    0B.2
.................... } 
....................  
....................  
....................  
....................  
0054:  BCF    0B.2
0055:  BCF    0A.3
0056:  GOTO   030
.................... #int_EXT 
.................... void ExtInt(void) 
.................... { 
....................  
....................  if (B1) { 
0057:  BTFSS  06.1
0058:  GOTO   05F
....................  B4=0; 
0059:  BCF    06.4
....................  counter --; 
005A:  MOVF   3A,W
005B:  BTFSC  03.2
005C:  DECF   3B,F
005D:  DECF   3A,F
....................  } 
....................  else { 
005E:  GOTO   063
....................        B4=1; 
005F:  BSF    06.4
....................  counter ++;      
0060:  INCF   3A,F
0061:  BTFSC  03.2
0062:  INCF   3B,F
....................  } 
.................... delay_us(50); 
0063:  MOVLW  53
0064:  MOVWF  77
0065:  DECFSZ 77,F
0066:  GOTO   065
.................... clear_interrupt(INT_EXT); 
0067:  BCF    0B.1
....................  
.................... } 
....................  
....................  
....................  
0068:  BCF    0B.1
0069:  BCF    0A.3
006A:  GOTO   030
.................... void main() 
.................... { 
006B:  CLRF   04
006C:  BCF    03.7
006D:  MOVLW  1F
006E:  ANDWF  03,F
006F:  MOVLW  20
0070:  BSF    03.5
0071:  MOVWF  19
0072:  MOVLW  A6
0073:  MOVWF  18
0074:  MOVLW  90
0075:  BCF    03.5
0076:  MOVWF  18
0077:  BSF    03.5
0078:  BCF    1F.4
0079:  BCF    1F.5
007A:  MOVF   1B,W
007B:  ANDLW  80
007C:  MOVWF  1B
007D:  MOVLW  07
007E:  MOVWF  1C
....................   
....................     
....................    setup_adc_ports(NO_ANALOGS|VSS_VDD); 
*
0093:  BSF    03.5
0094:  BCF    1F.4
0095:  BCF    1F.5
0096:  MOVF   1B,W
0097:  ANDLW  80
0098:  MOVWF  1B
....................    setup_adc(ADC_OFF); 
0099:  BCF    03.5
009A:  BCF    1F.0
....................    setup_spi(SPI_SS_DISABLED); 
009B:  BCF    14.5
009C:  BSF    03.5
009D:  BCF    06.2
009E:  BSF    06.1
009F:  BCF    06.4
00A0:  MOVLW  01
00A1:  BCF    03.5
00A2:  MOVWF  14
00A3:  MOVLW  00
00A4:  BSF    03.5
00A5:  MOVWF  14
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
00A6:  MOVF   01,W
00A7:  ANDLW  C7
00A8:  IORLW  08
00A9:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_2); 
00AA:  MOVLW  95
00AB:  BCF    03.5
00AC:  MOVWF  10
....................    setup_timer_2(T2_DIV_BY_16,89,1); 
00AD:  MOVLW  00
00AE:  MOVWF  78
00AF:  IORLW  06
00B0:  MOVWF  12
00B1:  MOVLW  59
00B2:  BSF    03.5
00B3:  MOVWF  12
....................    setup_timer_1(T1_disabled); 
00B4:  BCF    03.5
00B5:  CLRF   10
....................   // setup_timer_2(T2_disabled); 
....................   // setup_comparator(A0_A2_A1_A2_OUT_ON_A3_A4); 
....................   // setup_comparator(NC_NC_NC_NC); 
....................    //setup_vref(VREF_LOW|13|VREF_A2);//0.5Ucc םא RA2 
....................    //setup_ccp1 (CCP_CAPTURE_FE);  
....................    enable_interrupts(INT_EXT); 
00B6:  BSF    0B.4
....................    ext_int_edge(L_To_H); 
00B7:  BSF    03.5
00B8:  BSF    01.6
....................   // enable_interrupts(INT_TIMER1); 
....................   // enable_interrupts(INT_TIMER2); 
....................    //enable_interrupts(INT_CCP1); 
....................    //enable_interrupts(INT_TIMER0); 
....................    //disable_interrupts(INT_TIMER0); 
....................    enable_interrupts(GLOBAL); 
00B9:  MOVLW  C0
00BA:  BCF    03.5
00BB:  IORWF  0B,F
....................     
....................  
....................    // TODO: USER CODE!! 
....................     
....................    TRB0=1; 
00BC:  BSF    03.5
00BD:  BSF    06.0
....................    TRB1=1; 
00BE:  BSF    06.1
....................    TRB3=0; 
00BF:  BCF    06.3
....................    TRB4=0; 
00C0:  BCF    06.4
....................    B1=0; 
00C1:  BCF    03.5
00C2:  BCF    06.1
....................    B3=0; 
00C3:  BCF    06.3
.................... while(true){ 
....................  
....................   
....................   
....................  if(counter < 0) { 
00C4:  BTFSS  3B.7
00C5:  GOTO   0D0
....................     counter=9; 
00C6:  CLRF   3B
00C7:  MOVLW  09
00C8:  MOVWF  3A
....................     B3=1; 
00C9:  BSF    06.3
....................     delay_us(50); 
00CA:  MOVLW  53
00CB:  MOVWF  77
00CC:  DECFSZ 77,F
00CD:  GOTO   0CC
....................     B3=0; 
00CE:  BCF    06.3
....................      }else if(counter > 9){ 
00CF:  GOTO   0E1
00D0:  BTFSC  3B.7
00D1:  GOTO   0E1
00D2:  MOVF   3B,F
00D3:  BTFSS  03.2
00D4:  GOTO   0D9
00D5:  MOVF   3A,W
00D6:  SUBLW  09
00D7:  BTFSC  03.0
00D8:  GOTO   0E1
....................     counter=0; 
00D9:  CLRF   3B
00DA:  CLRF   3A
....................     B3=1; 
00DB:  BSF    06.3
....................     delay_us(50); 
00DC:  MOVLW  53
00DD:  MOVWF  77
00DE:  DECFSZ 77,F
00DF:  GOTO   0DE
....................     B3=0; 
00E0:  BCF    06.3
....................  } 
....................  } 
00E1:  GOTO   0C4
....................  } 
....................  
....................  
....................  
....................  
00E2:  SLEEP

Configuration Fuses:
   Word  1: 3F2A   HS NOWDT NOPUT MCLR NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG CCPB0 NOPROTECT
   Word  2: 3FFC   NOFCMEN NOIESO
