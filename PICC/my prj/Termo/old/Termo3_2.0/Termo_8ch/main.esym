D G "__PCD__" 0 0 ""5.019""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""10-май-15""
D G "__TIME__" 0 0 ""11:58:56"" "#include <24HJ128GP506.h>"
c L "set_tris_b" 2 1 6 "FUNCTION"
v L "value" 2 47 "int16" `53 
f B "set_tris_b" 2 47 "void(int16 value)" `52 
v L "value" 2 48 "int16" `55 
f B "set_tris_c" 2 48 "void(int16 value)" `54 
v L "value" 2 49 "int16" `57 
f B "set_tris_d" 2 49 "void(int16 value)" `56 
v L "value" 2 50 "int16" `59 
f B "set_tris_f" 2 50 "void(int16 value)" `58 
v L "value" 2 51 "int16" `61 
f B "set_tris_g" 2 51 "void(int16 value)" `60 
f B "get_tris_b" 2 52 "int16()" `62 
f B "get_tris_c" 2 53 "int16()" `63 
f B "get_tris_d" 2 54 "int16()" `64 
f B "get_tris_f" 2 55 "int16()" `65 
f B "get_tris_g" 2 56 "int16()" `66 
v L "value" 2 57 "int16" `68 
f B "output_b" 2 57 "void(int16 value)" `67 
v L "value" 2 58 "int16" `70 
f B "output_c" 2 58 "void(int16 value)" `69 
v L "value" 2 59 "int16" `72 
f B "output_d" 2 59 "void(int16 value)" `71 
v L "value" 2 60 "int16" `74 
f B "output_f" 2 60 "void(int16 value)" `73 
v L "value" 2 61 "int16" `76 
f B "output_g" 2 61 "void(int16 value)" `75 
f B "input_b" 2 62 "int16()" `77 
f B "input_c" 2 63 "int16()" `78 
f B "input_d" 2 64 "int16()" `79 
f B "input_f" 2 65 "int16()" `80 
f B "input_g" 2 66 "int16()" `81 
f B "input_change_b" 2 67 "int8()" `82 
f B "input_change_c" 2 68 "int8()" `83 
f B "input_change_d" 2 69 "int8()" `84 
f B "input_change_f" 2 70 "int8()" `85 
f B "input_change_g" 2 71 "int8()" `86 
v L "state" 2 72 "int8" `88 
f B "set_pullup" 2 72 "void(int8 state)" `87 
v L "state" 2 73 "int8" `90 
v L "pin" 2 73 "int16" `91 
f G "set_pullup" 2 73 "void(int8 state,int16 pin)" `89 
v L "state" 2 74 "int8" `93 
f B "set_pulldown" 2 74 "void(int8 state)" `92 
v L "state" 2 75 "int8" `95 
v L "pin" 2 75 "int16" `96 
f G "set_pulldown" 2 75 "void(int8 state,int16 pin)" `94 
v L "pin" 2 76 "int16" `98 
f B "input" 2 76 "int8(int16 pin)" `97 
v L "pin" 2 77 "int16" `100 
f B "input_state" 2 77 "int8(int16 pin)" `99 
v L "pin" 2 78 "int16" `102 
f B "output_low" 2 78 "void(int16 pin)" `101 
v L "pin" 2 79 "int16" `104 
f B "output_high" 2 79 "void(int16 pin)" `103 
v L "pin" 2 80 "int16" `106 
f B "output_toggle" 2 80 "void(int16 pin)" `105 
v L "pin" 2 81 "int16" `108 
v L "level" 2 81 "int8" `109 
f B "output_bit" 2 81 "void(int16 pin,int8 level)" `107 
v L "pin" 2 82 "int16" `111 
f B "output_float" 2 82 "void(int16 pin)" `110 
v L "pin" 2 83 "int16" `113 
f B "output_drive" 2 83 "void(int16 pin)" `112  "Constants used to identify pins in the above are:"
d G "PIN_B0" 2 86 "5696"
d G "PIN_B1" 2 87 "5697"
d G "PIN_B2" 2 88 "5698"
d G "PIN_B3" 2 89 "5699"
d G "PIN_B4" 2 90 "5700"
d G "PIN_B5" 2 91 "5701"
d G "PIN_B6" 2 92 "5702"
d G "PIN_B7" 2 93 "5703"
d G "PIN_B8" 2 94 "5704"
d G "PIN_B9" 2 95 "5705"
d G "PIN_B10" 2 96 "5706"
d G "PIN_B11" 2 97 "5707"
d G "PIN_B12" 2 98 "5708"
d G "PIN_B13" 2 99 "5709"
d G "PIN_B14" 2 100 "5710"
d G "PIN_B15" 2 101 "5711"
d G "PIN_C1" 2 103 "5745"
d G "PIN_C2" 2 104 "5746"
d G "PIN_C12" 2 105 "5756"
d G "PIN_C13" 2 106 "5757"
d G "PIN_C14" 2 107 "5758"
d G "PIN_C15" 2 108 "5759"
d G "PIN_D0" 2 110 "5792"
d G "PIN_D1" 2 111 "5793"
d G "PIN_D2" 2 112 "5794"
d G "PIN_D3" 2 113 "5795"
d G "PIN_D4" 2 114 "5796"
d G "PIN_D5" 2 115 "5797"
d G "PIN_D6" 2 116 "5798"
d G "PIN_D7" 2 117 "5799"
d G "PIN_D8" 2 118 "5800"
d G "PIN_D9" 2 119 "5801"
d G "PIN_D10" 2 120 "5802"
d G "PIN_D11" 2 121 "5803"
d G "PIN_F0" 2 123 "5888"
d G "PIN_F1" 2 124 "5889"
d G "PIN_F2" 2 125 "5890"
d G "PIN_F3" 2 126 "5891"
d G "PIN_F4" 2 127 "5892"
d G "PIN_F5" 2 128 "5893"
d G "PIN_F6" 2 129 "5894"
d G "PIN_G0" 2 131 "5936"
d G "PIN_G1" 2 132 "5937"
d G "PIN_G2" 2 133 "5938"
d G "PIN_G3" 2 134 "5939"
d G "PIN_G6" 2 135 "5942"
d G "PIN_G7" 2 136 "5943"
d G "PIN_G8" 2 137 "5944"
d G "PIN_G9" 2 138 "5945"
d G "PIN_G12" 2 139 "5948"
d G "PIN_G13" 2 140 "5949"
d G "PIN_G14" 2 141 "5950"
d G "PIN_G15" 2 142 "5951"
d G "FALSE" 2 145 "0"
d G "TRUE" 2 146 "1"
d G "BYTE" 2 148 "unsigned int8"
d G "BOOLEAN" 2 149 "int1"
d G "getc" 2 151 "getch"
d G "fgetc" 2 152 "getch"
d G "getchar" 2 153 "getch"
d G "putc" 2 154 "putchar"
d G "fputc" 2 155 "putchar"
d G "fgets" 2 156 "gets"
d G "fputs" 2 157 "puts"
c L "output_drive" 2 1 2 "FUNCTION"
v L "baud" 2 161 "int32" `115 
f B "setup_uart" 2 161 "void(int32 baud)" `114 
v L "baud" 2 162 "int32" `117 
v L "stream" 2 162 "int8" `118 
f G "setup_uart" 2 162 "void(int32 baud,int8 stream)" `116 
v L "baud" 2 163 "int32" `120 
v L "stream" 2 163 "int8" `121 
v L "clock" 2 163 "int32" `122 
f G "setup_uart" 2 163 "void(int32 baud,int8 stream,int32 clock)" `119 
v L "baud" 2 164 "int32" `124 
f B "set_uart_speed" 2 164 "void(int32 baud)" `123 
v L "baud" 2 165 "int32" `126 
v L "stream" 2 165 "int8" `127 
f G "set_uart_speed" 2 165 "void(int32 baud,int8 stream)" `125 
v L "baud" 2 166 "int32" `129 
v L "stream" 2 166 "int8" `130 
v L "clock" 2 166 "int32" `131 
f G "set_uart_speed" 2 166 "void(int32 baud,int8 stream,int32 clock)" `128  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 170 "2"
d G "UART_DATA" 2 171 "4"
d G "UART_AUTODETECT" 2 172 "8"
d G "UART_AUTODETECT_NOWAIT" 2 173 "9"
d G "UART_WAKEUP_ON_RDA" 2 174 "10"
d G "UART_SEND_BREAK" 2 175 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 180 "int8" `133 
f B "setup_wdt" 2 180 "void(int8 mode)" `132 
f B "restart_wdt" 2 181 "void()" `134  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 183 "1"
d G "WDT_OFF" 2 184 "0"
d G "WDT_1MS" 2 186 "0x002"
d G "WDT_2MS" 2 187 "0x003"
d G "WDT_4MS" 2 188 "0x004"
d G "WDT_8MS" 2 189 "0x005"
d G "WDT_16MS" 2 190 "0x006"
d G "WDT_32MS" 2 191 "0x007"
d G "WDT_64MS" 2 192 "0x008"
d G "WDT_128MS" 2 193 "0x009"
d G "WDT_256MS" 2 194 "0x00A"
d G "WDT_512MS" 2 195 "0x00B"
d G "WDT_1S" 2 196 "0x00C"
d G "WDT_2S" 2 197 "0x00D"
d G "WDT_4S" 2 198 "0x00E"
d G "WDT_8S" 2 199 "0x00F"
d G "WDT_16S" 2 200 "0x010"
d G "WDT_33S" 2 201 "0x011"
d G "WDT_65S" 2 202 "0x030"
d G "WDT_131S" 2 203 "0x031"
c L "restart_wdt" 2 1 3 "FUNCTION"
f B "restart_cause" 2 208 "int8()" `135 
f B "reset_cpu" 2 209 "void()" `136 
f B "sleep" 2 210 "void()" `137 
v L "mode" 2 211 "int8" `139 
f G "sleep" 2 211 "void(int8 mode)" `138  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 213 "0"
d G "RESTART_BROWNOUT" 2 214 "1"
d G "RESTART_WATCHDOG" 2 215 "4"
d G "RESTART_SOFTWARE" 2 216 "6"
d G "RESTART_MCLR" 2 217 "7"
d G "RESTART_ILLEGAL_OP" 2 218 "14"
d G "RESTART_TRAP_CONFLICT" 2 219 "15"
d G "SLEEP_FULL" 2 222 "0" "Default"
d G "SLEEP_IDLE" 2 223 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 2 "FUNCTION"
v L "type" 2 227 "int8" `141 
v L "target" 2 227 "int32" `142 
f B "setup_oscillator" 2 227 "void(int8 type,int32 target)" `140 
v L "type" 2 228 "int8" `144 
v L "target" 2 228 "int32" `145 
v L "source" 2 228 "int32" `146 
f G "setup_oscillator" 2 228 "void(int8 type,int32 target,int32 source)" `143  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 230 "32"
d G "OSC_CRYSTAL" 2 231 "1"
d G "OSC_CLOCK" 2 232 "2"
d G "OSC_RC" 2 233 "3"
d G "OSC_SECONDARY" 2 234 "16"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 240 "int16" `148 
f B "setup_timer1" 2 240 "void(int16 mode)" `147 
v L "mode" 2 241 "int16" `150 
v L "period" 2 241 "int16" `151 
f G "setup_timer1" 2 241 "void(int16 mode,int16 period)" `149 
f B "get_timer1" 2 242 "int16()" `152 
v L "value" 2 243 "int16" `154 
f B "set_timer1" 2 243 "void(int16 value)" `153 
v L "mode" 2 244 "int16" `156 
f B "setup_timer2" 2 244 "void(int16 mode)" `155 
v L "mode" 2 245 "int16" `158 
v L "period" 2 245 "int16" `159 
f G "setup_timer2" 2 245 "void(int16 mode,int16 period)" `157 
f B "get_timer2" 2 246 "int16()" `160 
v L "value" 2 247 "int16" `162 
f B "set_timer2" 2 247 "void(int16 value)" `161 
v L "mode" 2 248 "int16" `164 
f B "setup_timer3" 2 248 "void(int16 mode)" `163 
v L "mode" 2 249 "int16" `166 
v L "period" 2 249 "int16" `167 
f G "setup_timer3" 2 249 "void(int16 mode,int16 period)" `165 
f B "get_timer3" 2 250 "int16()" `168 
v L "value" 2 251 "int16" `170 
f B "set_timer3" 2 251 "void(int16 value)" `169 
f B "get_timer23" 2 252 "int32()" `171 
v L "value" 2 253 "int32" `173 
f B "set_timer23" 2 253 "void(int32 value)" `172 
v L "mode" 2 254 "int16" `175 
f B "setup_timer4" 2 254 "void(int16 mode)" `174 
v L "mode" 2 255 "int16" `177 
v L "period" 2 255 "int16" `178 
f G "setup_timer4" 2 255 "void(int16 mode,int16 period)" `176 
f B "get_timer4" 2 256 "int16()" `179 
v L "value" 2 257 "int16" `181 
f B "set_timer4" 2 257 "void(int16 value)" `180 
v L "mode" 2 258 "int16" `183 
f B "setup_timer5" 2 258 "void(int16 mode)" `182 
v L "mode" 2 259 "int16" `185 
v L "period" 2 259 "int16" `186 
f G "setup_timer5" 2 259 "void(int16 mode,int16 period)" `184 
f B "get_timer5" 2 260 "int16()" `187 
v L "value" 2 261 "int16" `189 
f B "set_timer5" 2 261 "void(int16 value)" `188 
f B "get_timer45" 2 262 "int32()" `190 
v L "value" 2 263 "int32" `192 
f B "set_timer45" 2 263 "void(int32 value)" `191 
v L "mode" 2 264 "int16" `194 
f B "setup_timer6" 2 264 "void(int16 mode)" `193 
v L "mode" 2 265 "int16" `196 
v L "period" 2 265 "int16" `197 
f G "setup_timer6" 2 265 "void(int16 mode,int16 period)" `195 
f B "get_timer6" 2 266 "int16()" `198 
v L "value" 2 267 "int16" `200 
f B "set_timer6" 2 267 "void(int16 value)" `199 
v L "mode" 2 268 "int16" `202 
f B "setup_timer7" 2 268 "void(int16 mode)" `201 
v L "mode" 2 269 "int16" `204 
v L "period" 2 269 "int16" `205 
f G "setup_timer7" 2 269 "void(int16 mode,int16 period)" `203 
f B "get_timer7" 2 270 "int16()" `206 
v L "value" 2 271 "int16" `208 
f B "set_timer7" 2 271 "void(int16 value)" `207 
f B "get_timer67" 2 272 "int32()" `209 
v L "value" 2 273 "int32" `211 
f B "set_timer67" 2 273 "void(int32 value)" `210  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 276 "0x0000"
d G "TMR_INTERNAL" 2 277 "0x8000"
d G "TMR_EXTERNAL" 2 278 "0x8002"
d G "TMR_GATE" 2 279 "0x0040"
d G "TMR_DIV_BY_1" 2 281 "0x0000"
d G "TMR_DIV_BY_8" 2 282 "0x0010"
d G "TMR_DIV_BY_64" 2 283 "0x0020"
d G "TMR_DIV_BY_256" 2 284 "0x0030"
d G "TMR_32_BIT" 2 285 "0x0008" "Only for even numbered timers"
d G "TMR_HALT_IDLE" 2 287 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 288 "0x0000"
d G "T1_EXTERNAL_SYNC" 2 290 "0x8006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 2 291 "0xC002" "This only applies to Timer1"
c L "set_timer67" 2 1 3 "FUNCTION"
v L "module" 2 295 "int8" `213 
v L "mode" 2 295 "int16" `214 
f B "setup_capture" 2 295 "void(int8 module,int16 mode)" `212 
v L "module" 2 296 "int8" `216 
f B "get_capture" 2 296 "int16(int8 module)" `215 
v L "module" 2 297 "int8" `218 
v L "wait" 2 297 "int8" `219 
f G "get_capture" 2 297 "int16(int8 module,int8 wait)" `217  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 299 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 300 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 301 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 302 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 303 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 304 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 305 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 308 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 309 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 310 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 311 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 2 314 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 2 315 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 2 318 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 319 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 1 3 "FUNCTION"
v L "module" 2 324 "int8" `221 
v L "mode" 2 324 "int16" `222 
f B "setup_compare" 2 324 "void(int8 module,int16 mode)" `220 
v L "module" 2 325 "int8" `224 
v L "duty" 2 325 "int16" `225 
f B "set_pwm_duty" 2 325 "void(int8 module,int16 duty)" `223 
v L "module" 2 326 "int8" `227 
v L "ocr" 2 326 "int16" `228 
f B "set_compare_time" 2 326 "void(int8 module,int16 ocr)" `226 
v L "module" 2 327 "int8" `230 
v L "ocr" 2 327 "int16" `231 
v L "ocrs" 2 327 "int16" `232 
f G "set_compare_time" 2 327 "void(int8 module,int16 ocr,int16 ocrs)" `229  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 329 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 330 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 331 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 2 332 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 333 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 334 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 2 335 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 2 336 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 2 339 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 2 340 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 2 343 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 2 344 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 1 3 "FUNCTION"
v L "mode" 2 349 "int16" `234 
f B "setup_spi" 2 349 "void(int16 mode)" `233 
v L "data" 2 350 "int8" `236 
f B "spi_write" 2 350 "void(int8 data)" `235 
f B "spi_read" 2 351 "int8()" `237 
v L "data" 2 352 "int8" `239 
f G "spi_read" 2 352 "int8(int8 data)" `238 
f B "spi_data_in" 2 353 "int8()" `240 
v L "mode" 2 354 "int16" `242 
f B "setup_spi2" 2 354 "void(int16 mode)" `241 
v L "data" 2 355 "int8" `244 
f B "spi_write2" 2 355 "void(int8 data)" `243 
f B "spi_read2" 2 356 "int8()" `245 
v L "data" 2 357 "int8" `247 
f G "spi_read2" 2 357 "int8(int8 data)" `246 
f B "spi_data_in2" 2 358 "int8()" `248  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 361 "0x0020"
d G "SPI_SLAVE" 2 362 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 364 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 365 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 367 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 368 "0x0000"
d G "SPI_MODE_16B" 2 370 "0x0400"
d G "SPI_MODE_8B" 2 371 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 373 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 374 "0x0000"
d G "SPI_SS_ENABLED" 2 376 "0x0000"
d G "SPI_SS_DISABLED" 2 377 "0x0080"
d G "SPI_CLK_DIV_1" 2 380 "0x001F"
d G "SPI_CLK_DIV_2" 2 381 "0x001B"
d G "SPI_CLK_DIV_3" 2 382 "0x0017"
d G "SPI_CLK_DIV_4" 2 383 "0x001E"
d G "SPI_CLK_DIV_5" 2 384 "0x000F"
d G "SPI_CLK_DIV_6" 2 385 "0x000B"
d G "SPI_CLK_DIV_7" 2 386 "0x0007"
d G "SPI_CLK_DIV_8" 2 387 "0x0003"
d G "SPI_CLK_DIV_12" 2 388 "0x0016"
d G "SPI_CLK_DIV_16" 2 389 "0x001D"
d G "SPI_CLK_DIV_20" 2 390 "0x000E"
d G "SPI_CLK_DIV_24" 2 391 "0x000A"
d G "SPI_CLK_DIV_28" 2 392 "0x0006"
d G "SPI_CLK_DIV_32" 2 393 "0x0002"
d G "SPI_CLK_DIV_48" 2 394 "0x0015"
d G "SPI_CLK_DIV_64" 2 395 "0x001C"
d G "SPI_CLK_DIV_80" 2 396 "0x000D"
d G "SPI_CLK_DIV_96" 2 397 "0x0009"
d G "SPI_CLK_DIV_112" 2 398 "0x0005"
d G "SPI_CLK_DIV_128" 2 399 "0x0001"
d G "SPI_CLK_DIV_192" 2 400 "0x0014"
d G "SPI_CLK_DIV_256" 2 401 "0x0010"
d G "SPI_CLK_DIV_320" 2 402 "0x000C"
d G "SPI_CLK_DIV_384" 2 403 "0x0008"
d G "SPI_CLK_DIV_448" 2 404 "0x0004"
d G "SPI_CLK_DIV_512" 2 405 "0x0000"
d G "SPI_L_TO_H" 2 408 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 409 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 4 "FUNCTION"
v L "mode" 2 415 "int32" `250 
f B "setup_adc" 2 415 "void(int32 mode)" `249 
v L "pins" 2 416 "int32" `252 
f B "setup_adc_ports" 2 416 "void(int32 pins)" `251 
v L "pins" 2 417 "int32" `254 
v L "reference" 2 417 "int16" `255 
f G "setup_adc_ports" 2 417 "void(int32 pins,int16 reference)" `253 
v L "??65535" 2 418 "int8" `257 
f B "set_adc_channel" 2 418 "void(int8 )" `256 
f B "read_adc" 2 419 "int16()" `258 
v L "mode" 2 420 "int8" `260 
f G "read_adc" 2 420 "int16(int8 mode)" `259 
f B "adc_done" 2 421 "int8()" `261  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 425 "0x10000"
d G "ADC_CLOCK" 2 426 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 427 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 428 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 429 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 430 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 431 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 432 "0x003F"
d G "ADC_CLOCK_INTERNAL" 2 433 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 2 437 "0x1F00"
d G "ADC_TAD_MUL_2" 2 438 "0x1D00"
d G "ADC_TAD_MUL_4" 2 439 "0x1B00"
d G "ADC_TAD_MUL_8" 2 440 "0x1700"
d G "ADC_TAD_MUL_16" 2 441 "0x0F00"
d G "ADC_TAD_MUL_31" 2 442 "0x0000"
d G "ADC_START_AND_READ" 2 445 "0x07"
d G "ADC_START_ONLY" 2 446 "0x01"
d G "ADC_READ_ONLY" 2 447 "0x06"
d G "NO_ANALOGS" 2 452 "0" "None"
d G "ALL_ANALOG" 2 453 "0xFFFFFFFF" "All"
d G "sAN0" 2 454 "0x00000001" "| B0"
d G "sAN1" 2 455 "0x00000002" "| B1"
d G "sAN2" 2 456 "0x00000004" "| B2"
d G "sAN3" 2 457 "0x00000008" "| B3"
d G "sAN4" 2 458 "0x00000010" "| B4"
d G "sAN5" 2 459 "0x00000020" "| B5"
d G "sAN6" 2 460 "0x00000040" "| B6"
d G "sAN7" 2 461 "0x00000080" "| B7"
d G "sAN8" 2 462 "0x00000100" "| B8"
d G "sAN9" 2 463 "0x00000200" "| B9"
d G "sAN10" 2 464 "0x00000400" "| B10"
d G "sAN11" 2 465 "0x00000800" "| B11"
d G "sAN12" 2 466 "0x00001000" "| B12"
d G "sAN13" 2 467 "0x00002000" "| B13"
d G "sAN14" 2 468 "0x00004000" "| B14"
d G "sAN15" 2 469 "0x00008000" "| B15"
d G "sAN16" 2 470 "0x00010000" "| C1"
d G "sAN17" 2 471 "0x00020000" "| C2"
d G "VSS_VDD" 2 474 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 475 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 476 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 477 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 1 3 "FUNCTION"
v L "channel" 2 482 "int8" `263 
v L "pheripheral" 2 482 "int32" `264 
v L "mode" 2 482 "int8" `265 
f B "setup_dma" 2 482 "void(int8 channel,int32 pheripheral,int8 mode)" `262 
v L "channel" 2 483 "int8" `267 
v L "mode" 2 483 "int16" `268 
v L "addressa" 2 483 "int16" `269 
f B "dma_start" 2 483 "void(int8 channel,int16 mode,int16 addressa)" `266 
v L "channel" 2 484 "int8" `271 
v L "mode" 2 484 "int16" `272 
v L "addressa" 2 484 "int16" `273 
v L "count" 2 484 "int16" `274 
f G "dma_start" 2 484 "void(int8 channel,int16 mode,int16 addressa,int16 count)" `270 
v L "channel" 2 485 "int8" `271 
v L "mode" 2 485 "int16" `272 
v L "addressa" 2 485 "int16" `273 
v L "addressb" 2 485 "int16" `279 
f G "dma_start" 2 485 "void(int8 channel,int16 mode,int16 addressa,int16 addressb)" `275 
v L "channel" 2 486 "int8" `281 
v L "mode" 2 486 "int16" `282 
v L "addressa" 2 486 "int16" `283 
v L "addressb" 2 486 "int16" `284 
v L "count" 2 486 "int16" `285 
f G "dma_start" 2 486 "void(int8 channel,int16 mode,int16 addressa,int16 addressb,int16 count)" `280 
v L "channel" 2 487 "int8" `287 
f B "dma_status" 2 487 "int8(int8 channel)" `286  "Constants used in setup_dma() second param are:"
d G "DMA_IN_SPI1" 2 489 " (0x0A0000|getenv("sfr:SPI1BUF"))"
d G "DMA_OUT_SPI1" 2 490 " (0x8A0000|getenv("sfr:SPI1BUF"))"
d G "DMA_IN_SPI2" 2 491 " (0x210000|getenv("sfr:SPI2BUF"))"
d G "DMA_OUT_SPI2" 2 492 " (0xA10000|getenv("sfr:SPI2BUF"))"
d G "DMA_IN_UART1" 2 493 " (0x0B0000|getenv("sfr:U1RXREG"))"
d G "DMA_OUT_UART1" 2 494 " (0x8C0000|getenv("sfr:U1TXREG"))"
d G "DMA_IN_UART2" 2 495 " (0x1E0000|getenv("sfr:U2RXREG"))"
d G "DMA_OUT_UART2" 2 496 " (0x9F0000|getenv("sfr:U2TXREG"))"
d G "DMA_IN_ADC1" 2 497 " (0x0D0000|getenv("sfr:ADC1BUF0"))"
d G "DMA_IN_ECAN1" 2 498 " (0x220000|getenv("sfr:C1RXD"))"
d G "DMA_OUT_ECAN1" 2 499 " (0xC60000|getenv("sfr:C1TXD"))"
d G "DMA_INT0" 2 500 "0x000000" "or in direction and perif address"
d G "DMA_IC1" 2 501 "0x010000" "or in direction and perif address"
d G "DMA_IC2" 2 502 "0x050000" "or in direction and perif address"
d G "DMA_OC1" 2 503 "0x020000" "or in direction and perif address"
d G "DMA_OC2" 2 504 "0x060000" "or in direction and perif address"
d G "DMA_TIMER2" 2 505 "0x070000" "or in direction and perif address"
d G "DMA_TIMER3" 2 506 "0x080000" "or in direction and perif address"
d G "DMA_IN" 2 507 "0x00"
d G "DMA_OUT" 2 508 "0x800000"
d G "DMA_BYTE" 2 510 "0x40"
d G "DMA_WORD" 2 511 "0x00" "default"
d G "DMA_HALF_INT" 2 512 "0x10" "interrupt when half full"
d G "DMA_WRITE_NULL" 2 513 "0x08"
d G "DMA_CONTINOUS" 2 515 "0x00"
d G "DMA_ONE_SHOT" 2 516 "0x01"
d G "DMA_PING_PONG" 2 517 "0x02"
d G "DMA_NO_INC" 2 518 "0x10"
d G "DMA_PERIF_ADDR" 2 519 "0x20" "Device supplies address"
d G "DMA_FORCE_NOW" 2 520 "0x100"
d G "DMA_IN_ERROR" 2 522 "0x01"
d G "DMA_OUT_ERROR" 2 523 "0x02"
d G "DMA_B_SELECT" 2 524 "0x04"
c L "dma_status" 2 1 3 "FUNCTION"
v L "x" 2 530 "sint8" `289 
f B "abs" 2 530 "sint8(sint8 x)" `288 
v L "x" 2 531 "sint16" `291 
f G "abs" 2 531 "sint16(sint16 x)" `290 
v L "x" 2 532 "sint32" `293 
f G "abs" 2 532 "sint32(sint32 x)" `292 
v L "x" 2 533 "float" `295 
f G "abs" 2 533 "float(float x)" `294 
v L "??65535" 2 534 "int8" `297 
v L "??65535" 2 534 "int8" `298 
f B "_mul" 2 534 "int16(int8 ,int8 )" `296 
v L "??65535" 2 535 "sint8" `297 
v L "??65535" 2 535 "sint8" `301 
f G "_mul" 2 535 "sint16(sint8 ,sint8 )" `299 
v L "??65535" 2 536 "int16" `297 
v L "??65535" 2 536 "int16" `304 
f G "_mul" 2 536 "int32(int16 ,int16 )" `302 
v L "??65535" 2 537 "sint16" `297 
v L "??65535" 2 537 "sint16" `307 
f G "_mul" 2 537 "sint32(sint16 ,sint16 )" `305 
v L "x" 2 538 "?" `309 
f G "abs" 2 538 "?(? x)" `308 
v L "x" 2 539 "?" `311 
f G "abs" 2 539 "?(? x)" `310 
v L "x" 2 540 "?" `313 
f G "abs" 2 540 "?(? x)" `312 
v L "x" 2 541 "?" `315 
f G "abs" 2 541 "?(? x)" `314 
v L "??65535" 2 542 "int32" `297 
v L "??65535" 2 542 "int32" `318 
f G "_mul" 2 542 "?(int32 ,int32 )" `316 
v L "??65535" 2 543 "sint32" `297 
v L "??65535" 2 543 "sint32" `321 
f G "_mul" 2 543 "?(sint32 ,sint32 )" `319 
v L "??65535" 2 544 "?" `297 
v L "??65535" 2 544 "?" `324 
f G "_mul" 2 544 "?(? ,? )" `322 
v L "??65535" 2 545 "?" `297 
v L "??65535" 2 545 "?" `327 
f G "_mul" 2 545 "?(? ,? )" `325  "Memory Manipulation Prototypes:"
v L "dest" 2 548 "*sint8" `329 
v L "src" 2 548 "*sint8" `330 
f B "strcpy" 2 548 "void(*sint8 dest,*sint8 src)" `328 
v L "dest" 2 549 "*sint8" `332 
v L "src" 2 549 "*sint8" `333 
f B "strcopy" 2 549 "void(*sint8 dest,*sint8 src)" `331 
v L "destination" 2 550 "*int8" `335 
v L "value" 2 550 "int8" `336 
v L "num" 2 550 "int16" `337 
f B "memset" 2 550 "void(*int8 destination,int8 value,int16 num)" `334 
v L "destination" 2 551 "*int8" `339 
v L "source" 2 551 "*int8" `340 
v L "num" 2 551 "int16" `341 
f B "memcpy" 2 551 "void(*int8 destination,*int8 source,int16 num)" `338  "Data Manipulators Prototypes:"
v L "address" 2 554 "*int8" `343 
v L "bytes" 2 554 "int8" `344 
v L "value" 2 554 "int8" `345 
f B "shift_left" 2 554 "int8(*int8 address,int8 bytes,int8 value)" `342 
v L "address" 2 555 "*int8" `347 
v L "bytes" 2 555 "int8" `348 
v L "value" 2 555 "int8" `349 
f B "shift_right" 2 555 "int8(*int8 address,int8 bytes,int8 value)" `346 
v L "address" 2 556 "*int8" `351 
v L "bytes" 2 556 "int8" `352 
f B "rotate_left" 2 556 "void(*int8 address,int8 bytes)" `350 
v L "address" 2 557 "*int8" `354 
v L "bytes" 2 557 "int8" `355 
f B "rotate_right" 2 557 "void(*int8 address,int8 bytes)" `353 
v L "value" 2 558 "int8" `357 
f B "swap" 2 558 "void(int8 value)" `356 
v L "var" 2 559 "int16" `359 
v L "offset" 2 559 "int8" `360 
f B "make8" 2 559 "int8(int16 var,int8 offset)" `358 
v L "var" 2 560 "int32" `359 
v L "offset" 2 560 "int8" `363 
f G "make8" 2 560 "int8(int32 var,int8 offset)" `361 
v L "varhigh" 2 561 "int8" `365 
v L "varlow" 2 561 "int8" `366 
f B "make16" 2 561 "int16(int8 varhigh,int8 varlow)" `364 
v L "var1" 2 562 "int16" `368 
f B "make32" 2 562 "int32(int16 var1)" `367 
v L "var1" 2 563 "int16" `370 
v L "var2" 2 563 "int16" `371 
f G "make32" 2 563 "int32(int16 var1,int16 var2)" `369 
v L "var1" 2 564 "int16" `370 
v L "var2" 2 564 "int8" `374 
f G "make32" 2 564 "int32(int16 var1,int8 var2)" `372 
v L "var1" 2 565 "int16" `376 
v L "var2" 2 565 "int8" `377 
v L "var3" 2 565 "int8" `378 
f G "make32" 2 565 "int32(int16 var1,int8 var2,int8 var3)" `375 
v L "var1" 2 566 "int8" `380 
f G "make32" 2 566 "int32(int8 var1)" `379 
v L "var1" 2 567 "int8" `370 
v L "var2" 2 567 "int8" `383 
f G "make32" 2 567 "int32(int8 var1,int8 var2)" `381 
v L "var1" 2 568 "int8" `376 
v L "var2" 2 568 "int8" `377 
v L "var3" 2 568 "int8" `387 
f G "make32" 2 568 "int32(int8 var1,int8 var2,int8 var3)" `384 
v L "var1" 2 569 "int8" `389 
v L "var2" 2 569 "int8" `390 
v L "var3" 2 569 "int8" `391 
v L "var4" 2 569 "int8" `392 
f G "make32" 2 569 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `388 
v L "var1" 2 570 "int8" `370 
v L "var2" 2 570 "int16" `395 
f G "make32" 2 570 "int32(int8 var1,int16 var2)" `393 
v L "var1" 2 571 "int8" `376 
v L "var2" 2 571 "int16" `377 
v L "var3" 2 571 "int8" `399 
f G "make32" 2 571 "int32(int8 var1,int16 var2,int8 var3)" `396 
v L "var1" 2 572 "int8" `376 
v L "var2" 2 572 "int8" `377 
v L "var3" 2 572 "int16" `403 
f G "make32" 2 572 "int32(int8 var1,int8 var2,int16 var3)" `400 
v L "var" 2 573 "int8" `405 
v L "bit" 2 573 "int8" `406 
f B "bit_set" 2 573 "void(int8 var,int8 bit)" `404 
v L "var" 2 574 "int16" `405 
v L "bit" 2 574 "int8" `409 
f G "bit_set" 2 574 "void(int16 var,int8 bit)" `407 
v L "var" 2 575 "int32" `405 
v L "bit" 2 575 "int8" `412 
f G "bit_set" 2 575 "void(int32 var,int8 bit)" `410 
v L "var" 2 576 "int8" `414 
v L "bit" 2 576 "int8" `415 
f B "bit_clear" 2 576 "void(int8 var,int8 bit)" `413 
v L "var" 2 577 "int16" `414 
v L "bit" 2 577 "int8" `418 
f G "bit_clear" 2 577 "void(int16 var,int8 bit)" `416 
v L "var" 2 578 "int32" `414 
v L "bit" 2 578 "int8" `421 
f G "bit_clear" 2 578 "void(int32 var,int8 bit)" `419 
v L "var" 2 579 "int8" `423 
v L "bit" 2 579 "int8" `424 
f B "bit_test" 2 579 "int8(int8 var,int8 bit)" `422 
v L "var" 2 580 "int16" `423 
v L "bit" 2 580 "int8" `427 
f G "bit_test" 2 580 "int8(int16 var,int8 bit)" `425 
v L "var" 2 581 "int32" `423 
v L "bit" 2 581 "int8" `430 
f G "bit_test" 2 581 "int8(int32 var,int8 bit)" `428 
v L "var" 2 582 "?" `405 
v L "bit" 2 582 "int8" `433 
f G "bit_set" 2 582 "void(? var,int8 bit)" `431 
v L "var" 2 583 "?" `405 
v L "bit" 2 583 "int8" `436 
f G "bit_set" 2 583 "void(? var,int8 bit)" `434 
v L "var" 2 584 "?" `414 
v L "bit" 2 584 "int8" `439 
f G "bit_clear" 2 584 "void(? var,int8 bit)" `437 
v L "var" 2 585 "?" `414 
v L "bit" 2 585 "int8" `442 
f G "bit_clear" 2 585 "void(? var,int8 bit)" `440 
v L "var" 2 586 "?" `423 
v L "bit" 2 586 "int8" `445 
f G "bit_test" 2 586 "int8(? var,int8 bit)" `443 
v L "var" 2 587 "?" `423 
v L "bit" 2 587 "int8" `448 
f G "bit_test" 2 587 "int8(? var,int8 bit)" `446 
v L "value" 2 588 "int8" `450 
v L "var" 2 588 "int16" `451 
f B "bit_first" 2 588 "int8(int8 value,int16 var)" `449 
v L "var" 2 589 "sint16" `453 
f B "bit_last" 2 589 "int8(sint16 var)" `452 
v L "value" 2 590 "int8" `455 
v L "var" 2 590 "sint16" `456 
f G "bit_last" 2 590 "int8(int8 value,sint16 var)" `454  "#use delay() Prototypes:"
v L "count" 2 593 "int16" `458 
f B "delay_cycles" 2 593 "void(int16 count)" `457 
v L "time" 2 594 "int16" `460 
f B "delay_ms" 2 594 "void(int16 time)" `459 
v L "time" 2 595 "int16" `462 
f B "delay_us" 2 595 "void(int16 time)" `461  "#use rs232() Prototypes:"
v L "cdata" 2 598 "sint8" `464 
f B "putchar" 2 598 "void(sint8 cdata)" `463 
v L "cdata" 2 599 "sint8" `466 
v L "stream" 2 599 "int8" `467 
f G "putchar" 2 599 "void(sint8 cdata,int8 stream)" `465 
v L "string" 2 600 "*sint8" `469 
f B "puts" 2 600 "void(*sint8 string)" `468 
v L "string" 2 601 "*sint8" `471 
v L "stream" 2 601 "int8" `472 
f G "puts" 2 601 "void(*sint8 string,int8 stream)" `470 
f B "getch" 2 602 "sint8()" `473 
v L "stream" 2 603 "int8" `475 
f G "getch" 2 603 "sint8(int8 stream)" `474 
v L "string" 2 604 "*sint8" `477 
f B "gets" 2 604 "void(*sint8 string)" `476 
v L "string" 2 605 "*sint8" `479 
v L "stream" 2 605 "int8" `480 
f G "gets" 2 605 "void(*sint8 string,int8 stream)" `478 
f B "kbhit" 2 606 "int8()" `481 
v L "stream" 2 607 "int8" `483 
f G "kbhit" 2 607 "int8(int8 stream)" `482 
v L "string" 2 608 "*sint8" `485 
f B "printf" 2 608 "void(*sint8 string,*int8 _VA_LIST)" `484 
v L "stream" 2 609 "int8" `488 
v L "string" 2 609 "*sint8" `489 
f B "fprintf" 2 609 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `487 
f B "putc_send" 2 610 "void()" `491 
v L "stream" 2 611 "int8" `493 
f B "fputc_send" 2 611 "void(int8 stream)" `492 
f B "rcv_buffer_full" 2 612 "int8()" `494 
v L "stream" 2 613 "int8" `496 
f G "rcv_buffer_full" 2 613 "int8(int8 stream)" `495 
f B "rcv_buffer_bytes" 2 614 "int16()" `497 
v L "stream" 2 615 "int8" `499 
f G "rcv_buffer_bytes" 2 615 "int16(int8 stream)" `498 
f B "tx_buffer_full" 2 616 "int8()" `500 
v L "stream" 2 617 "int8" `502 
f G "tx_buffer_full" 2 617 "int8(int8 stream)" `501 
f B "tx_buffer_bytes" 2 618 "int16()" `503 
v L "stream" 2 619 "int8" `505 
f G "tx_buffer_bytes" 2 619 "int16(int8 stream)" `504  "#use i2c() Prototypes:"
f B "i2c_read" 2 622 "int8()" `506 
v L "stream" 2 623 "int8" `508 
f G "i2c_read" 2 623 "int8(int8 stream)" `507 
v L "stream" 2 624 "int8" `510 
v L "ack" 2 624 "int8" `511 
f G "i2c_read" 2 624 "int8(int8 stream,int8 ack)" `509 
v L "data" 2 625 "int8" `513 
f B "i2c_write" 2 625 "int8(int8 data)" `512 
v L "stream" 2 626 "int8" `515 
v L "data" 2 626 "int8" `516 
f G "i2c_write" 2 626 "int8(int8 stream,int8 data)" `514 
f B "i2c_start" 2 627 "void()" `517 
v L "stream" 2 628 "int8" `519 
f G "i2c_start" 2 628 "void(int8 stream)" `518 
v L "stream" 2 629 "int8" `521 
v L "restart" 2 629 "int8" `522 
f G "i2c_start" 2 629 "void(int8 stream,int8 restart)" `520 
f B "i2c_stop" 2 630 "void()" `523 
v L "stream" 2 631 "int8" `525 
f G "i2c_stop" 2 631 "void(int8 stream)" `524 
f B "i2c_isr_state" 2 632 "sint8()" `526 
v L "addr" 2 633 "int8" `528 
f B "i2c_slaveaddr" 2 633 "void(int8 addr)" `527 
v L "stream" 2 634 "int8" `530 
v L "addr" 2 634 "int8" `531 
f G "i2c_slaveaddr" 2 634 "void(int8 stream,int8 addr)" `529 
f B "i2c_poll" 2 635 "int8()" `532 
v L "stream" 2 636 "int8" `534 
f G "i2c_poll" 2 636 "int8(int8 stream)" `533 
v L "baud" 2 637 "int32" `536 
f B "i2c_init" 2 637 "void(int32 baud)" `535 
v L "stream" 2 638 "int8" `538 
v L "baud" 2 638 "int32" `539 
f G "i2c_init" 2 638 "void(int8 stream,int32 baud)" `537  "#use spi() Prototypes:"
f B "spi_xfer" 2 641 "int8()" `540 
f G "spi_xfer" 2 642 "int16()" `541 
f G "spi_xfer" 2 643 "int32()" `542 
v L "data" 2 644 "int8" `544 
f G "spi_xfer" 2 644 "int8(int8 data)" `543 
v L "data" 2 645 "int16" `546 
f G "spi_xfer" 2 645 "int16(int16 data)" `545 
v L "data" 2 646 "int32" `548 
f G "spi_xfer" 2 646 "int32(int32 data)" `547 
v L "stream" 2 647 "int8" `550 
v L "data" 2 647 "int8" `551 
f G "spi_xfer" 2 647 "int8(int8 stream,int8 data)" `549 
v L "stream" 2 648 "int8" `550 
v L "data" 2 648 "int16" `554 
f G "spi_xfer" 2 648 "int16(int8 stream,int16 data)" `552 
v L "stream" 2 649 "int8" `550 
v L "data" 2 649 "int32" `557 
f G "spi_xfer" 2 649 "int32(int8 stream,int32 data)" `555 
v L "stream" 2 650 "int8" `559 
v L "data" 2 650 "int8" `560 
v L "bits" 2 650 "int8" `561 
f G "spi_xfer" 2 650 "int8(int8 stream,int8 data,int8 bits)" `558 
v L "stream" 2 651 "int8" `559 
v L "data" 2 651 "int16" `560 
v L "bits" 2 651 "int8" `565 
f G "spi_xfer" 2 651 "int16(int8 stream,int16 data,int8 bits)" `562 
v L "stream" 2 652 "int8" `559 
v L "data" 2 652 "int32" `560 
v L "bits" 2 652 "int8" `569 
f G "spi_xfer" 2 652 "int32(int8 stream,int32 data,int8 bits)" `566 
v L "baud" 2 653 "int32" `571 
f B "spi_init" 2 653 "void(int32 baud)" `570 
v L "stream" 2 654 "int8" `573 
v L "baud" 2 654 "int32" `574 
f G "spi_init" 2 654 "void(int8 stream,int32 baud)" `572 
v L "baud" 2 655 "int32" `576 
f B "spi_speed" 2 655 "void(int32 baud)" `575 
v L "stream" 2 656 "int8" `578 
v L "baud" 2 656 "int32" `579 
f G "spi_speed" 2 656 "void(int8 stream,int32 baud)" `577 
v L "stream" 2 657 "int8" `581 
v L "baud" 2 657 "int32" `582 
v L "clock" 2 657 "int32" `583 
f G "spi_speed" 2 657 "void(int8 stream,int32 baud,int32 clock)" `580 
v L "data" 2 658 "int8" `585 
f B "spi_prewrite" 2 658 "void(int8 data)" `584 
v L "data" 2 659 "int16" `587 
f G "spi_prewrite" 2 659 "void(int16 data)" `586 
v L "data" 2 660 "int32" `589 
f G "spi_prewrite" 2 660 "void(int32 data)" `588 
v L "??65535" 2 661 "int8" `591 
v L "data" 2 661 "int8" `592 
f G "spi_prewrite" 2 661 "void(int8 ,int8 data)" `590 
v L "??65535" 2 662 "int8" `591 
v L "data" 2 662 "int16" `595 
f G "spi_prewrite" 2 662 "void(int8 ,int16 data)" `593 
v L "??65535" 2 663 "int8" `591 
v L "data" 2 663 "int32" `598 
f G "spi_prewrite" 2 663 "void(int8 ,int32 data)" `596 
f B "spi_xfer_in" 2 664 "int8()" `599 
f G "spi_xfer_in" 2 665 "int16()" `600 
f G "spi_xfer_in" 2 666 "int32()" `601 
v L "bits" 2 667 "int8" `603 
f G "spi_xfer_in" 2 667 "int8(int8 bits)" `602 
v L "bits" 2 668 "int8" `605 
f G "spi_xfer_in" 2 668 "int16(int8 bits)" `604 
v L "bits" 2 669 "int8" `607 
f G "spi_xfer_in" 2 669 "int32(int8 bits)" `606 
v L "stream" 2 670 "int8" `609 
v L "bits" 2 670 "int8" `610 
f G "spi_xfer_in" 2 670 "int8(int8 stream,int8 bits)" `608 
v L "stream" 2 671 "int8" `609 
v L "bits" 2 671 "int8" `613 
f G "spi_xfer_in" 2 671 "int16(int8 stream,int8 bits)" `611 
v L "stream" 2 672 "int8" `609 
v L "bits" 2 672 "int8" `616 
f G "spi_xfer_in" 2 672 "int32(int8 stream,int8 bits)" `614  "#use rtos() Prototypes:"
f B "rtos_run" 2 675 "void()" `617 
f B "rtos_yield" 2 676 "void()" `618 
v L "task" 2 677 "int8" `620 
f B "rtos_enable" 2 677 "void(int8 task)" `619 
v L "task" 2 678 "int8" `622 
f B "rtos_disable" 2 678 "void(int8 task)" `621 
f B "rtos_terminate" 2 679 "void()" `623 
v L "flag" 2 680 "int8" `625 
f B "rtos_await" 2 680 "void(int8 flag)" `624 
v L "sem" 2 681 "int8" `627 
f B "rtos_wait" 2 681 "void(int8 sem)" `626 
v L "sem" 2 682 "int8" `629 
f B "rtos_signal" 2 682 "void(int8 sem)" `628 
v L "task" 2 683 "int8" `631 
v L "msg" 2 683 "int8" `632 
f B "rtos_msg_send" 2 683 "void(int8 task,int8 msg)" `630 
f B "rtos_msg_read" 2 684 "int8()" `633 
f B "rtos_msg_poll" 2 685 "int8()" `634 
v L "task" 2 686 "int8" `636 
f B "rtos_overrun" 2 686 "int8(int8 task)" `635 
v L "task" 2 687 "int8" `638 
v L "stat" 2 687 "*int8" `639 
f B "rtos_stats" 2 687 "void(int8 task,*int8 stat)" `637  "#use timer() Prototypes:"
f B "get_ticks" 2 690 "int8()" `640 
f G "get_ticks" 2 691 "int16()" `641 
f G "get_ticks" 2 692 "int32()" `642 
f G "get_ticks" 2 693 "?()" `643 
v L "stream" 2 694 "int8" `645 
f G "get_ticks" 2 694 "int8(int8 stream)" `644 
v L "stream" 2 695 "int8" `647 
f G "get_ticks" 2 695 "int16(int8 stream)" `646 
v L "stream" 2 696 "int8" `649 
f G "get_ticks" 2 696 "int32(int8 stream)" `648 
v L "stream" 2 697 "int8" `651 
f G "get_ticks" 2 697 "?(int8 stream)" `650 
v L "value" 2 698 "int8" `653 
f B "set_ticks" 2 698 "void(int8 value)" `652 
v L "value" 2 699 "int16" `655 
f G "set_ticks" 2 699 "void(int16 value)" `654 
v L "value" 2 700 "int32" `657 
f G "set_ticks" 2 700 "void(int32 value)" `656 
v L "value" 2 701 "?" `659 
f G "set_ticks" 2 701 "void(? value)" `658 
v L "stream" 2 702 "int8" `661 
v L "value" 2 702 "int8" `662 
f G "set_ticks" 2 702 "void(int8 stream,int8 value)" `660 
v L "stream" 2 703 "int8" `661 
v L "value" 2 703 "int16" `665 
f G "set_ticks" 2 703 "void(int8 stream,int16 value)" `663 
v L "stream" 2 704 "int8" `661 
v L "value" 2 704 "int32" `668 
f G "set_ticks" 2 704 "void(int8 stream,int32 value)" `666 
v L "stream" 2 705 "int8" `661 
v L "value" 2 705 "?" `671 
f G "set_ticks" 2 705 "void(int8 stream,? value)" `669  "#use pwm() Prototypes:"
f B "pwm_on" 2 708 "void()" `672 
v L "stream" 2 709 "int8" `674 
f G "pwm_on" 2 709 "void(int8 stream)" `673 
f B "pwm_off" 2 710 "void()" `675 
v L "stream" 2 711 "int8" `677 
f G "pwm_off" 2 711 "void(int8 stream)" `676 
v L "duty" 2 712 "int16" `679 
f B "pwm_set_duty" 2 712 "void(int16 duty)" `678 
v L "stream" 2 713 "int8" `681 
v L "duty" 2 713 "int16" `682 
f G "pwm_set_duty" 2 713 "void(int8 stream,int16 duty)" `680 
v L "percent" 2 714 "int16" `684 
f B "pwm_set_duty_percent" 2 714 "void(int16 percent)" `683 
v L "stream" 2 715 "int8" `686 
v L "percent" 2 715 "int16" `687 
f G "pwm_set_duty_percent" 2 715 "void(int8 stream,int16 percent)" `685 
v L "frequency" 2 716 "int32" `689 
f B "pwm_set_frequency" 2 716 "void(int32 frequency)" `688 
v L "stream" 2 717 "int8" `691 
v L "frequency" 2 717 "int32" `692 
f G "pwm_set_frequency" 2 717 "void(int8 stream,int32 frequency)" `690  "#use capture() Prototypes:"
f B "get_capture_time" 2 720 "int16()" `693 
v L "stream" 2 721 "int8" `695 
f G "get_capture_time" 2 721 "int16(int8 stream)" `694 
f B "get_capture_event" 2 722 "int8()" `696 
v L "stream" 2 723 "int8" `698 
f G "get_capture_event" 2 723 "int8(int8 stream)" `697  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 732 "int32" `700 
f B "goto_address" 2 732 "void(int32 address)" `699 
v L "label" 2 733 "int32" `702 
f B "label_address" 2 733 "int32(int32 label)" `701  "Program Memory Prototypes:"
v L "address" 2 736 "int32" `704 
v L "dataptr" 2 736 "*int8" `705 
v L "count" 2 736 "int16" `706 
f B "read_program_memory" 2 736 "void(int32 address,*int8 dataptr,int16 count)" `703 
v L "address" 2 737 "int32" `708 
f B "erase_program_memory" 2 737 "void(int32 address)" `707 
v L "address" 2 738 "int32" `710 
v L "dataptr" 2 738 "*int8" `711 
v L "count" 2 738 "int16" `712 
f B "write_program_memory" 2 738 "void(int32 address,*int8 dataptr,int16 count)" `709 
v L "dataptr" 2 739 "*int8" `714 
v L "count" 2 739 "int8" `715 
f B "read_configuration_memory" 2 739 "void(*int8 dataptr,int8 count)" `713 
v L "dataptr" 2 740 "*int8" `717 
v L "count" 2 740 "int8" `718 
f B "write_configuration_memory" 2 740 "void(*int8 dataptr,int8 count)" `716  "INT"
c L "write_configuration_memory" 2 1 4 "FUNCTION"
v L "interrupt" 2 747 "int16" `720 
f B "enable_interrupts" 2 747 "void(int16 interrupt)" `719 
v L "interrupt" 2 748 "int16" `722 
f B "disable_interrupts" 2 748 "void(int16 interrupt)" `721 
v L "interrupt" 2 749 "int16" `724 
f B "clear_interrupt" 2 749 "void(int16 interrupt)" `723 
v L "interrupt" 2 750 "int16" `726 
f B "interrupt_active" 2 750 "int8(int16 interrupt)" `725 
v L "interrupt" 2 751 "int16" `728 
f B "interrupt_enabled" 2 751 "int8(int16 interrupt)" `727 
v L "source" 2 752 "int8" `730 
v L "edge" 2 752 "int8" `731 
f B "ext_int_edge" 2 752 "void(int8 source,int8 edge)" `729 
v L "address" 2 753 "int16" `733 
f B "jump_to_isr" 2 753 "void(int16 address)" `732  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 755 "0x40"
d G "H_TO_L" 2 756 "0"
d G "INTR_GLOBAL" 2 759 "0x400"
d G "GLOBAL" 2 760 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 2 761 "0x100"
d G "INTR_ALTERNATE" 2 762 "0x200"
d G "INTR_LEVEL0" 2 763 "0x500"
d G "INTR_LEVEL1" 2 764 "0x501"
d G "INTR_LEVEL2" 2 765 "0x502"
d G "INTR_LEVEL3" 2 766 "0x503"
d G "INTR_LEVEL4" 2 767 "0x504"
d G "INTR_LEVEL5" 2 768 "0x505"
d G "INTR_LEVEL6" 2 769 "0x506"
d G "INTR_LEVEL7" 2 770 "0x507"
d G "INTR_CN_PIN" 2 772 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 2 774 "1"
d G "INT_ADDRERR" 2 775 "2"
d G "INT_STACKERR" 2 776 "3"
d G "INT_MATHERR" 2 777 "4"
d G "INT_DMAERR" 2 778 "5"
d G "INT_EXT0" 2 779 "6"
d G "INT_IC1" 2 780 "7"
d G "INT_OC1" 2 781 "8"
d G "INT_TIMER1" 2 782 "9"
d G "INT_DMA0" 2 783 "69"
d G "INT_IC2" 2 784 "70"
d G "INT_OC2" 2 785 "71"
d G "INT_TIMER2" 2 786 "72"
d G "INT_TIMER3" 2 787 "73"
d G "INT_SPI1E" 2 788 "74"
d G "INT_SPI1" 2 789 "75"
d G "INT_RDA" 2 790 "76"
d G "INT_TBE" 2 791 "77"
d G "INT_ADC1" 2 792 "78"
d G "INT_DMA1" 2 793 "79"
d G "INT_SI2C" 2 794 "81"
d G "INT_MI2C" 2 795 "82"
d G "INT_CNI" 2 796 "84"
d G "INT_EXT1" 2 797 "85"
d G "INT_IC7" 2 798 "87"
d G "INT_IC8" 2 799 "88"
d G "INT_DMA2" 2 800 "89"
d G "INT_OC3" 2 801 "90"
d G "INT_OC4" 2 802 "91"
d G "INT_TIMER4" 2 803 "92"
d G "INT_TIMER5" 2 804 "93"
d G "INT_EXT2" 2 805 "94"
d G "INT_RDA2" 2 806 "95"
d G "INT_TBE2" 2 807 "96"
d G "INT_SPI2E" 2 808 "97"
d G "INT_SPI2" 2 809 "98"
d G "INT_C1RX" 2 810 "99"
d G "INT_CAN1" 2 811 "100"
d G "INT_DMA3" 2 812 "101"
d G "INT_IC3" 2 813 "102"
d G "INT_IC4" 2 814 "103"
d G "INT_IC5" 2 815 "104"
d G "INT_IC6" 2 816 "105"
d G "INT_OC5" 2 817 "106"
d G "INT_OC6" 2 818 "107"
d G "INT_OC7" 2 819 "108"
d G "INT_OC8" 2 820 "109"
d G "INT_DMA4" 2 821 "111"
d G "INT_TIMER6" 2 822 "112"
d G "INT_TIMER7" 2 823 "113"
d G "INT_SI2C2" 2 824 "114"
d G "INT_MI2C2" 2 825 "115"
d G "INT_TIMER8" 2 826 "116"
d G "INT_TIMER9" 2 827 "117"
d G "INT_EXT3" 2 828 "118"
d G "INT_EXT4" 2 829 "119"
d G "INT_DMA5" 2 830 "126"
d G "INT_UART1E" 2 831 "130"
d G "INT_UART2E" 2 832 "131"
d G "INT_DMA6" 2 833 "133"
d G "INT_DMA7" 2 834 "134"
d G "INT_C1TX" 2 835 "135"
C L "jump_to_isr" 1 5 1 "FUNCTION"
C L "jump_to_isr" 1 5 1 "FUNCTION"
C L "jump_to_isr" 1 5 1 "FUNCTION"
D G "STATUS" 1 39 "0x00" "ADC1256 Register map"
D G "MUX" 1 40 "0x01"
D G "ADCON" 1 41 "0x02"
D G "DRATE" 1 42 "0x03"
D G "IO" 1 43 "0x04"
D G "OFCO" 1 44 "0x05"
D G "OFC1" 1 45 "0x06"
D G "OFC2" 1 46 "0x07"
D G "FSCO" 1 47 "0x08"
D G "FSC1" 1 48 "0x09"
D G "FSC2" 1 49 "0x0A"
D G "uV" 1 52 "100000" "по умолчанию"
D G "mV" 1 53 "1000"
C L "jump_to_isr" 1 5 2 "FUNCTION"
C L "jump_to_isr" 1 5 1 "FUNCTION"
C L "jump_to_isr" 1 5 1 "FUNCTION"
C L "jump_to_isr" 1 5 1 "FUNCTION"
D G "ADC_Dout" 1 131 "SDI2" "???? Din ??"
D G "ADC_Din" 1 132 "SDO2" "???? Dout ??"
D G "FCY" 1 154 "40000000"
D G "BAUDRATE" 1 155 "9600"
D G "BRGVAL" 1 156 " ((FCY/BAUDRATE)/16)-1"
D G "CK_FLASH_END" 1 158 " (getenv("PROGRAM_MEMORY")-1)"
D G "CK_FLASH_PAGE_SIZE" 1 159 " (getenv("FLASH_ERASE_SIZE")/2)"
D G "CK_NUM_PAGES" 1 160 " (CK_FLASH_END/CK_FLASH_PAGE_SIZE)"
D G "CK_USER_PAGE" 1 162 " (CK_FLASH_PAGE_SIZE*(CK_NUM_PAGES-1))"
T G "U16" 1 166 "int16" `838 
T G "U8" 1 167 "int8" `839 
T G "U32" 1 168 "int32" `840 
T G "S32" 1 169 "sint32" `841 
T G "S16" 1 170 "sint16" `842 
T G "S8" 1 171 "sint8" `843  "(C) Copyright 1996,2007 Custom Computer Services           ////"
D G "_STDLIB" 3 12 ""
D G "RAND_MAX" 3 19 "32767" "The value of which is the maximum value"
D G "LONG_POINTERS" 3 25 "1"
T G "div_t" 3 33 "{sint16 quot,sint16 rem}" `847 
T G "ldiv_t" 3 38 "{sint32 quot,sint32 rem}" `851  "(C) Copyright 1996,2003 Custom Computer Services           ////"
D G "_STDDEF" 4 13 ""
D G "ptrdiff_t" 4 18 "unsigned int16"
D G "size_t" 4 24 "unsigned int16"
D G "wchar_t" 4 26 "char"
D G "NULL" 4 27 "0"
D G "offsetof" 4 29 "(s,f) (offsetofbit(s,f)/8)"
C L "jump_to_isr" 3 43 2 "FUNCTION"
C L "jump_to_isr" 3 46 1 "*"
C L "jump_to_isr" 3 46 1 "*"
V L "s" 3 50 "*sint8" `853 
f G "atoi" 3 50 "sint16(*sint8 s)" `852  "Syntax: signed int32  atoi32(char * s)"
D G "atoi32" 3 56 "(s) atol(s)"
C L "atoi" 3 46 5 "FUNCTION"
V L "s" 3 68 "*sint8" `855 
f G "atoi48" 3 68 "?(*sint8 s)" `854  "Syntax: signed int64  atoi64(char * s)"
C L "atoi48" 3 46 2 "FUNCTION"
V L "s" 3 73 "*sint8" `857 
f G "atoi64" 3 73 "?(*sint8 s)" `856  "Syntax: char *  itoa(signed int32 num, int8 base, char * s)"
C L "atoi64" 3 46 2 "FUNCTION"
V L "num" 3 79 "sint32" `859 
V L "base" 3 79 "int16" `860 
V L "s" 3 79 "*sint8" `861 
f G "itoa" 3 79 "*sint8(sint32 num,int16 base,*sint8 s)" `858  "Standard template: signed int16  atol(char * s)"
C L "itoa" 3 81 1 "*"
C L "itoa" 3 81 1 "*"
V L "s" 3 85 "*sint8" `863 
f G "atol" 3 85 "sint32(*sint8 s)" `862  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
C L "atol" 3 87 1 "*"
V L "s" 3 93 "*sint8" `865 
V L "endptr" 3 93 "*sint8" `866 
V L "base" 3 93 "sint16" `867 
f G "strtol" 3 93 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `864  "Standard template: int16 strtoul(char * s,char *endptr,signed int base)"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
C L "strtol" 3 95 1 "*"
V L "s" 3 101 "*sint8" `869 
V L "endptr" 3 101 "*sint8" `870 
V L "base" 3 101 "sint16" `871 
f G "strtoul" 3 101 "int32(*sint8 s,*sint8 endptr,sint16 base)" `868  "Standart template: float strtof(char * s,char *endptr)"
C L "strtoul" 3 95 2 "FUNCTION"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
C L "strtoul" 3 103 1 "*"
V L "s" 3 110 "*sint8" `873 
V L "endptr" 3 110 "*sint8" `874 
f G "strtof" 3 110 "float(*sint8 s,*sint8 endptr)" `872 
V L "s" 3 112 "*sint8" `876 
V L "endptr" 3 112 "*sint8" `877 
f G "strtof48" 3 112 "?(*sint8 s,*sint8 endptr)" `875 
V L "s" 3 113 "*sint8" `879 
V L "endptr" 3 113 "*sint8" `880 
f G "strtod" 3 113 "?(*sint8 s,*sint8 endptr)" `878  "Standard template: float32 atof(char * s)"
C L "strtod" 3 120 1 "*"
D G "atof" 3 124 "(s)   strtof(s, 0)"
C L "strtod" 3 120 3 "FUNCTION"
C L "strtod" 3 130 1 "*"
D G "atof48" 3 134 "(s) strtof48(s, 0)"
C L "strtod" 3 130 1 "FUNCTION"
C L "strtod" 3 136 1 "*"
D G "atof64" 3 140 "(s) strtod(s, 0)"
C L "strtod" 3 136 1 "FUNCTION"
C L "strtod" 3 143 1 "*"
C L "strtod" 3 143 1 "*"
C L "strtod" 3 143 1 "*"
V L "s" 3 153 "*sint8" `882 
f G "atoe" 3 153 "float(*sint8 s)" `881  "Pseudo-random sequence generation functions"
C L "atoe" 3 143 1 "FUNCTION"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
C L "atoe" 3 160 1 "*"
f G "rand" 3 169 "int16()" `883  "The srand function uses the argument as a seed for a new sequence of"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
C L "rand" 3 171 1 "*"
V L "seed" 3 191 "int32" `885 
f G "srand" 3 191 "void(int32 seed)" `884  "Memory management functions"
C L "srand" 3 171 3 "FUNCTION"
V L "string" 3 205 "*sint8" `887 
f G "system" 3 205 "sint8(*sint8 string)" `886  "Searching and sorting utilities"
C L "system" 3 171 1 "FUNCTION"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 1 "*"
C L "system" 3 211 4 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
C L "system" 3 229 1 "*"
D G "labs" 3 249 "abs"
V L "numer" 3 251 "sint16" `889 
V L "denom" 3 251 "sint16" `890 
f G "div" 3 251 "div_t(sint16 numer,sint16 denom)" `888 
V L "numer" 3 252 "sint32" `892 
V L "denom" 3 252 "sint32" `893 
f G "ldiv" 3 252 "ldiv_t(sint32 numer,sint32 denom)" `891  "Multibyte character functions"
C L "ldiv" 3 229 4 "FUNCTION"
C L "ldiv" 4 2 7 "FUNCTION"
D G "_STRING" 5 12 ""
C L "ldiv" 4 2 7 "FUNCTION"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "ldiv" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `895 
V L "s2" 5 34 "*sint8" `896 
V L "n" 5 34 "int16" `897 
F G "memmove" 5 35 "*sint8(*int8 s1,*sint8 s2,int16 n)" `894 
V L "sc1" 5 36 "*sint8" `898 
V L "sc2" 5 37 "*sint8" `899 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
V L "s1" 5 61 "*sint8" `901 
V L "s2" 5 61 "*sint8" `902 
V L "n" 5 61 "int16" `903 
F G "strncpy" 5 62 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `900 
V L "s" 5 63 "*sint8" `904 
C L "strcat" 5 19 3 "FUNCTION"
V L "s1" 5 78 "*sint8" `906 
V L "s2" 5 78 "*sint8" `907 
F G "strcat" 5 79 "*sint8(*sint8 s1,*sint8 s2)" `905 
V L "s" 5 80 "*sint8" `908 
C L "strncat" 5 19 2 "FUNCTION"
V L "s1" 5 96 "*sint8" `910 
V L "s2" 5 96 "*sint8" `911 
V L "n" 5 96 "int16" `912 
F G "strncat" 5 97 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `909 
V L "s" 5 98 "*sint8" `913 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `915 
V L "s2" 5 120 "*sint8" `916 
V L "n" 5 120 "int16" `917 
F G "memcmp" 5 121 "sint8(*int8 s1,*sint8 s2,int16 n)" `914 
V L "su1" 5 122 "*sint8" `918 
V L "su2" 5 122 "*sint8" `919 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*sint8" `921 
V L "s2" 5 134 "*sint8" `922 
F G "strcmp" 5 135 "sint8(*sint8 s1,*sint8 s2)" `920 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*sint8" `924 
V L "s2" 5 144 "*sint8" `925 
F G "strcoll" 5 145 "sint8(*sint8 s1,*sint8 s2)" `923 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*sint8" `927 
V L "s2" 5 157 "*sint8" `928 
V L "n" 5 157 "int16" `929 
F G "strncmp" 5 158 "sint8(*sint8 s1,*sint8 s2,int16 n)" `926 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*sint8" `931 
V L "s2" 5 169 "*sint8" `932 
V L "n" 5 169 "int16" `933 
F G "strxfrm" 5 170 "int16(*sint8 s1,*sint8 s2,int16 n)" `930 
V L "s" 5 171 "*sint8" `934 
V L "n1" 5 172 "int8" `935 
C L "memchr" 5 19 3 "FUNCTION"
V L "s" 5 191 "*int8" `937 
V L "c" 5 191 "int8" `938 
V L "n" 5 191 "int16" `939 
F G "memchr" 5 192 "*sint8(*int8 s,int8 c,int16 n)" `936 
V L "uc" 5 193 "sint8" `940 
V L "su" 5 194 "*sint8" `941 
C L "strchr" 5 19 2 "FUNCTION"
V L "s" 5 205 "*sint8" `943 
V L "c" 5 205 "int8" `944 
F G "strchr" 5 206 "*sint8(*sint8 s,int8 c)" `942 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*sint8" `946 
V L "s2" 5 217 "*sint8" `947 
F G "strcspn" 5 218 "int8(*sint8 s1,*sint8 s2)" `945 
V L "sc1" 5 219 "*sint8" `948 
V L "sc2" 5 219 "*sint8" `949 
C L "strpbrk" 5 19 4 "FUNCTION"
V L "s1" 5 232 "*sint8" `951 
V L "s2" 5 232 "*sint8" `952 
F G "strpbrk" 5 233 "*sint8(*sint8 s1,*sint8 s2)" `950 
V L "sc1" 5 234 "*sint8" `953 
V L "sc2" 5 234 "*sint8" `954 
C L "strrchr" 5 19 2 "FUNCTION"
V L "s" 5 247 "*sint8" `956 
V L "c" 5 247 "int8" `957 
F G "strrchr" 5 248 "*sint8(*sint8 s,int8 c)" `955 
V L "p" 5 249 "*sint8" `958 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*sint8" `960 
V L "s2" 5 262 "*sint8" `961 
F G "strspn" 5 263 "int8(*sint8 s1,*sint8 s2)" `959 
V L "sc1" 5 264 "*sint8" `962 
V L "sc2" 5 264 "*sint8" `963 
C L "strstr" 5 19 6 "FUNCTION"
V L "s1" 5 281 "*sint8" `965 
V L "s2" 5 281 "*sint8" `966 
F G "strstr" 5 282 "*sint8(*sint8 s1,*sint8 s2)" `964 
V L "s" 5 283 "*sint8" `967 
V L "t" 5 283 "*sint8" `968 
C L "strtok" 5 19 13 "FUNCTION"
V L "s1" 5 320 "*sint8" `970 
V L "s2" 5 320 "*sint8" `971 
F G "strtok" 5 321 "*sint8(*sint8 s1,*sint8 s2)" `969 
V L "beg" 5 322 "*sint8" `972 
V L "end" 5 322 "*sint8" `973 
V L "save" 5 323 "*sint8" `974 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*sint8" `976 
F G "strlen" 5 370 "int8(*sint8 s)" `975 
V L "sc" 5 371 "*sint8" `977 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*sint8" `979 
V L "s2" 5 380 "*sint8" `980 
F G "stricmp" 5 381 "sint8(*sint8 s1,*sint8 s2)" `978 
C L "strlwr" 5 19 3 "FUNCTION"
V L "s" 5 394 "*sint8" `984 
F G "strlwr" 5 395 "*sint8(*sint8 s)" `983 
V L "p" 5 396 "*sint8" `985 
C L "strupr" 5 19 3 "FUNCTION"
V L "s" 5 408 "*sint8" `987 
F G "strupr" 5 409 "*sint8(*sint8 s)" `986 
V L "p" 5 410 "*sint8" `988 
V L "numer" 3 274 "sint16" `889 
V L "denom" 3 274 "sint16" `991 
F G "div" 3 275 "div_t(sint16 numer,sint16 denom)" `888 
V L "val" 3 276 "div_t" `989 
V L "numer" 3 282 "sint32" `892 
V L "denom" 3 282 "sint32" `992 
F G "ldiv" 3 283 "ldiv_t(sint32 numer,sint32 denom)" `891 
V L "val" 3 284 "ldiv_t" `990 
V L "s" 3 292 "*sint8" `998 
F G "atoe" 3 293 "float(*sint8 s)" `881 
V L "pow10" 3 294 "float" `997 
V L "result" 3 295 "float" `998 
V L "sign" 3 296 "int8" `999 
V L "expsign" 3 297 "int8" `1000 
V L "c" 3 298 "sint8" `1001 
V L "ptr" 3 299 "int8" `1002 
V L "i" 3 300 "int8" `1003 
V L "exp" 3 301 "float" `1004 
V L "expcnt" 3 302 "int8" `1005 
C L "atoe" 3 328 1 "FUNCTION"
V L "s" 3 429 "*sint8" `1018 
F G "atoi" 3 430 "sint16(*sint8 s)" `852 
V L "result" 3 431 "sint16" `1017 
V L "sign" 3 432 "int16" `1018 
V L "base" 3 432 "int16" `1019 
V L "index" 3 432 "int16" `1020 
V L "c" 3 433 "sint8" `1021 
C L "atoi" 3 328 1 "FUNCTION"
C L "atoi" 3 328 1 "FUNCTION"
C L "atoi" 3 328 1 "FUNCTION"
C L "atoi" 3 328 1 "FUNCTION"
C L "atoi" 3 328 1 "FUNCTION"
C L "atoi" 3 328 1 "FUNCTION"
V L "s" 3 498 "*sint8" `1023 
F G "atol" 3 499 "sint32(*sint8 s)" `862 
V L "result" 3 500 "sint32" `1022 
V L "sign" 3 501 "int16" `1023 
V L "base" 3 501 "int16" `1024 
V L "index" 3 501 "int16" `1025 
V L "c" 3 502 "sint8" `1026 
C L "atol" 3 328 1 "FUNCTION"
C L "atol" 3 328 1 "FUNCTION"
C L "atol" 3 328 1 "FUNCTION"
C L "atol" 3 328 1 "FUNCTION"
C L "mult_with10" 3 328 1 "FUNCTION"
V L "num" 3 565 "sint32" `1028 
F G "mult_with10" 3 566 "sint32(sint32 num)" `1027 
V L "s" 3 639 "*sint8" `1030 
F G "atoi48" 3 640 "?(*sint8 s)" `854 
V L "result" 3 641 "?" `1029 
V L "sign" 3 642 "sint8" `1030 
V L "base" 3 642 "sint8" `1031 
V L "index" 3 642 "sint8" `1032 
V L "c" 3 643 "sint8" `1033 
C L "atoi48" 3 328 1 "FUNCTION"
C L "atoi48" 3 328 1 "FUNCTION"
C L "atoi48" 3 328 1 "FUNCTION"
C L "atoi48" 3 328 1 "FUNCTION"
C L "atoi48" 3 328 1 "FUNCTION"
V L "s" 3 704 "*sint8" `1035 
F G "atoi64" 3 705 "?(*sint8 s)" `856 
V L "result" 3 706 "?" `1034 
V L "sign" 3 707 "sint8" `1035 
V L "base" 3 707 "sint8" `1036 
V L "index" 3 707 "sint8" `1037 
V L "c" 3 708 "sint8" `1038 
C L "atoi64" 3 328 1 "FUNCTION"
C L "atoi64" 3 328 1 "FUNCTION"
C L "atoi64" 3 328 1 "FUNCTION"
C L "atoi64" 3 328 1 "FUNCTION"
C L "atoi64" 3 328 1 "FUNCTION"
V L "num" 3 770 "sint32" `859 
V L "base" 3 770 "int16" `860 
V L "s" 3 770 "*sint8" `1042 
F G "itoa" 3 771 "*sint8(sint32 num,int16 base,*sint8 s)" `858 
V L "temp" 3 772 "int32" `1039 
V L "i" 3 773 "int8" `1040 
V L "sign" 3 773 "int8" `1041 
V L "cnt" 3 773 "int8" `1042 
V L "c" 3 774 "sint8" `1043 
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
V L "num" 3 809 "?" `1045 
V L "base" 3 809 "int16" `1046 
V L "s" 3 809 "*sint8" `1047 
F G "itoa" 3 810 "*sint8(? num,int16 base,*sint8 s)" `1044 
V L "temp" 3 811 "?" `1048 
V L "i" 3 812 "int8" `1049 
V L "sign" 3 812 "int8" `1050 
V L "cnt" 3 812 "int8" `1051 
V L "c" 3 813 "sint8" `1052 
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
V L "num" 3 846 "?" `1060 
V L "base" 3 846 "int16" `1061 
V L "s" 3 846 "*sint8" `1062 
F G "itoa" 3 847 "*sint8(? num,int16 base,*sint8 s)" `1059 
V L "temp" 3 848 "?" `1063 
V L "i" 3 849 "int8" `1064 
V L "sign" 3 849 "int8" `1065 
V L "cnt" 3 849 "int8" `1066 
V L "c" 3 850 "sint8" `1067 
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
C L "itoa" 3 328 1 "FUNCTION"
V L "s" 3 885 "*sint8" `873 
V L "endptr" 3 885 "*sint8" `1076 
F G "strtof" 3 886 "float(*sint8 s,*sint8 endptr)" `872 
V L "pow10" 3 887 "float" `1074 
V L "result" 3 888 "float" `1075 
V L "skip" 3 889 "int1" `1076 
V L "sign" 3 889 "int1" `1077 
V L "point" 3 889 "int1" `1078 
V L "c" 3 890 "sint8" `1079 
V L "ptr" 3 891 "int8" `1080 
V L "s" 3 958 "*sint8" `876 
V L "endptr" 3 958 "*sint8" `1084 
F G "strtof48" 3 959 "?(*sint8 s,*sint8 endptr)" `875 
V L "pow10" 3 960 "?" `1082 
V L "result" 3 961 "?" `1083 
V L "skip" 3 962 "int1" `1084 
V L "sign" 3 962 "int1" `1085 
V L "point" 3 962 "int1" `1086 
V L "c" 3 963 "sint8" `1087 
V L "ptr" 3 964 "int8" `1088 
V L "s" 3 1030 "*sint8" `879 
V L "endptr" 3 1030 "*sint8" `1103 
F G "strtod" 3 1031 "?(*sint8 s,*sint8 endptr)" `878 
V L "pow10" 3 1032 "?" `1101 
V L "result" 3 1033 "?" `1102 
V L "skip" 3 1034 "int1" `1103 
V L "sign" 3 1034 "int1" `1104 
V L "point" 3 1034 "int1" `1105 
V L "c" 3 1035 "sint8" `1106 
V L "ptr" 3 1036 "int8" `1107 
V L "s" 3 1103 "*sint8" `869 
V L "endptr" 3 1103 "*sint8" `870 
V L "base" 3 1103 "sint16" `1123 
F G "strtoul" 3 1104 "int32(*sint8 s,*sint8 endptr,sint16 base)" `868 
V L "sc" 3 1105 "*sint8" `1120 
V L "s1" 3 1105 "*sint8" `1121 
V L "sd" 3 1105 "*sint8" `1122 
V L "x" 3 1106 "int32" `1123 
V L "sign" 3 1107 "sint8" `1124 
V L "digits" 3 1108 "sint8[1]" `1125 
C L "strtoul" 3 328 1 "FUNCTION"
C L "strtoul" 3 328 1 "FUNCTION"
C L "strtoul" 3 328 1 "FUNCTION"
V L "s" 3 1165 "*sint8" `865 
V L "endptr" 3 1165 "*sint8" `866 
V L "base" 3 1165 "sint16" `1130 
F G "strtol" 3 1166 "sint32(*sint8 s,*sint8 endptr,sint16 base)" `864 
V L "sc" 3 1167 "*sint8" `1127 
V L "s1" 3 1167 "*sint8" `1128 
V L "sd" 3 1167 "*sint8" `1129 
V L "x" 3 1168 "sint32" `1130 
V L "sign" 3 1169 "sint8" `1131 
V L "digits" 3 1170 "sint8[1]" `1132 
C L "strtol" 3 328 1 "FUNCTION"
C L "strtol" 3 328 1 "FUNCTION"
C L "strtol" 3 328 1 "FUNCTION"
V L "string" 3 1228 "*sint8" `1135 
F G "system" 3 1229 "sint8(*sint8 string)" `886 
V L "s" 3 1233 "*sint8" `1135 
V L "n" 3 1233 "int16" `1136 
F G "mblen" 3 1234 "sint8(*sint8 s,int16 n)" `1134 
V L "pwc" 3 1238 "*sint8" `1138 
V L "s" 3 1238 "*sint8" `1139 
V L "n" 3 1238 "int16" `1140 
F G "mbtowc" 3 1239 "sint8(*sint8 pwc,*sint8 s,int16 n)" `1137 
V L "s" 3 1244 "*sint8" `1142 
V L "wchar" 3 1244 "sint8" `1143 
F G "wctomb" 3 1245 "sint8(*sint8 s,sint8 wchar)" `1141 
V L "pwcs" 3 1250 "*sint8" `1145 
V L "s" 3 1250 "*sint8" `1146 
V L "n" 3 1250 "int16" `1147 
F G "mbstowcs" 3 1251 "int16(*sint8 pwcs,*sint8 s,int16 n)" `1144 
V L "s" 3 1256 "*sint8" `1149 
V L "pwcs" 3 1256 "*sint8" `1150 
V L "n" 3 1256 "int16" `1151 
F G "wcstombs" 3 1257 "int16(*sint8 s,*sint8 pwcs,int16 n)" `1148 
V G "_Randseed" 3 1266 "int32" `1152 
F G "rand" 3 1269 "int16()" `883 
V L "seed" 3 1274 "int32" `1157 
F G "srand" 3 1275 "void(int32 seed)" `884 
V L "p1" 3 1286 "*sint8" `1157 
V L "p2" 3 1286 "*sint8" `1158 
T G "*_Cmpfun" 3 1286 "sint16(*sint8 p1,*sint8 p2)" `1156 
V L "qdata" 3 1291 "*sint8" `1161 
V L "qitems" 3 1291 "int16" `1162 
V L "qsize" 3 1291 "int16" `1163 
V L "cmp" 3 1291 "_Cmpfun" `1164 
F G "qsort" 3 1291 "void(*sint8 qdata,int16 qitems,int16 qsize,_Cmpfun cmp)" `1160 
V L "m" 3 1292 "int16" `1165 
V L "j" 3 1292 "int16" `1166 
V L "i" 3 1292 "int16" `1167 
V L "l" 3 1292 "int16" `1168 
V L "done" 3 1293 "int1" `1169 
V L "t" 3 1294 "int8[16]" `1170 
V L "key" 3 1319 "*sint8" `1173 
V L "base" 3 1319 "*sint8" `1174 
V L "num" 3 1319 "int16" `1175 
V L "width" 3 1319 "int16" `1176 
V L "cmp" 3 1319 "_Cmpfun" `1177 
F G "bsearch" 3 1320 "*sint8(*sint8 key,*sint8 base,int16 num,int16 width,_Cmpfun cmp)" `1172 
V L "p" 3 1321 "*sint8" `1178 
V L "q" 3 1321 "*sint8" `1179 
V L "n" 3 1322 "int16" `1180 
V L "pivot" 3 1323 "int16" `1181 
V L "val" 3 1324 "sint16" `1182 
C L "bsearch" 3 328 1 "FUNCTION"
V G "ADC_RByte1" 0 5 "S32" `1186 
V G "ADC_RByte2" 0 6 "S32" `1187 
V G "ADC_RByte3" 0 7 "S32" `1188 
V G "ADC_RByte_Sum" 0 8 "S32" `1189 
V G "ADCresult" 0 9 "S32" `1190 
V G "Vin" 0 10 "float" `1191 
V G "PGA" 0 11 "U8" `1192  "static float Vref=2.5;"
V G "Sps_buf" 0 13 "U8" `1193 
V G "Global_Ch_Number" 0 13 "U8" `1194 
V G "ADCaddCoef" 0 14 "S16" `1195 
V G "ADCmulCoef" 0 15 "float" `1196 
V G "Final_T_in_K" 0 16 "float" `1197 
V G "ostatok_int_dec" 0 17 "U8" `1198 
V G "ostatok_int_sot" 0 17 "U8" `1199 
V G "LCD_num_symb" 0 18 "U8" `1200 
V G "flash_wr_data" 0 19 "U8[1]" `1201 
V G "Aver_Wr" 0 20 "U8" `1202 
V G "Sps_Wr" 0 21 "U8" `1203 
V G "CRC_Wr" 0 22 "U8" `1204 
V G "ADC_select" 0 23 "U8" `1205 
V G "menu_item" 0 25 "U8" `1206 
V G "menu_sel" 0 26 "S8" `1207 
V G "menu_fl" 0 28 "U8" `1208 
V G "meas_stop_fl" 0 29 "int1" `1209 
V G "LCD_clear_fl" 0 30 "int1" `1210 
V G "reset_fl" 0 31 "int1" `1211 
V G "NumAver" 0 33 "U8" `1212 
V G "ADC_sps_var" 0 34 "U8" `1213 
V G "CRC1" 0 35 "U8" `1214 
V G "CRC2" 0 35 "U8" `1215 
V G "CRC_buf" 0 35 "U8" `1216  "константы EEPROM CRC"
V G "flash_rd_data" 0 36 "U8[4]" `1217  "заготовка массива для чтения из флэш"
V G "temp" 0 37 "S32" `1218 
V G "buf" 0 39 "int8" `1219  "lcd buf"
D G "one" 7 21 "0x00"
D G "two" 7 22 "0x40"
D G "three" 7 23 "0x10"
D G "four" 7 24 "0x50"
V L "uc" 7 27 "int8" `1225 
F G "LCDWriteNibble" 7 28 "void(int8 uc)" `1224 
C L "LCDWriteNibble" 7 1 1 "FUNCTION"
C L "LCDWriteNibble" 7 1 1 "FUNCTION"
C L "LCDWriteNibble" 7 1 1 "FUNCTION"
V L "uc" 7 46 "int8" `1227 
F G "LCDWriteData" 7 47 "void(int8 uc)" `1226 
C L "LCDWriteData" 7 1 1 "FUNCTION"
C L "LCDWriteData" 7 1 1 "FUNCTION"
C L "LCDWriteData" 7 1 1 "FUNCTION"
V L "uc" 7 59 "int8" `1229 
F G "LCDCommand" 7 60 "void(int8 uc)" `1228 
C L "LCDCommand" 7 1 1 "FUNCTION"
C L "LCDCommand" 7 1 1 "FUNCTION"
C L "LCDCommand" 7 1 1 "FUNCTION"
V L "ucPos" 7 69 "int8" `1231 
F G "LCDSetCursor" 7 70 "void(int8 ucPos)" `1230 
F G "LCDClear" 7 75 "void()" `1232 
C L "LCDClear" 7 1 1 "FUNCTION"
F G "LCDInit" 7 82 "void()" `1233 
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 2 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 2 "FUNCTION"
C L "LCDInit" 7 1 1 "FUNCTION"
C L "LCDInit" 7 1 2 "FUNCTION"
V L "c" 7 117 "sint8" `1235 
F G "LCDPutCh" 7 118 "void(sint8 c)" `1234 
V L "c" 7 122 "sint8" `1237 
F G "LCDMsg" 7 123 "void(sint8 c)" `1236 
F G "LCDWelcome" 7 129 "void()" `1238 
V L "_u16" 7 140 "U32" `1243 
V L "u8NumDigs" 7 140 "U8" `1244 
F G "LCDPutU16" 7 141 "void(U32 _u16,U8 u8NumDigs)" `1242 
V L "u16a" 7 143 "U32" `1245 
V L "u16b" 7 143 "U32" `1246 
V L "_u16" 7 186 "U32" `1251 
V L "u8NumDigs" 7 186 "U8" `1252 
F G "LCDPutU32" 7 187 "void(U32 _u16,U8 u8NumDigs)" `1250 
V L "u16a" 7 188 "U32" `1253 
V L "u16b" 7 188 "U32" `1254 
V L "s32a" 7 257 "S32" `1256 
V L "u8NumDigs" 7 257 "U8" `1257 
F G "LCDPutS32" 7 258 "void(S32 s32a,U8 u8NumDigs)" `1255 
V L "c" 7 259 "sint8" `1258 
F G "ADC_wakeUp" 8 2 "void()" `1259 
C L "ADC_wakeUp" 8 7 1 "FUNCTION"
C L "ADC_wakeUp" 8 7 1 "FUNCTION"
C L "ADC_wakeUp" 8 7 1 "FUNCTION"
C L "ADC_wakeUp" 8 7 1 "FUNCTION"
V L "RegName" 8 25 "U8" `1261 
F G "RdReg" 8 26 "U8(U8 RegName)" `1260 
V L "RegValue" 8 27 "U8" `1262 
C L "RdReg" 8 7 2 "FUNCTION"
C L "RdReg" 8 7 1 "FUNCTION"
C L "RdReg" 8 7 1 "FUNCTION"
C L "RdReg" 8 7 1 "FUNCTION"
V L "RegName" 8 42 "U8" `1264 
V L "CommandByte" 8 42 "int8" `1265 
F G "WrReg" 8 43 "void(U8 RegName,int8 CommandByte)" `1263 
C L "WrReg" 8 7 1 "FUNCTION"
C L "WrReg" 8 7 1 "FUNCTION"
F G "ADC_RData" 8 58 "S32()" `1266 
F G "ADC_StartRdContin" 8 81 "void()" `1268 
F G "ADC_RdataC" 8 92 "S32()" `1269 
F G "ADC_StopRd" 8 131 "void()" `1270 
V L "SPS" 8 144 "U8" `1272 
F G "ADC_sps_set" 8 144 "void(U8 SPS)" `1271 
C L "ADC_sps_set" 8 7 1 "FUNCTION"
F G "ADC_SelfCal" 8 153 "void()" `1273 
V L "Ch_Number" 8 217 "U8" `1275 
F G "ADC_setCh" 8 217 "void(U8 Ch_Number)" `1274 
V L "k" 8 248 "S32" `1277 
F G "Read_ADC_vol_in" 8 248 "S32(S32 k)" `1276 
V L "VinInt" 8 249 "S32" `1278 
C L "Read_ADC_vol_in" 8 7 1 "FUNCTION"
V L "NumSamples" 8 257 "U8" `1290 
F G "ADC_vol_average" 8 257 "S32(U8 NumSamples)" `1289 
V L "A" 8 259 "S32" `1291 
V L "Sum" 8 259 "S32" `1292 
V L "i" 8 260 "U8" `1293 
V L "PGA_val" 8 270 "U8" `1295 
F G "ADC_set_PGA" 8 270 "void(U8 PGA_val)" `1294 
C L "ADC_set_PGA" 8 7 9 "FUNCTION"
F G "ADC_init" 8 315 "void()" `1296 
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
C L "ADC_init" 8 7 1 "FUNCTION"
V L "t" 8 333 "float" `1298 
V L "k" 8 333 "U8" `1299  "возведение t в степень k"
F G "power" 8 334 "float(float t,U8 k)" `1297 
V L "res" 8 335 "float" `1300 
F G "ADC_vol_to_T" 8 346 "float()" `1301 
V L "R" 8 347 "float" `1302 
V L "Temper" 8 348 "float" `1303 
V L "k1" 8 348 "float" `1304 
V L "k2" 8 348 "float" `1305 
V L "k3" 8 348 "float" `1306 
V L "k4" 8 348 "float" `1307 
V L "k5" 8 348 "float" `1308 
V L "k6" 8 348 "float" `1309 
V L "k7" 8 348 "float" `1310 
V L "p" 8 349 "float" `1311 
V L "z1" 8 349 "float" `1312 
V L "z2" 8 349 "float" `1313 
V L "z3" 8 349 "float" `1314 
V L "z4" 8 349 "float" `1315 
V L "z5" 8 349 "float" `1316 
V L "z6" 8 349 "float" `1317 
V L "Temper_int" 8 350 "U8" `1318 
C L "ADC_vol_to_T" 8 7 1 "FUNCTION"
C L "ADC_vol_to_T" 8 7 1 "FUNCTION"
C L "ADC_vol_to_T" 8 7 1 "FUNCTION"
C L "ADC_vol_to_T" 8 7 1 "FUNCTION"
C L "ADC_vol_to_T" 8 7 1 "FUNCTION"
C L "Rd_Flash" 8 7 306 "FUNCTION"
C L "Rd_Flash" 0 49 1 "FUNCTION"
F G "Rd_Flash" 0 51 "void()" `1326 
F G "Wr_Flash" 0 61 "void()" `1331 
C L "Wr_Flash" 0 49 1 "FUNCTION"
C L "Wr_Flash" 0 49 1 "FUNCTION"
V L "pcBlock" 0 73 "*int8" `1339 
V L "len" 0 73 "int16" `1340 
F G "Crc8" 0 74 "int8(*int8 pcBlock,int16 len)" `1338  "Name  : CRC-8"
C L "Crc8" 0 49 7 "FUNCTION"
V L "crc" 0 86 "int8" `1341 
V L "i" 0 87 "int16" `1342 
F G "OscSetup" 0 100 "void()" `1343  "Fcy=Fosc/2"
C L "OscSetup" 0 49 2 "FUNCTION"
C L "OscSetup" 0 49 1 "FUNCTION"
C L "OscSetup" 0 49 1 "FUNCTION"
C L "OscSetup" 0 49 1 "FUNCTION"
C L "OscSetup" 0 49 1 "FUNCTION"
F G "EnableInt" 0 119 "void()" `1344 
F G "DisableInt" 0 130 "void()" `1345 
F G "MCU_init" 0 139 "void()" `1346 
C L "MCU_init" 0 49 1 "FUNCTION"
C L "MCU_init" 0 49 1 "FUNCTION"
C L "MCU_init" 0 49 4 "FUNCTION"
C L "MCU_init" 0 49 1 "FUNCTION"
C L "MCU_init" 0 49 1 "FUNCTION"
C L "MCU_init" 0 49 1 "FUNCTION"
F G "Bpush_delay" 0 183 "void()" `1347 
V L "counter" 0 185 "U16" `1348 
F G "LCD_print_menu" 0 192 "void()" `1349 
F G "LCD_main_menu" 0 203 "void()" `1354  "DisableInt();"
C L "LCD_main_menu" 0 49 2 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
C L "LCD_main_menu" 0 49 1 "FUNCTION"
F G "Full_dev_reset" 0 240 "void()" `1371 
C L "Full_dev_reset" 0 49 3 "FUNCTION"
C L "Full_dev_reset" 0 49 1 "FUNCTION"
C L "Full_dev_reset" 0 49 1 "FUNCTION"
C L "Full_dev_reset" 0 49 1 "FUNCTION"
C L "Full_dev_reset" 0 49 1 "FUNCTION"
C L "Full_dev_reset" 0 49 1 "FUNCTION"
V L "chanel" 0 267 "U8" `1375 
F G "ADC_rd_and_print_ch" 0 267 "void(U8 chanel)" `1374 
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 3 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 3 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 4 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 5 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 4 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 4 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 4 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 4 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 4 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 1 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 7 "FUNCTION"
C L "ADC_rd_and_print_ch" 0 49 2 "FUNCTION"
F G "save_to_flash" 0 467 "void()" `1387 
C L "save_to_flash" 0 49 1 "FUNCTION"
F G "cn_irq_handler" 0 477 "void()" `1388 
C L "cn_irq_handler" 0 49 1 "FUNCTION"
C L "cn_irq_handler" 0 49 1 "FUNCTION"
C L "cn_irq_handler" 0 49 1 "FUNCTION"
F G "timer1_irq_handler" 0 495 "void()" `1389 
C L "timer1_irq_handler" 0 49 1 "FUNCTION"
C L "timer1_irq_handler" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
F G "MAIN" 0 505 "void()" `1390 
V L "ch" 0 506 "U8" `1391 
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 2 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 2 "FUNCTION"
C L "MAIN" 0 49 2 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
C L "MAIN" 0 49 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_f" 1 0
F B "output_g" 1 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_f" 0 0
F B "input_g" 0 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_f" 1 0
F B "set_tris_g" 1 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_f" 0 0
F B "get_tris_g" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_f" 0 0
F B "input_change_g" 0 0
F B "set_open_drain_d" 1 0
F B "set_open_drain_f" 1 0
F B "set_open_drain_g" 1 0
F B "set_pullup" 1 2
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_timer6" 1 2
F B "get_timer6" 0 0
F B "set_timer6" 1 0
F B "setup_timer7" 1 2
F B "get_timer7" 0 0
F B "set_timer7" 1 0
F B "get_timer67" 0 0
F B "set_timer67" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_dma" 3 0
F B "dma_start" 3 5
F B "dma_status" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "spi_xfer" 0 3
F B "spi_speed" 1 3
F B "spi_init" 1 2
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
