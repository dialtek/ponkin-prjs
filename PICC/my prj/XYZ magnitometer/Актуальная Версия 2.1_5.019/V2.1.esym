F N "MAIN" 0 851 ""
D G "__PCH__" 0 1263 ""5.049""
D G "__DEVICE__" 0 1263 "2580"
D G "__DATE__" 0 1263 ""20-èþë-18""
D G "__TIME__" 0 1263 ""14:19:16""
D G "_UNICODE" 0 1263 ""?""
D G "__EVAL" 0 1263 ""?"" "Software V2.3 for magnetic induction's tester V2.1 *"
c L "set_tris_a" 2 1 6 "FUNCTION"
f N "set_tris_a" 2 46 ""
v L "value" 2 46 "int8" `54 
f B "set_tris_a" 2 46 "void(int8 value)" `53 
f N "set_tris_b" 2 47 ""
v L "value" 2 47 "int8" `56 
f B "set_tris_b" 2 47 "void(int8 value)" `55 
f N "set_tris_c" 2 48 ""
v L "value" 2 48 "int8" `58 
f B "set_tris_c" 2 48 "void(int8 value)" `57 
f N "set_tris_e" 2 49 ""
v L "value" 2 49 "int8" `60 
f B "set_tris_e" 2 49 "void(int8 value)" `59 
f N "get_tris_a" 2 50 ""
f B "get_tris_a" 2 50 "int8()" `61 
f N "get_tris_b" 2 51 ""
f B "get_tris_b" 2 51 "int8()" `62 
f N "get_tris_c" 2 52 ""
f B "get_tris_c" 2 52 "int8()" `63 
f N "get_tris_e" 2 53 ""
f B "get_tris_e" 2 53 "int8()" `64 
f N "output_a" 2 54 ""
v L "value" 2 54 "int8" `66 
f B "output_a" 2 54 "void(int8 value)" `65 
f N "output_b" 2 55 ""
v L "value" 2 55 "int8" `68 
f B "output_b" 2 55 "void(int8 value)" `67 
f N "output_c" 2 56 ""
v L "value" 2 56 "int8" `70 
f B "output_c" 2 56 "void(int8 value)" `69 
f N "output_e" 2 57 ""
v L "value" 2 57 "int8" `72 
f B "output_e" 2 57 "void(int8 value)" `71 
f N "input_a" 2 58 ""
f B "input_a" 2 58 "int8()" `73 
f N "input_b" 2 59 ""
f B "input_b" 2 59 "int8()" `74 
f N "input_c" 2 60 ""
f B "input_c" 2 60 "int8()" `75 
f N "input_e" 2 61 ""
f B "input_e" 2 61 "int8()" `76 
f N "input_change_a" 2 62 ""
f B "input_change_a" 2 62 "int8()" `77 
f N "input_change_b" 2 63 ""
f B "input_change_b" 2 63 "int8()" `78 
f N "input_change_c" 2 64 ""
f B "input_change_c" 2 64 "int8()" `79 
f N "input_change_e" 2 65 ""
f B "input_change_e" 2 65 "int8()" `80 
f N "port_a_pullups" 2 66 ""
v L "value" 2 66 "int8" `82 
f B "port_a_pullups" 2 66 "void(int8 value)" `81 
f N "port_b_pullups" 2 67 ""
v L "upmask" 2 67 "int8" `84 
f B "port_b_pullups" 2 67 "void(int8 upmask)" `83 
f N "port_c_pullups" 2 68 ""
v L "value" 2 68 "int8" `86 
f B "port_c_pullups" 2 68 "void(int8 value)" `85 
f N "port_d_pullups" 2 69 ""
v L "value" 2 69 "int8" `88 
f B "port_d_pullups" 2 69 "void(int8 value)" `87 
f N "port_e_pullups" 2 70 ""
v L "value" 2 70 "int8" `90 
f B "port_e_pullups" 2 70 "void(int8 value)" `89 
f N "port_f_pullups" 2 71 ""
v L "value" 2 71 "int8" `92 
f B "port_f_pullups" 2 71 "void(int8 value)" `91 
f N "port_g_pullups" 2 72 ""
v L "value" 2 72 "int8" `94 
f B "port_g_pullups" 2 72 "void(int8 value)" `93 
f N "input" 2 73 ""
v L "pin" 2 73 "int16" `96 
f B "input" 2 73 "int8(int16 pin)" `95 
f N "input_state" 2 74 ""
v L "pin" 2 74 "int16" `98 
f B "input_state" 2 74 "int8(int16 pin)" `97 
f N "output_low" 2 75 ""
v L "pin" 2 75 "int16" `100 
f B "output_low" 2 75 "void(int16 pin)" `99 
f N "output_high" 2 76 ""
v L "pin" 2 76 "int16" `102 
f B "output_high" 2 76 "void(int16 pin)" `101 
f N "output_toggle" 2 77 ""
v L "pin" 2 77 "int16" `104 
f B "output_toggle" 2 77 "void(int16 pin)" `103 
f N "output_bit" 2 78 ""
v L "pin" 2 78 "int16" `106 
v L "level" 2 78 "int8" `107 
f B "output_bit" 2 78 "void(int16 pin,int8 level)" `105 
f N "output_float" 2 79 ""
v L "pin" 2 79 "int16" `109 
f B "output_float" 2 79 "void(int16 pin)" `108 
f N "output_drive" 2 80 ""
v L "pin" 2 80 "int16" `111 
f B "output_drive" 2 80 "void(int16 pin)" `110  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 84 "31744"
d G "PIN_A1" 2 85 "31745"
d G "PIN_A2" 2 86 "31746"
d G "PIN_A3" 2 87 "31747"
d G "PIN_A5" 2 88 "31749"
d G "PIN_A6" 2 89 "31750"
d G "PIN_A7" 2 90 "31751"
d G "PIN_B0" 2 92 "31752"
d G "PIN_B1" 2 93 "31753"
d G "PIN_B2" 2 94 "31754"
d G "PIN_B3" 2 95 "31755"
d G "PIN_B4" 2 96 "31756"
d G "PIN_B5" 2 97 "31757"
d G "PIN_B6" 2 98 "31758"
d G "PIN_B7" 2 99 "31759"
d G "PIN_C0" 2 101 "31760"
d G "PIN_C1" 2 102 "31761"
d G "PIN_C2" 2 103 "31762"
d G "PIN_C3" 2 104 "31763"
d G "PIN_C4" 2 105 "31764"
d G "PIN_C5" 2 106 "31765"
d G "PIN_C6" 2 107 "31766"
d G "PIN_C7" 2 108 "31767"
d G "PIN_E3" 2 110 "31779"
d G "FALSE" 2 113 "0"
d G "TRUE" 2 114 "1"
d G "BYTE" 2 116 "int8"
d G "BOOLEAN" 2 117 "int1"
d G "getc" 2 119 "getch"
d G "fgetc" 2 120 "getch"
d G "getchar" 2 121 "getch"
d G "putc" 2 122 "putchar"
d G "fputc" 2 123 "putchar"
d G "fgets" 2 124 "gets"
d G "fputs" 2 125 "puts"
c L "output_drive" 2 1 3 "FUNCTION"
f N "restart_cause" 2 130 ""
f B "restart_cause" 2 130 "int8()" `112 
f N "reset_cpu" 2 131 ""
f B "reset_cpu" 2 131 "void()" `113 
f N "sleep" 2 132 ""
f B "sleep" 2 132 "void()" `114 
f N "sleep" 2 133 ""
v L "type" 2 133 "int8" `116 
f B "sleep" 2 133 "void(int8 type)" `115  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 135 "7"
d G "MCLR_FROM_SLEEP" 2 136 "11"
d G "MCLR_FROM_RUN" 2 137 "15"
d G "NORMAL_POWER_UP" 2 138 "12"
d G "BROWNOUT_RESTART" 2 139 "14"
d G "WDT_FROM_SLEEP" 2 140 "3"
d G "RESET_INSTRUCTION" 2 141 "0"
d G "SLEEP_FULL" 2 144 "0" "Default"
d G "SLEEP_IDLE" 2 145 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 5 "FUNCTION"
f N "setup_timer_0" 2 152 ""
v L "mode" 2 152 "int8" `118 
f B "setup_timer_0" 2 152 "void(int8 mode)" `117 
f N "set_timer0" 2 153 ""
v L "value" 2 153 "int16" `120 
f B "set_timer0" 2 153 "void(int16 value)" `119 
f N "get_timer0" 2 154 ""
f B "get_timer0" 2 154 "int16()" `121 
f N "setup_counters" 2 155 ""
v L "mode" 2 155 "int8" `123 
v L "prescaler" 2 155 "int8" `124 
f B "setup_counters" 2 155 "void(int8 mode,int8 prescaler)" `122 
f N "set_rtcc" 2 156 ""
v L "value" 2 156 "int16" `126 
f B "set_rtcc" 2 156 "void(int16 value)" `125 
f N "get_rtcc" 2 157 ""
f B "get_rtcc" 2 157 "int16()" `127  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 159 "0"
d G "T0_EXT_L_TO_H" 2 160 "32"
d G "T0_EXT_H_TO_L" 2 161 "48"
d G "T0_DIV_1" 2 163 "8"
d G "T0_DIV_2" 2 164 "0"
d G "T0_DIV_4" 2 165 "1"
d G "T0_DIV_8" 2 166 "2"
d G "T0_DIV_16" 2 167 "3"
d G "T0_DIV_32" 2 168 "4"
d G "T0_DIV_64" 2 169 "5"
d G "T0_DIV_128" 2 170 "6"
d G "T0_DIV_256" 2 171 "7"
d G "T0_OFF" 2 173 "0x80"
d G "T0_8_BIT" 2 175 "0x40"
d G "RTCC_INTERNAL" 2 179 "0"
d G "RTCC_EXT_L_TO_H" 2 180 "32"
d G "RTCC_EXT_H_TO_L" 2 181 "48"
d G "RTCC_DIV_1" 2 182 "8"
d G "RTCC_DIV_2" 2 183 "0"
d G "RTCC_DIV_4" 2 184 "1"
d G "RTCC_DIV_8" 2 185 "2"
d G "RTCC_DIV_16" 2 186 "3"
d G "RTCC_DIV_32" 2 187 "4"
d G "RTCC_DIV_64" 2 188 "5"
d G "RTCC_DIV_128" 2 189 "6"
d G "RTCC_DIV_256" 2 190 "7"
d G "RTCC_OFF" 2 191 "0x80"
d G "RTCC_8_BIT" 2 192 "0x40"
c L "get_rtcc" 2 1 8 "FUNCTION"
f N "setup_wdt" 2 203 ""
v L "mode" 2 203 "int16" `129 
f B "setup_wdt" 2 203 "void(int16 mode)" `128 
f N "restart_wdt" 2 204 ""
f B "restart_wdt" 2 204 "void()" `130  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 206 "0x100"
d G "WDT_OFF" 2 207 "0"
d G "WDT_4MS" 2 209 "0x300"
d G "WDT_8MS" 2 210 "0x500"
d G "WDT_16MS" 2 211 "0x700"
d G "WDT_32MS" 2 212 "0x900"
d G "WDT_64MS" 2 213 "0xB00"
d G "WDT_128MS" 2 214 "0xD00"
d G "WDT_256MS" 2 215 "0xF00"
d G "WDT_512MS" 2 216 "0x1100"
d G "WDT_1S" 2 217 "0x1300"
d G "WDT_2S" 2 218 "0x1500"
d G "WDT_4S" 2 219 "0x1700"
d G "WDT_8S" 2 220 "0x1900"
d G "WDT_16" 2 221 "0x1B00"
d G "WDT_32S" 2 222 "0x1D00"
d G "WDT_64S" 2 223 "0x1F00"
d G "WDT_128S" 2 224 "0x2100"
c L "restart_wdt" 2 1 3 "FUNCTION"
f N "setup_timer_1" 2 229 ""
v L "mode" 2 229 "int16" `132 
f B "setup_timer_1" 2 229 "void(int16 mode)" `131 
f N "get_timer1" 2 230 ""
f B "get_timer1" 2 230 "int16()" `133 
f N "set_timer1" 2 231 ""
v L "value" 2 231 "int16" `135 
f B "set_timer1" 2 231 "void(int16 value)" `134  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 234 "0"
d G "T1_INTERNAL" 2 235 "0x07"
d G "T1_EXTERNAL" 2 236 "0x87"
d G "T1_EXTERNAL_SYNC" 2 237 "0x83"
d G "T1_FOSC" 2 238 "0x47"
d G "T1_ENABLE_SOSC" 2 240 "0x08"
d G "T1_DIV_BY_1" 2 242 "0"
d G "T1_DIV_BY_2" 2 243 "0x10"
d G "T1_DIV_BY_4" 2 244 "0x20"
d G "T1_DIV_BY_8" 2 245 "0x30"
d G "T1_GATE" 2 247 "0x8000"
d G "T1_GATE_INVERTED" 2 248 "0xC000"
d G "T1_GATE_TOGGLE" 2 249 "0xA000"
d G "T1_GATE_SINGLE" 2 250 "0x9000"
d G "T1_GATE_TIMER2" 2 251 "0x8100"
d G "T1_GATE_COMP1" 2 252 "0x8200"
d G "T1_GATE_COMP2" 2 253 "0x8300"
c L "set_timer1" 2 1 3 "FUNCTION"
f N "setup_timer_2" 2 258 ""
v L "mode" 2 258 "int8" `137 
v L "period" 2 258 "int8" `138 
v L "postscale" 2 258 "int8" `139 
f B "setup_timer_2" 2 258 "void(int8 mode,int8 period,int8 postscale)" `136 
f N "get_timer2" 2 259 ""
f B "get_timer2" 2 259 "int8()" `140 
f N "set_timer2" 2 260 ""
v L "value" 2 260 "int8" `142 
f B "set_timer2" 2 260 "void(int8 value)" `141  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 262 "0"
d G "T2_DIV_BY_1" 2 263 "4"
d G "T2_DIV_BY_4" 2 264 "5"
d G "T2_DIV_BY_16" 2 265 "6"
c L "set_timer2" 2 1 3 "FUNCTION"
f N "setup_timer_3" 2 270 ""
v L "mode" 2 270 "int16" `144 
f B "setup_timer_3" 2 270 "void(int16 mode)" `143 
f N "get_timer3" 2 271 ""
f B "get_timer3" 2 271 "int16()" `145 
f N "set_timer3" 2 272 ""
v L "value" 2 272 "int16" `147 
f B "set_timer3" 2 272 "void(int16 value)" `146  "Constants used for SETUP_TIMER_3() are:"
d G "T3_DISABLED" 2 275 "0"
d G "T3_INTERNAL" 2 276 "0x07"
d G "T3_EXTERNAL" 2 277 "0x87"
d G "T3_EXTERNAL_SYNC" 2 278 "0x83"
d G "T3_FOSC" 2 279 "0x47"
d G "T3_ENABLE_SOSC" 2 281 "0x08"
d G "T3_DIV_BY_1" 2 283 "0"
d G "T3_DIV_BY_2" 2 284 "0x10"
d G "T3_DIV_BY_4" 2 285 "0x20"
d G "T3_DIV_BY_8" 2 286 "0x30"
d G "T3_GATE" 2 288 "0x8000"
d G "T3_GATE_INVERTED" 2 289 "0xC000"
d G "T3_GATE_TOGGLE" 2 290 "0xA000"
d G "T3_GATE_SINGLE" 2 291 "0x9000"
d G "T3_GATE_TIMER4" 2 292 "0x8100"
d G "T3_GATE_COMP1" 2 293 "0x8200"
d G "T3_GATE_COMP2" 2 294 "0x8300"
c L "set_timer3" 2 1 3 "FUNCTION"
f N "setup_timer_4" 2 299 ""
v L "mode" 2 299 "int16" `149 
v L "period" 2 299 "int8" `150 
v L "postscaler" 2 299 "int8" `151 
f B "setup_timer_4" 2 299 "void(int16 mode,int8 period,int8 postscaler)" `148 
f N "get_timer4" 2 300 ""
f B "get_timer4" 2 300 "int8()" `152 
f N "set_timer4" 2 301 ""
v L "value" 2 301 "int8" `154 
f B "set_timer4" 2 301 "void(int8 value)" `153  "Constants used for SETUP_TIMER_4() are:"
d G "T4_DISABLED" 2 303 "0"
d G "T4_DIV_BY_1" 2 304 "4"
d G "T4_DIV_BY_4" 2 305 "5"
d G "T4_DIV_BY_16" 2 306 "6"
c L "set_timer4" 2 1 4 "FUNCTION"
f N "setup_ccp1" 2 312 ""
v L "mode" 2 312 "int32" `156 
f B "setup_ccp1" 2 312 "void(int32 mode)" `155 
f N "setup_ccp1" 2 313 ""
v L "mode" 2 313 "int32" `158 
v L "pwm" 2 313 "int8" `159 
f B "setup_ccp1" 2 313 "void(int32 mode,int8 pwm)" `157 
f N "set_pwm1_duty" 2 314 ""
v L "value" 2 314 "int16" `161 
f B "set_pwm1_duty" 2 314 "void(int16 value)" `160  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 316 "0"
d G "CCP_CAPTURE_FE" 2 317 "0x04"
d G "CCP_CAPTURE_RE" 2 318 "0x05"
d G "CCP_CAPTURE_DIV_4" 2 319 "0x06"
d G "CCP_CAPTURE_DIV_16" 2 320 "0x07"
d G "CCP_COMPARE_SET_ON_MATCH" 2 321 "0x08"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 322 "0x09"
d G "CCP_COMPARE_INT" 2 323 "0x0A"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 324 "0x02"
d G "CCP_COMPARE_RESET_TIMER" 2 325 "0x0B"
d G "CCP_PWM" 2 326 "0x0C"
d G "CCP_PWM_PLUS_1" 2 327 "0x1c"
d G "CCP_PWM_PLUS_2" 2 328 "0x2c"
d G "CCP_PWM_PLUS_3" 2 329 "0x3c"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
d G "CCP_USE_TIMER1_AND_TIMER2" 2 338 "0x0000"
d G "CCP_USE_TIMER3_AND_TIMER4" 2 339 "0x0100"
d G "CCP_PWM_H_H" 2 342 "0x0c"
d G "CCP_PWM_H_L" 2 343 "0x0d"
d G "CCP_PWM_L_H" 2 344 "0x0e"
d G "CCP_PWM_L_L" 2 345 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 347 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 348 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 349 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 351 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 352 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 353 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 354 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 355 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 356 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 357 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 359 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 360 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 361 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 363 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 364 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 365 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 367 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 369 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 370 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 371 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 372 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 373 "0x10000000"
d G "CCP_COMPLEMENTARY_AB" 2 374 "0x43000000"
d G "CCP_COMPLEMENTARY_AC" 2 375 "0x85000000"
d G "CCP_COMPLEMENTARY_AD" 2 376 "0xC9000000"
c L "set_pwm1_duty" 2 1 1 "FUNCTION"
f N "setup_ccp2" 2 380 ""
v L "mode" 2 380 "int32" `166 
f B "setup_ccp2" 2 380 "void(int32 mode)" `165 
f N "setup_ccp2" 2 381 ""
v L "mode" 2 381 "int32" `168 
v L "pwm" 2 381 "int8" `169 
f B "setup_ccp2" 2 381 "void(int32 mode,int8 pwm)" `167 
f N "set_pwm2_duty" 2 382 ""
v L "value" 2 382 "int16" `171 
f B "set_pwm2_duty" 2 382 "void(int16 value)" `170 
c L "set_pwm2_duty" 2 1 1 "FUNCTION"
f N "setup_ccp3" 2 388 ""
v L "mode" 2 388 "int32" `176 
f B "setup_ccp3" 2 388 "void(int32 mode)" `175 
f N "setup_ccp3" 2 389 ""
v L "mode" 2 389 "int32" `178 
v L "pwm" 2 389 "int8" `179 
f B "setup_ccp3" 2 389 "void(int32 mode,int8 pwm)" `177 
f N "set_pwm3_duty" 2 390 ""
v L "value" 2 390 "int16" `181 
f B "set_pwm3_duty" 2 390 "void(int16 value)" `180 
c L "set_pwm3_duty" 2 1 1 "FUNCTION"
f N "setup_ccp4" 2 396 ""
v L "mode" 2 396 "int32" `186 
f B "setup_ccp4" 2 396 "void(int32 mode)" `185 
f N "setup_ccp4" 2 397 ""
v L "mode" 2 397 "int32" `188 
v L "pwm" 2 397 "int8" `189 
f B "setup_ccp4" 2 397 "void(int32 mode,int8 pwm)" `187 
f N "set_pwm4_duty" 2 398 ""
v L "value" 2 398 "int16" `191 
f B "set_pwm4_duty" 2 398 "void(int16 value)" `190 
c L "set_pwm4_duty" 2 1 1 "FUNCTION"
f N "setup_ccp5" 2 404 ""
v L "mode" 2 404 "int32" `196 
f B "setup_ccp5" 2 404 "void(int32 mode)" `195 
f N "setup_ccp5" 2 405 ""
v L "mode" 2 405 "int32" `198 
v L "pwm" 2 405 "int8" `199 
f B "setup_ccp5" 2 405 "void(int32 mode,int8 pwm)" `197 
f N "set_pwm5_duty" 2 406 ""
v L "value" 2 406 "int16" `201 
f B "set_pwm5_duty" 2 406 "void(int16 value)" `200 
c L "set_pwm5_duty" 2 1 3 "FUNCTION"
f N "setup_spi" 2 413 ""
v L "mode" 2 413 "int32" `206 
f B "setup_spi" 2 413 "void(int32 mode)" `205 
f N "spi_write" 2 414 ""
v L "value" 2 414 "int8" `208 
f B "spi_write" 2 414 "void(int8 value)" `207 
f N "spi_read" 2 415 ""
f B "spi_read" 2 415 "int8()" `209 
f N "spi_read" 2 416 ""
v L "value" 2 416 "int8" `211 
f B "spi_read" 2 416 "int8(int8 value)" `210 
f N "spi_data_in" 2 417 ""
f B "spi_data_in" 2 417 "int8()" `212  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 419 "0x00"
d G "SPI_MASTER" 2 420 "0x20"
d G "SPI_SLAVE" 2 421 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 422 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 423 "0x00"
d G "SPI_CLK_DIV_4" 2 424 "0x00"
d G "SPI_CLK_DIV_16" 2 425 "0x01"
d G "SPI_CLK_DIV_64" 2 426 "0x02"
d G "SPI_CLK_T2" 2 427 "0x03"
d G "SPI_SS_DISABLED" 2 428 "0x01"
d G "SPI_XMIT_L_TO_H" 2 430 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 431 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 433 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 434 "0x8000"
d G "SPI_L_TO_H" 2 437 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 438 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 1 2 "FUNCTION"
f N "setup_uart" 2 442 ""
v L "baud" 2 442 "int32" `214 
f B "setup_uart" 2 442 "void(int32 baud)" `213 
f N "setup_uart" 2 443 ""
v L "baud" 2 443 "int32" `216 
v L "stream" 2 443 "int8" `217 
f B "setup_uart" 2 443 "void(int32 baud,int8 stream)" `215 
f N "setup_uart" 2 444 ""
v L "baud" 2 444 "int32" `219 
v L "stream" 2 444 "int8" `220 
v L "clock" 2 444 "int32" `221 
f B "setup_uart" 2 444 "void(int32 baud,int8 stream,int32 clock)" `218 
f N "set_uart_speed" 2 445 ""
v L "baud" 2 445 "int32" `223 
f B "set_uart_speed" 2 445 "void(int32 baud)" `222 
f N "set_uart_speed" 2 446 ""
v L "baud" 2 446 "int32" `225 
v L "stream" 2 446 "int8" `226 
f B "set_uart_speed" 2 446 "void(int32 baud,int8 stream)" `224 
f N "set_uart_speed" 2 447 ""
v L "baud" 2 447 "int32" `228 
v L "stream" 2 447 "int8" `229 
v L "clock" 2 447 "int32" `230 
f B "set_uart_speed" 2 447 "void(int32 baud,int8 stream,int32 clock)" `227  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 451 "2"
d G "UART_DATA" 2 452 "4"
d G "UART_AUTODETECT" 2 453 "8"
d G "UART_AUTODETECT_NOWAIT" 2 454 "9"
d G "UART_WAKEUP_ON_RDA" 2 455 "10"
d G "UART_SEND_BREAK" 2 456 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
f N "setup_comparator" 2 460 ""
v L "mode" 2 460 "int32" `232 
f B "setup_comparator" 2 460 "void(int32 mode)" `231  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 463 "0x0404"
d G "NC_NC" 2 464 "0x0404"
d G "CP1_B1_B0" 2 467 "0x0080	"
d G "CP1_A5_B0" 2 468 "0x0082"
d G "CP1_VBG_B0" 2 469 "0x0083"
d G "CP1_B1_VREF" 2 470 "0x0084"
d G "CP1_A5_VREF" 2 471 "0x0086	"
d G "CP1_VBG_VREF" 2 472 "0x0087"
d G "CP1_OUT_ON_B2" 2 474 "0x0040"
d G "CP1_INVERT" 2 475 "0x0020"
d G "CP1_INT_L2H" 2 476 "0x0008"
d G "CP1_INT_H2L" 2 477 "0x0010"
d G "CP2_A5_B4" 2 480 "0x8000"
d G "CP2_B1_B4" 2 481 "0x8200"
d G "CP2_VBG_B4" 2 482 "0x8300"
d G "CP2_A5_VREF" 2 483 "0x8400"
d G "CP2_B1_VREF" 2 484 "0x8600"
d G "CP2_VBG_VREF" 2 485 "0x8700"
d G "CP2_OUT_ON_B3" 2 487 "0x4000"
d G "CP2_INVERT" 2 488 "0x2000"
d G "CP2_INT_L2H" 2 489 "0x0800"
d G "CP2_INT_H2L" 2 490 "0x1000"
c L "setup_comparator" 2 1 2 "FUNCTION"
f N "setup_vref" 2 497 ""
v L "mode" 2 497 "int8" `236 
f B "setup_vref" 2 497 "void(int8 mode)" `235  "Constants used in setup_vref() are:"
d G "VREF_OFF" 2 499 "0"
d G "VREF_ON" 2 500 "0x80"
d G "VREF_EXT" 2 501 "0x20" "Range for ref gen VREF- to VREF+"
d G "VREF_OUT_A0" 2 502 "0x40"
c L "setup_vref" 2 1 3 "FUNCTION"
f N "setup_low_volt_detect" 2 507 ""
v L "mode" 2 507 "int8" `238 
f B "setup_low_volt_detect" 2 507 "void(int8 mode)" `237  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 509 "0x1F"
d G "LVD_45" 2 510 "0x1E"
d G "LVD_42" 2 511 "0x1D"
d G "LVD_40" 2 512 "0x1C"
d G "LVD_38" 2 513 "0x1B"
d G "LVD_36" 2 514 "0x1A"
d G "LVD_35" 2 515 "0x19"
d G "LVD_33" 2 516 "0x18"
d G "LVD_30" 2 517 "0x17"
d G "LVD_28" 2 518 "0x16"
d G "LVD_27" 2 519 "0x15"
d G "LVD_25" 2 520 "0x14"
d G "LVD_24" 2 521 "0x13"
d G "LVD_23" 2 522 "0x12"
d G "LVD_22" 2 523 "0x11"
d G "LVD_21" 2 524 "0x10"
d G "LVD_TRIGGER_BELOW" 2 526 "0"
d G "LVD_TRIGGER_ABOVE" 2 527 "0x80"
c L "setup_low_volt_detect" 2 1 2 "FUNCTION"
f N "setup_oscillator" 2 532 ""
v L "mode" 2 532 "int16" `240 
f B "setup_oscillator" 2 532 "int8(int16 mode)" `239 
f N "setup_oscillator" 2 533 ""
v L "mode" 2 533 "int16" `242 
v L "tune" 2 533 "sint8" `243 
f B "setup_oscillator" 2 533 "int8(int16 mode,sint8 tune)" `241  "Constants used in setup_oscillator() are:"
d G "OSC_31250" 2 535 "0x8000"
d G "OSC_PLL_ON" 2 536 "0x4000"
d G "OSC_PLL_OFF" 2 537 "0"
d G "OSC_31KHZ" 2 538 "0"
d G "OSC_250KHZ" 2 539 "0x10"
d G "OSC_500KHZ" 2 540 "0x20"
d G "OSC_1MHZ" 2 541 "0x30"
d G "OSC_2MHZ" 2 542 "0x40"
d G "OSC_4MHZ" 2 543 "0x50"
d G "OSC_8MHZ" 2 544 "0x60"
d G "OSC_16MHZ" 2 545 "0x70"
d G "OSC_SOSC" 2 547 "1"
d G "OSC_INTRC" 2 548 "2"
d G "OSC_NORMAL" 2 549 "0"
d G "OSC_IDLE_MODE" 2 551 "0x80"
d G "OSC_MFINTRC_ON" 2 553 "0x10000" "MF-INTOSC used instead of HF-INTOSC for 500KHZ, 250KHZ and 31KHZ operating frequencies."
d G "OSC_SOSC_ON" 2 554 "0x80000"
d G "OSC_STATE_STABLE" 2 558 "4"
d G "OSC_STATE_PRIMARY_RUNNING" 2 559 "8"
c L "setup_oscillator" 2 1 4 "FUNCTION"
f N "setup_adc" 2 566 ""
v L "mode" 2 566 "int16" `245 
f B "setup_adc" 2 566 "void(int16 mode)" `244 
f N "read_adc" 2 567 ""
f B "read_adc" 2 567 "int8()" `246 
f N "read_adc" 2 568 ""
v L "mode" 2 568 "int8" `248 
f B "read_adc" 2 568 "int8(int8 mode)" `247 
f N "read_adc" 2 569 ""
f B "read_adc" 2 569 "int16()" `249 
f N "read_adc" 2 570 ""
v L "mode" 2 570 "int8" `250 
f B "read_adc" 2 570 "int16(int8 mode,int32 pins)" `249 
f N "adc_done" 2 571 ""
f B "adc_done" 2 571 "int8(int8 mode,int32 pins)" `249  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 573 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 574 "0x100"
d G "ADC_CLOCK_DIV_4" 2 575 "0x04"
d G "ADC_CLOCK_DIV_8" 2 576 "0x01"
d G "ADC_CLOCK_DIV_16" 2 577 "0x05"
d G "ADC_CLOCK_DIV_32" 2 578 "0x02"
d G "ADC_CLOCK_DIV_64" 2 579 "0x06"
d G "ADC_CLOCK_INTERNAL" 2 580 "0x07" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 582 "0x00"
d G "ADC_TAD_MUL_2" 2 583 "0x08"
d G "ADC_TAD_MUL_4" 2 584 "0x10"
d G "ADC_TAD_MUL_6" 2 585 "0x18"
d G "ADC_TAD_MUL_8" 2 586 "0x20"
d G "ADC_TAD_MUL_12" 2 587 "0x28"
d G "ADC_TAD_MUL_16" 2 588 "0x30"
d G "ADC_TAD_MUL_20" 2 589 "0x38"
c L "adc_done" 2 1 1 "FUNCTION"
f N "setup_adc_ports" 2 592 ""
v L "pins" 2 592 "int32" `251 
f B "setup_adc_ports" 2 592 "void(int32 pins)" `250 
f N "setup_adc_ports" 2 593 ""
v L "pins" 2 593 "int32" `253 
v L "reference" 2 593 "int32" `254 
f B "setup_adc_ports" 2 593 "void(int32 pins,int32 reference)" `252 
f N "set_analog_pins" 2 594 ""
v L "pins" 2 594 "int32" `256 
f B "set_analog_pins" 2 594 "void(int32 pins)" `255 
f N "set_analog_pins" 2 595 ""
v L "pins" 2 595 "int32" `258 
v L "reference" 2 595 "int32" `259 
f B "set_analog_pins" 2 595 "void(int32 pins,int32 reference)" `257 
f N "set_adc_channel" 2 596 ""
v L "channel" 2 596 "int8" `261 
f B "set_adc_channel" 2 596 "void(int8 channel)" `260  "Constants used in SETUP_ADC_PORTS() and SET_ANALOG_PINS() are:"
d G "sAN0" 2 600 "0x000100" "| A0"
d G "sAN1" 2 601 "0x000200" "| A1"
d G "sAN2" 2 602 "0x000400" "| A2"
d G "sAN3" 2 603 "0x000800" "| A3"
d G "sAN4" 2 604 "0x001000" "| A5"
d G "sAN8" 2 605 "0x010000" "| B1"
d G "sAN9" 2 606 "0x020000" "| B4"
d G "sAN10" 2 607 "0x040000" "| B0"
d G "NO_ANALOGS" 2 608 "0" "None"
d G "ALL_ANALOG" 2 609 "0x071F00" "A0 A1 A2 A3 A5 B1 B4 B0"
d G "VSS_VDD" 2 612 "0x00" "| Range 0-Vdd"
d G "VSS_VREF" 2 613 "0x10" "| Range 0-VrefH"
d G "VSS_2V048" 2 614 "0x20" "| Range 0-2.048V"
d G "VSS_4V096" 2 615 "0x30" "| Range 0-3.096V"
d G "VREF_VDD" 2 616 "0x08" "| Range VrefL-Vdd"
d G "VREF_VREF" 2 617 "0x18" "| Range VrefL-VrefH"
d G "VREF_2V048" 2 618 "0x28" "| Range VrefL-2.048V"
d G "VREF_4V096" 2 619 "0x38" "| Range VrefL-4.096V"
d G "ADC_START_AND_READ" 2 622 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 623 "1"
d G "ADC_READ_ONLY" 2 624 "6"
c L "set_adc_channel" 2 1 3 "FUNCTION"
f N "abs" 2 630 ""
v L "x" 2 630 "sint8" `263 
f B "abs" 2 630 "sint8(sint8 x)" `262 
f N "abs" 2 631 ""
v L "x" 2 631 "sint16" `265 
f B "abs" 2 631 "sint16(sint16 x)" `264 
f N "abs" 2 632 ""
v L "x" 2 632 "sint32" `267 
f B "abs" 2 632 "sint32(sint32 x)" `266 
f N "abs" 2 633 ""
v L "x" 2 633 "float" `269 
f B "abs" 2 633 "float(float x)" `268 
f N "_mul" 2 634 ""
v L "??65535" 2 634 "int8" `271 
v L "??65535" 2 634 "int8" `272 
f B "_mul" 2 634 "int16(int8 ,int8 )" `270 
f N "_mul" 2 635 ""
v L "??65535" 2 635 "sint8" `274 
v L "??65535" 2 635 "sint8" `275 
f B "_mul" 2 635 "sint16(sint8 ,sint8 )" `273 
f N "_mul" 2 636 ""
v L "??65535" 2 636 "int16" `277 
v L "??65535" 2 636 "int16" `278 
f B "_mul" 2 636 "int32(int16 ,int16 )" `276 
f N "_mul" 2 637 ""
v L "??65535" 2 637 "sint16" `280 
v L "??65535" 2 637 "sint16" `281 
f B "_mul" 2 637 "sint32(sint16 ,sint16 )" `279  "Memory Manipulation Prototypes:"
f N "read_bank" 2 640 ""
v L "bank" 2 640 "int8" `283 
v L "offset" 2 640 "int8" `284 
f B "read_bank" 2 640 "int8(int8 bank,int8 offset)" `282 
f N "write_bank" 2 641 ""
v L "bank" 2 641 "int8" `286 
v L "offset" 2 641 "int8" `287 
v L "value" 2 641 "int8" `288 
f B "write_bank" 2 641 "void(int8 bank,int8 offset,int8 value)" `285 
f N "strcpy" 2 642 ""
v L "dest" 2 642 "*int8" `290 
v L "src" 2 642 "*int8" `291 
f B "strcpy" 2 642 "void(*int8 dest,*int8 src)" `289 
f N "memset" 2 643 ""
v L "destination" 2 643 "*int8" `293 
v L "value" 2 643 "int8" `294 
v L "num" 2 643 "int16" `295 
f B "memset" 2 643 "void(*int8 destination,int8 value,int16 num)" `292 
f N "memcpy" 2 644 ""
v L "destination" 2 644 "*int8" `297 
v L "source" 2 644 "*int8" `298 
v L "num" 2 644 "int16" `299 
f B "memcpy" 2 644 "void(*int8 destination,*int8 source,int16 num)" `296  "String Prototypes:"
f N "toupper" 2 647 ""
v L "cvalue" 2 647 "int8" `301 
f B "toupper" 2 647 "int8(int8 cvalue)" `300 
f N "tolower" 2 648 ""
v L "cvalue" 2 648 "int8" `303 
f B "tolower" 2 648 "int8(int8 cvalue)" `302 
f N "sprintf" 2 649 ""
v L "string" 2 649 "*int8" `305 
v L "cstring" 2 649 "*int8" `306 
f B "sprintf" 2 649 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `304  "Data Manipulators Prototypes:"
f N "shift_left" 2 652 ""
v L "address" 2 652 "*int8" `309 
v L "bytes" 2 652 "int8" `310 
v L "value" 2 652 "int8" `311 
f B "shift_left" 2 652 "int8(*int8 address,int8 bytes,int8 value)" `308 
f N "shift_right" 2 653 ""
v L "address" 2 653 "*int8" `313 
v L "bytes" 2 653 "int8" `314 
v L "value" 2 653 "int8" `315 
f B "shift_right" 2 653 "int8(*int8 address,int8 bytes,int8 value)" `312 
f N "rotate_left" 2 654 ""
v L "address" 2 654 "*int8" `317 
v L "bytes" 2 654 "int8" `318 
f B "rotate_left" 2 654 "void(*int8 address,int8 bytes)" `316 
f N "rotate_right" 2 655 ""
v L "address" 2 655 "*int8" `320 
v L "bytes" 2 655 "int8" `321 
f B "rotate_right" 2 655 "void(*int8 address,int8 bytes)" `319 
f N "swap" 2 656 ""
v L "value" 2 656 "int8" `323 
f B "swap" 2 656 "void(int8 value)" `322 
f N "make8" 2 657 ""
v L "var" 2 657 "int16" `325 
v L "offset" 2 657 "int8" `326 
f B "make8" 2 657 "int8(int16 var,int8 offset)" `324 
f N "make8" 2 658 ""
v L "var" 2 658 "int32" `328 
v L "offset" 2 658 "int8" `329 
f B "make8" 2 658 "int8(int32 var,int8 offset)" `327 
f N "make16" 2 659 ""
v L "varhigh" 2 659 "int8" `331 
v L "varlow" 2 659 "int8" `332 
f B "make16" 2 659 "int16(int8 varhigh,int8 varlow)" `330 
f N "make32" 2 660 ""
v L "var1" 2 660 "int16" `334 
f B "make32" 2 660 "int32(int16 var1)" `333 
f N "make32" 2 661 ""
v L "var1" 2 661 "int16" `336 
v L "var2" 2 661 "int16" `337 
f B "make32" 2 661 "int32(int16 var1,int16 var2)" `335 
f N "make32" 2 662 ""
v L "var1" 2 662 "int16" `339 
v L "var2" 2 662 "int8" `340 
f B "make32" 2 662 "int32(int16 var1,int8 var2)" `338 
f N "make32" 2 663 ""
v L "var1" 2 663 "int16" `342 
v L "var2" 2 663 "int8" `343 
v L "var3" 2 663 "int8" `344 
f B "make32" 2 663 "int32(int16 var1,int8 var2,int8 var3)" `341 
f N "make32" 2 664 ""
v L "var1" 2 664 "int8" `346 
f B "make32" 2 664 "int32(int8 var1)" `345 
f N "make32" 2 665 ""
v L "var1" 2 665 "int8" `348 
v L "var2" 2 665 "int8" `349 
f B "make32" 2 665 "int32(int8 var1,int8 var2)" `347 
f N "make32" 2 666 ""
v L "var1" 2 666 "int8" `351 
v L "var2" 2 666 "int8" `352 
v L "var3" 2 666 "int8" `353 
f B "make32" 2 666 "int32(int8 var1,int8 var2,int8 var3)" `350 
f N "make32" 2 667 ""
v L "var1" 2 667 "int8" `355 
v L "var2" 2 667 "int8" `356 
v L "var3" 2 667 "int8" `357 
v L "var4" 2 667 "int8" `358 
f B "make32" 2 667 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `354 
f N "make32" 2 668 ""
v L "var1" 2 668 "int8" `360 
v L "var2" 2 668 "int16" `361 
f B "make32" 2 668 "int32(int8 var1,int16 var2)" `359 
f N "make32" 2 669 ""
v L "var1" 2 669 "int8" `363 
v L "var2" 2 669 "int16" `364 
v L "var3" 2 669 "int8" `365 
f B "make32" 2 669 "int32(int8 var1,int16 var2,int8 var3)" `362 
f N "make32" 2 670 ""
v L "var1" 2 670 "int8" `367 
v L "var2" 2 670 "int8" `368 
v L "var3" 2 670 "int16" `369 
f B "make32" 2 670 "int32(int8 var1,int8 var2,int16 var3)" `366 
f N "bit_set" 2 671 ""
v L "var" 2 671 "int8" `371 
v L "bit" 2 671 "int8" `372 
f B "bit_set" 2 671 "void(int8 var,int8 bit)" `370 
f N "bit_set" 2 672 ""
v L "var" 2 672 "int16" `374 
v L "bit" 2 672 "int8" `375 
f B "bit_set" 2 672 "void(int16 var,int8 bit)" `373 
f N "bit_set" 2 673 ""
v L "var" 2 673 "int32" `377 
v L "bit" 2 673 "int8" `378 
f B "bit_set" 2 673 "void(int32 var,int8 bit)" `376 
f N "bit_clear" 2 674 ""
v L "var" 2 674 "int8" `380 
v L "bit" 2 674 "int8" `381 
f B "bit_clear" 2 674 "void(int8 var,int8 bit)" `379 
f N "bit_clear" 2 675 ""
v L "var" 2 675 "int16" `383 
v L "bit" 2 675 "int8" `384 
f B "bit_clear" 2 675 "void(int16 var,int8 bit)" `382 
f N "bit_clear" 2 676 ""
v L "var" 2 676 "int32" `386 
v L "bit" 2 676 "int8" `387 
f B "bit_clear" 2 676 "void(int32 var,int8 bit)" `385 
f N "bit_test" 2 677 ""
v L "var" 2 677 "int8" `389 
v L "bit" 2 677 "int8" `390 
f B "bit_test" 2 677 "int8(int8 var,int8 bit)" `388 
f N "bit_test" 2 678 ""
v L "var" 2 678 "int16" `392 
v L "bit" 2 678 "int8" `393 
f B "bit_test" 2 678 "int8(int16 var,int8 bit)" `391 
f N "bit_test" 2 679 ""
v L "var" 2 679 "int32" `395 
v L "bit" 2 679 "int8" `396 
f B "bit_test" 2 679 "int8(int32 var,int8 bit)" `394  "#use delay() Prototypes:"
f N "delay_cycles" 2 682 ""
v L "count" 2 682 "int8" `398 
f B "delay_cycles" 2 682 "void(int8 count)" `397 
f N "delay_ms" 2 683 ""
v L "time" 2 683 "int16" `400 
f B "delay_ms" 2 683 "void(int16 time)" `399 
f N "delay_us" 2 684 ""
v L "time" 2 684 "int16" `402 
f B "delay_us" 2 684 "void(int16 time)" `401  "#use rs232() Prototypes:"
f N "putchar" 2 687 ""
v L "cdata" 2 687 "int8" `404 
f B "putchar" 2 687 "void(int8 cdata)" `403 
f N "putchar" 2 688 ""
v L "cdata" 2 688 "int8" `406 
v L "stream" 2 688 "int8" `407 
f B "putchar" 2 688 "void(int8 cdata,int8 stream)" `405 
f N "puts" 2 689 ""
v L "string" 2 689 "*int8" `409 
f B "puts" 2 689 "void(*int8 string)" `408 
f N "puts" 2 690 ""
v L "string" 2 690 "*int8" `411 
v L "stream" 2 690 "int8" `412 
f B "puts" 2 690 "void(*int8 string,int8 stream)" `410 
f N "getch" 2 691 ""
f B "getch" 2 691 "int8()" `413 
f N "getch" 2 692 ""
v L "stream" 2 692 "int8" `415 
f B "getch" 2 692 "int8(int8 stream)" `414 
f N "gets" 2 693 ""
v L "string" 2 693 "*int8" `417 
f B "gets" 2 693 "void(*int8 string)" `416 
f N "gets" 2 694 ""
v L "string" 2 694 "*int8" `419 
v L "stream" 2 694 "int8" `420 
f B "gets" 2 694 "void(*int8 string,int8 stream)" `418 
f N "kbhit" 2 695 ""
f B "kbhit" 2 695 "int8()" `421 
f N "kbhit" 2 696 ""
v L "stream" 2 696 "int8" `423 
f B "kbhit" 2 696 "int8(int8 stream)" `422 
f N "printf" 2 697 ""
v L "string" 2 697 "*int8" `425 
f B "printf" 2 697 "void(*int8 string,*int8 _VA_LIST)" `424 
f N "fprintf" 2 698 ""
v L "stream" 2 698 "int8" `428 
v L "string" 2 698 "*int8" `429 
f B "fprintf" 2 698 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `427 
f N "putc_send" 2 699 ""
f B "putc_send" 2 699 "void()" `431 
f N "fputc_send" 2 700 ""
v L "stream" 2 700 "int8" `433 
f B "fputc_send" 2 700 "void(int8 stream)" `432 
f N "rcv_buffer_full" 2 701 ""
f B "rcv_buffer_full" 2 701 "int8()" `434 
f N "rcv_buffer_full" 2 702 ""
v L "stream" 2 702 "int8" `436 
f B "rcv_buffer_full" 2 702 "int8(int8 stream)" `435 
f N "rcv_buffer_bytes" 2 703 ""
f B "rcv_buffer_bytes" 2 703 "int16()" `437 
f N "rcv_buffer_bytes" 2 704 ""
v L "stream" 2 704 "int8" `439 
f B "rcv_buffer_bytes" 2 704 "int16(int8 stream)" `438 
f N "tx_buffer_full" 2 705 ""
f B "tx_buffer_full" 2 705 "int8()" `440 
f N "tx_buffer_full" 2 706 ""
v L "stream" 2 706 "int8" `442 
f B "tx_buffer_full" 2 706 "int8(int8 stream)" `441 
f N "tx_buffer_bytes" 2 707 ""
f B "tx_buffer_bytes" 2 707 "int16()" `443 
f N "tx_buffer_bytes" 2 708 ""
v L "stream" 2 708 "int8" `445 
f B "tx_buffer_bytes" 2 708 "int16(int8 stream)" `444  "#use i2c() Prototypes:"
f N "i2c_read" 2 711 ""
f B "i2c_read" 2 711 "int8()" `446 
f N "i2c_read" 2 712 ""
v L "stream" 2 712 "int8" `448 
f B "i2c_read" 2 712 "int8(int8 stream)" `447 
f N "i2c_read" 2 713 ""
v L "stream" 2 713 "int8" `450 
v L "ack" 2 713 "int8" `451 
f B "i2c_read" 2 713 "int8(int8 stream,int8 ack)" `449 
f N "i2c_write" 2 714 ""
v L "data" 2 714 "int8" `453 
f B "i2c_write" 2 714 "int8(int8 data)" `452 
f N "i2c_write" 2 715 ""
v L "stream" 2 715 "int8" `455 
v L "data" 2 715 "int8" `456 
f B "i2c_write" 2 715 "int8(int8 stream,int8 data)" `454 
f N "i2c_start" 2 716 ""
f B "i2c_start" 2 716 "void()" `457 
f N "i2c_start" 2 717 ""
v L "stream" 2 717 "int8" `459 
f B "i2c_start" 2 717 "void(int8 stream)" `458 
f N "i2c_start" 2 718 ""
v L "stream" 2 718 "int8" `461 
v L "restart" 2 718 "int8" `462 
f B "i2c_start" 2 718 "void(int8 stream,int8 restart)" `460 
f N "i2c_stop" 2 719 ""
f B "i2c_stop" 2 719 "void()" `463 
f N "i2c_stop" 2 720 ""
v L "stream" 2 720 "int8" `465 
f B "i2c_stop" 2 720 "void(int8 stream)" `464 
f N "i2c_isr_state" 2 721 ""
f B "i2c_isr_state" 2 721 "int8()" `466 
f N "i2c_slaveaddr" 2 722 ""
v L "addr" 2 722 "int8" `468 
f B "i2c_slaveaddr" 2 722 "void(int8 addr)" `467 
f N "i2c_slaveaddr" 2 723 ""
v L "stream" 2 723 "int8" `470 
v L "addr" 2 723 "int8" `471 
f B "i2c_slaveaddr" 2 723 "void(int8 stream,int8 addr)" `469 
f N "i2c_poll" 2 724 ""
f B "i2c_poll" 2 724 "int8()" `472 
f N "i2c_poll" 2 725 ""
v L "stream" 2 725 "int8" `474 
f B "i2c_poll" 2 725 "int8(int8 stream)" `473 
f N "i2c_init" 2 726 ""
v L "baud" 2 726 "int32" `476 
f B "i2c_init" 2 726 "void(int32 baud)" `475 
f N "i2c_init" 2 727 ""
v L "stream" 2 727 "int8" `478 
v L "baud" 2 727 "int32" `479 
f B "i2c_init" 2 727 "void(int8 stream,int32 baud)" `477  "#use spi() Prototypes:"
f N "spi_xfer" 2 730 ""
f B "spi_xfer" 2 730 "int8()" `480 
f N "spi_xfer" 2 731 ""
f B "spi_xfer" 2 731 "int16(int8 data)" `481 
f N "spi_xfer" 2 732 ""
f B "spi_xfer" 2 732 "int32(int8 data)" `481 
f N "spi_xfer" 2 733 ""
v L "data" 2 733 "int8" `482 
f B "spi_xfer" 2 733 "int8(int8 data)" `481 
f N "spi_xfer" 2 734 ""
v L "data" 2 734 "int16" `484 
f B "spi_xfer" 2 734 "int16(int16 data)" `483 
f N "spi_xfer" 2 735 ""
v L "data" 2 735 "int32" `486 
f B "spi_xfer" 2 735 "int32(int32 data)" `485 
f N "spi_xfer" 2 736 ""
v L "stream" 2 736 "int8" `488 
v L "data" 2 736 "int8" `489 
f B "spi_xfer" 2 736 "int8(int8 stream,int8 data)" `487 
f N "spi_xfer" 2 737 ""
v L "stream" 2 737 "int8" `491 
v L "data" 2 737 "int16" `492 
f B "spi_xfer" 2 737 "int16(int8 stream,int16 data)" `490 
f N "spi_xfer" 2 738 ""
v L "stream" 2 738 "int8" `494 
v L "data" 2 738 "int32" `495 
f B "spi_xfer" 2 738 "int32(int8 stream,int32 data)" `493 
f N "spi_xfer" 2 739 ""
v L "stream" 2 739 "int8" `497 
v L "data" 2 739 "int8" `498 
v L "bits" 2 739 "int8" `499 
f B "spi_xfer" 2 739 "int8(int8 stream,int8 data,int8 bits)" `496 
f N "spi_xfer" 2 740 ""
v L "stream" 2 740 "int8" `501 
v L "data" 2 740 "int16" `502 
v L "bits" 2 740 "int8" `503 
f B "spi_xfer" 2 740 "int16(int8 stream,int16 data,int8 bits)" `500 
f N "spi_xfer" 2 741 ""
v L "stream" 2 741 "int8" `505 
v L "data" 2 741 "int32" `506 
v L "bits" 2 741 "int8" `507 
f B "spi_xfer" 2 741 "int32(int8 stream,int32 data,int8 bits)" `504 
f N "spi_init" 2 742 ""
v L "baud" 2 742 "int32" `509 
f B "spi_init" 2 742 "void(int32 baud)" `508 
f N "spi_init" 2 743 ""
v L "stream" 2 743 "int8" `511 
v L "baud" 2 743 "int32" `512 
f B "spi_init" 2 743 "void(int8 stream,int32 baud)" `510 
f N "spi_speed" 2 744 ""
v L "baud" 2 744 "int32" `514 
f B "spi_speed" 2 744 "void(int32 baud)" `513 
f N "spi_speed" 2 745 ""
v L "stream" 2 745 "int8" `516 
v L "baud" 2 745 "int32" `517 
f B "spi_speed" 2 745 "void(int8 stream,int32 baud)" `515 
f N "spi_speed" 2 746 ""
v L "stream" 2 746 "int8" `519 
v L "baud" 2 746 "int32" `520 
v L "clock" 2 746 "int32" `521 
f B "spi_speed" 2 746 "void(int8 stream,int32 baud,int32 clock)" `518 
f N "spi_prewrite" 2 747 ""
v L "data" 2 747 "int8" `523 
f B "spi_prewrite" 2 747 "void(int8 data)" `522 
f N "spi_prewrite" 2 748 ""
v L "data" 2 748 "int16" `525 
f B "spi_prewrite" 2 748 "void(int16 data)" `524 
f N "spi_prewrite" 2 749 ""
v L "data" 2 749 "int32" `527 
f B "spi_prewrite" 2 749 "void(int32 data)" `526 
f N "spi_prewrite" 2 750 ""
v L "??65535" 2 750 "int8" `529 
v L "data" 2 750 "int8" `530 
f B "spi_prewrite" 2 750 "void(int8 ,int8 data)" `528 
f N "spi_prewrite" 2 751 ""
v L "??65535" 2 751 "int8" `532 
v L "data" 2 751 "int16" `533 
f B "spi_prewrite" 2 751 "void(int8 ,int16 data)" `531 
f N "spi_prewrite" 2 752 ""
v L "??65535" 2 752 "int8" `535 
v L "data" 2 752 "int32" `536 
f B "spi_prewrite" 2 752 "void(int8 ,int32 data)" `534 
f N "spi_xfer_in" 2 753 ""
f B "spi_xfer_in" 2 753 "int8()" `537 
f N "spi_xfer_in" 2 754 ""
f B "spi_xfer_in" 2 754 "int16(int8 bits)" `538 
f N "spi_xfer_in" 2 755 ""
f B "spi_xfer_in" 2 755 "int32(int8 bits)" `538 
f N "spi_xfer_in" 2 756 ""
v L "bits" 2 756 "int8" `539 
f B "spi_xfer_in" 2 756 "int8(int8 bits)" `538 
f N "spi_xfer_in" 2 757 ""
v L "bits" 2 757 "int8" `541 
f B "spi_xfer_in" 2 757 "int16(int8 bits,int8 bits)" `540 
f N "spi_xfer_in" 2 758 ""
v L "bits" 2 758 "int8" `541 
f B "spi_xfer_in" 2 758 "int32(int8 bits,int8 bits)" `540 
f N "spi_xfer_in" 2 759 ""
v L "stream" 2 759 "int8" `541 
v L "bits" 2 759 "int8" `542 
f B "spi_xfer_in" 2 759 "int8(int8 stream,int8 bits)" `540 
f N "spi_xfer_in" 2 760 ""
v L "stream" 2 760 "int8" `541 
v L "bits" 2 760 "int8" `545 
f B "spi_xfer_in" 2 760 "int16(int8 stream,int8 bits,int8 task)" `543 
f N "spi_xfer_in" 2 761 ""
v L "stream" 2 761 "int8" `541 
v L "bits" 2 761 "int8" `545 
f B "spi_xfer_in" 2 761 "int32(int8 stream,int8 bits,int8 task)" `543  "#use rtos() Prototypes:"
f N "rtos_run" 2 764 ""
f B "rtos_run" 2 764 "void(int8 stream,int8 bits,int8 task)" `543 
f N "rtos_yield" 2 765 ""
f B "rtos_yield" 2 765 "void(int8 bits,int8 task)" `544 
f N "rtos_enable" 2 766 ""
v L "task" 2 766 "int8" `546 
f B "rtos_enable" 2 766 "void(int8 task)" `545 
f N "rtos_disable" 2 767 ""
v L "task" 2 767 "int8" `548 
f B "rtos_disable" 2 767 "void(int8 task)" `547 
f N "rtos_terminate" 2 768 ""
f B "rtos_terminate" 2 768 "void()" `549 
f N "rtos_await" 2 769 ""
v L "flag" 2 769 "int8" `551 
f B "rtos_await" 2 769 "void(int8 flag)" `550 
f N "rtos_wait" 2 770 ""
v L "sem" 2 770 "int8" `553 
f B "rtos_wait" 2 770 "void(int8 sem)" `552 
f N "rtos_signal" 2 771 ""
v L "sem" 2 771 "int8" `555 
f B "rtos_signal" 2 771 "void(int8 sem)" `554 
f N "rtos_msg_send" 2 772 ""
v L "task" 2 772 "int8" `557 
v L "msg" 2 772 "int8" `558 
f B "rtos_msg_send" 2 772 "void(int8 task,int8 msg)" `556 
f N "rtos_msg_read" 2 773 ""
f B "rtos_msg_read" 2 773 "int8()" `559 
f N "rtos_msg_poll" 2 774 ""
f B "rtos_msg_poll" 2 774 "int8()" `560 
f N "rtos_overrun" 2 775 ""
v L "task" 2 775 "int8" `562 
f B "rtos_overrun" 2 775 "int8(int8 task)" `561 
f N "rtos_stats" 2 776 ""
v L "task" 2 776 "int8" `564 
v L "stat" 2 776 "*int8" `565 
f B "rtos_stats" 2 776 "void(int8 task,*int8 stat)" `563  "#use timer() Prototypes:"
f N "get_ticks" 2 779 ""
f B "get_ticks" 2 779 "int8()" `566 
f N "get_ticks" 2 780 ""
f B "get_ticks" 2 780 "int16(int8 stream)" `567 
f N "get_ticks" 2 781 ""
f B "get_ticks" 2 781 "int32(int8 stream)" `567 
f N "get_ticks" 2 782 ""
v L "stream" 2 782 "int8" `568 
f B "get_ticks" 2 782 "int8(int8 stream)" `567 
f N "get_ticks" 2 783 ""
v L "stream" 2 783 "int8" `570 
f B "get_ticks" 2 783 "int16(int8 stream)" `569 
f N "get_ticks" 2 784 ""
v L "stream" 2 784 "int8" `570 
f B "get_ticks" 2 784 "int32(int8 stream)" `569 
f N "set_ticks" 2 785 ""
v L "value" 2 785 "int8" `570 
f B "set_ticks" 2 785 "void(int8 value)" `569 
f N "set_ticks" 2 786 ""
v L "value" 2 786 "int16" `572 
f B "set_ticks" 2 786 "void(int16 value)" `571 
f N "set_ticks" 2 787 ""
v L "value" 2 787 "int32" `574 
f B "set_ticks" 2 787 "void(int32 value)" `573 
f N "set_ticks" 2 788 ""
v L "stream" 2 788 "int8" `576 
v L "value" 2 788 "int8" `577 
f B "set_ticks" 2 788 "void(int8 stream,int8 value)" `575 
f N "set_ticks" 2 789 ""
v L "stream" 2 789 "int8" `579 
v L "value" 2 789 "int16" `580 
f B "set_ticks" 2 789 "void(int8 stream,int16 value)" `578 
f N "set_ticks" 2 790 ""
v L "stream" 2 790 "int8" `582 
v L "value" 2 790 "int32" `583 
f B "set_ticks" 2 790 "void(int8 stream,int32 value)" `581  "#use pwm() Prototypes:"
f N "pwm_on" 2 793 ""
f B "pwm_on" 2 793 "void()" `584 
f N "pwm_on" 2 794 ""
v L "stream" 2 794 "int8" `586 
f B "pwm_on" 2 794 "void(int8 stream)" `585 
f N "pwm_off" 2 795 ""
f B "pwm_off" 2 795 "void()" `587 
f N "pwm_off" 2 796 ""
v L "stream" 2 796 "int8" `589 
f B "pwm_off" 2 796 "void(int8 stream)" `588 
f N "pwm_set_duty" 2 797 ""
v L "duty" 2 797 "int16" `591 
f B "pwm_set_duty" 2 797 "void(int16 duty)" `590 
f N "pwm_set_duty" 2 798 ""
v L "stream" 2 798 "int8" `593 
v L "duty" 2 798 "int16" `594 
f B "pwm_set_duty" 2 798 "void(int8 stream,int16 duty)" `592 
f N "pwm_set_duty_percent" 2 799 ""
v L "percent" 2 799 "int16" `596 
f B "pwm_set_duty_percent" 2 799 "void(int16 percent)" `595 
f N "pwm_set_duty_percent" 2 800 ""
v L "stream" 2 800 "int8" `598 
v L "percent" 2 800 "int16" `599 
f B "pwm_set_duty_percent" 2 800 "void(int8 stream,int16 percent)" `597 
f N "pwm_set_frequency" 2 801 ""
v L "frequency" 2 801 "int32" `601 
f B "pwm_set_frequency" 2 801 "void(int32 frequency)" `600 
f N "pwm_set_frequency" 2 802 ""
v L "stream" 2 802 "int8" `603 
v L "frequency" 2 802 "int32" `604 
f B "pwm_set_frequency" 2 802 "void(int8 stream,int32 frequency)" `602  "#use capture() Prototypes:"
f N "get_capture_time" 2 805 ""
f B "get_capture_time" 2 805 "int16()" `605 
f N "get_capture_time" 2 806 ""
v L "stream" 2 806 "int8" `607 
f B "get_capture_time" 2 806 "int16(int8 stream)" `606 
f N "get_capture_event" 2 807 ""
f B "get_capture_event" 2 807 "int8()" `608 
f N "get_capture_event" 2 808 ""
v L "stream" 2 808 "int8" `610 
f B "get_capture_event" 2 808 "int8(int8 stream)" `609  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
f N "goto_address" 2 821 ""
v L "address" 2 821 "int16" `612 
f B "goto_address" 2 821 "void(int16 address)" `611 
f N "label_address" 2 822 ""
v L "label" 2 822 "int16" `614 
f B "label_address" 2 822 "int16(int16 label)" `613  "Program Memory Prototypes:"
f N "read_program_memory" 2 825 ""
v L "address" 2 825 "int16" `616 
v L "dataptr" 2 825 "*int8" `617 
v L "count" 2 825 "int16" `618 
f B "read_program_memory" 2 825 "void(int16 address,*int8 dataptr,int16 count)" `615 
f N "read_program_eeprom" 2 826 ""
v L "address" 2 826 "int16" `620 
f B "read_program_eeprom" 2 826 "int16(int16 address)" `619 
f N "write_program_memory" 2 827 ""
v L "address" 2 827 "int16" `622 
v L "dataptr" 2 827 "*int8" `623 
v L "count" 2 827 "int16" `624 
f B "write_program_memory" 2 827 "void(int16 address,*int8 dataptr,int16 count)" `621 
f N "write_program_eeprom" 2 828 ""
v L "address" 2 828 "int16" `626 
v L "data" 2 828 "int16" `627 
f B "write_program_eeprom" 2 828 "void(int16 address,int16 data)" `625  "EEPROM Prototypes:"
d G "__EEADDRESS__" 2 833 "unsigned int16"
f N "read_eeprom" 2 838 ""
v L "address" 2 838 "int16" `629 
f B "read_eeprom" 2 838 "int8(int16 address)" `628 
f N "write_eeprom" 2 839 ""
v L "address" 2 839 "int16" `631 
v L "value" 2 839 "int8" `632 
f B "write_eeprom" 2 839 "void(int16 address,int8 value)" `630  "#use touchpad() Prototypes:"
f N "touchpad_state" 2 842 ""
v L "state" 2 842 "int8" `634 
f B "touchpad_state" 2 842 "void(int8 state)" `633 
f N "touchpad_getc" 2 843 ""
f B "touchpad_getc" 2 843 "int8()" `635 
f N "touchpad_hit" 2 844 ""
f B "touchpad_hit" 2 844 "int8()" `636  "INT"
c L "touchpad_hit" 2 1 4 "FUNCTION"
f N "enable_interrupts" 2 850 ""
v L "interrupt" 2 850 "int32" `638 
f B "enable_interrupts" 2 850 "void(int32 interrupt)" `637 
f N "disable_interrupts" 2 851 ""
v L "interrupt" 2 851 "int32" `640 
f B "disable_interrupts" 2 851 "void(int32 interrupt)" `639 
f N "clear_interrupt" 2 852 ""
v L "interrupt" 2 852 "int32" `642 
f B "clear_interrupt" 2 852 "void(int32 interrupt)" `641 
f N "interrupt_active" 2 853 ""
v L "interrupt" 2 853 "int32" `644 
f B "interrupt_active" 2 853 "int8(int32 interrupt)" `643 
f N "interrupt_enabled" 2 854 ""
v L "interrupt" 2 854 "int32" `646 
f B "interrupt_enabled" 2 854 "int8(int32 interrupt)" `645 
f N "ext_int_edge" 2 855 ""
v L "source" 2 855 "int8" `648 
v L "edge" 2 855 "int8" `649 
f B "ext_int_edge" 2 855 "void(int8 source,int8 edge)" `647 
f N "jump_to_isr" 2 856 ""
v L "address" 2 856 "int16" `651 
f B "jump_to_isr" 2 856 "void(int16 address)" `650  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 858 "0x40"
d G "H_TO_L" 2 859 "0"
d G "GLOBAL" 2 861 "0xF2C0"
d G "PERIPH" 2 862 "0xF240"
d G "INT_RTCC" 2 863 "0x00F220"
d G "INT_TIMER0" 2 864 "0x00F220"
d G "INT_TIMER1" 2 865 "0x009D01"
d G "INT_TIMER2" 2 866 "0x009D02"
d G "INT_TIMER3" 2 867 "0x00A002"
d G "INT_EXT_L2H" 2 868 "0x5000F210"
d G "INT_EXT_H2L" 2 869 "0x6000F210"
d G "INT_EXT" 2 870 "0x00F210"
d G "INT_EXT1_L2H" 2 871 "0x5001F008"
d G "INT_EXT1_H2L" 2 872 "0x6001F008"
d G "INT_EXT1" 2 873 "0x00F008"
d G "INT_EXT2_L2H" 2 874 "0x5002F010"
d G "INT_EXT2_H2L" 2 875 "0x6002F010"
d G "INT_EXT2" 2 876 "0x00F010"
d G "INT_RB" 2 877 "0x01FFF208"
d G "INT_AD" 2 878 "0x009D40"
d G "INT_RDA" 2 879 "0x009D20"
d G "INT_TBE" 2 880 "0x009D10"
d G "INT_SSP" 2 881 "0x009D08"
d G "INT_BUSCOL" 2 882 "0x00A008"
d G "INT_RDA2" 2 883 "0x00A320"
d G "INT_TBE2" 2 884 "0x00A310"
d G "INT_OSCF" 2 885 "0x00A080"
d G "INT_HLVD" 2 886 "0x00A004"
d G "INT_EXT3_L2H" 2 887 "0x5003F020"
d G "INT_EXT3_H2L" 2 888 "0x6003F020"
d G "INT_EXT3" 2 889 "0x00F020"
d G "INT_CCP1" 2 890 "0x00A302"
d G "INT_CCP2" 2 891 "0x00A304"
d G "INT_CTMU" 2 892 "0x00A308"
d G "INT_TMR1G" 2 893 "0x009D04"
d G "INT_TMR3G" 2 894 "0x00A001"
d G "INT_CCP3" 2 895 "0x00B601"
d G "INT_CCP4" 2 896 "0x00B602"
d G "INT_CCP5" 2 897 "0x00B604"
d G "INT_COMP1" 2 898 "0x00B610"
d G "INT_COMP2" 2 899 "0x00B620"
d G "INT_EEPROM" 2 900 "0x00B640"
d G "INT_TIMER4" 2 901 "0x00B680"
d G "INT_CANRX0" 2 902 "0x007601"
d G "INT_CANRX1" 2 903 "0x007602"
d G "INT_CANTX0" 2 904 "0x007604"
d G "INT_CANTX1" 2 905 "0x007608"
d G "INT_CANTX2" 2 906 "0x007610"
d G "INT_CANERR" 2 907 "0x007620"
d G "INT_CANWAKE" 2 908 "0x007640"
d G "INT_CANIRX" 2 909 "0x007680"
d G "INT_RB4" 2 910 "0x110F208"
d G "INT_RB5" 2 911 "0x120F208"
d G "INT_RB6" 2 912 "0x140F208"
d G "INT_RB7" 2 913 "0x180F208"
C L "jump_to_isr" 1 2 1 "FUNCTION"
C L "jump_to_isr" 1 2 1 "FUNCTION"
C L "jump_to_isr" 1 31 1 "*"
C L "jump_to_isr" 1 31 1 "FUNCTION"
C L "jump_to_isr" 1 36 1 "*"
C L "jump_to_isr" 1 47 1 "*"
C L "jump_to_isr" 1 66 1 "*"
D G "DELAY" 1 76 "200"
D G "one" 1 78 "0x00"
D G "two" 1 79 "0x40"
D G "three" 1 80 "0x10"
D G "four" 1 81 "0x50"
T G "U32" 1 83 "int32" `705 
T G "U16" 1 84 "int16" `706 
T G "S16" 1 85 "sint16" `707 
T G "U8" 1 86 "int8" `708 
T G "S8" 1 87 "sint8" `709 
T G "S32" 1 88 "sint32" `710 
V G "buf" 1 90 "U8" `711 
D G "_STDIO" 3 12 ""
D G "_STRING" 4 12 ""
D G "_STDDEF" 5 13 ""
D G "ptrdiff_t" 5 18 "unsigned int16"
D G "size_t" 5 24 "unsigned int16"
D G "wchar_t" 5 26 "char"
D G "NULL" 5 27 "0"
D G "offsetof" 5 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 6 12 ""
D G "islower" 6 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 6 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 6 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 6 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 6 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 6 19 "(x)  ((x)==' ')"
D G "isxdigit" 6 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 6 21 "(x)  ((x)<' ')"
D G "isprint" 6 22 "(x)  ((x)>=' ')"
D G "isgraph" 6 23 "(x)  ((x)>' ')"
D G "ispunct" 6 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "jump_to_isr" 4 19 10 "FUNCTION"
F N "memmove" 4 34 ""
V L "s1" 4 34 "*int8" `717 
V L "s2" 4 34 "*int8" `718 
V L "n" 4 34 "int16" `719 
F G "memmove" 4 35 "*int8(*int8 s1,*int8 s2,int16 n)" `716 
V L "sc1" 4 36 "*int8" `720 
V L "sc2" 4 37 "*int8" `721 
D G "strcopy" 4 54 "strcpy"
F N "strncpy" 4 61 ""
V L "s1" 4 61 "*int8" `723 
V L "s2" 4 61 "*int8" `724 
V L "n" 4 61 "int16" `725 
F G "strncpy" 4 62 "*int8(*int8 s1,*int8 s2,int16 n)" `722 
V L "s" 4 63 "*int8" `726 
F N "strcat" 4 78 ""
V L "s1" 4 78 "*int8" `728 
V L "s2" 4 78 "*int8" `729 
F G "strcat" 4 79 "*int8(*int8 s1,*int8 s2)" `727 
V L "s" 4 80 "*int8" `730 
F N "strncat" 4 96 ""
V L "s1" 4 96 "*int8" `732 
V L "s2" 4 96 "*int8" `733 
V L "n" 4 96 "int16" `734 
F G "strncat" 4 97 "*int8(*int8 s1,*int8 s2,int16 n)" `731 
V L "s" 4 98 "*int8" `735 
C L "memcmp" 4 19 3 "FUNCTION"
F N "memcmp" 4 120 ""
V L "s1" 4 120 "*int8" `737 
V L "s2" 4 120 "*int8" `738 
V L "n" 4 120 "int16" `739 
F G "memcmp" 4 121 "sint8(*int8 s1,*int8 s2,int16 n)" `736 
V L "su1" 4 122 "*int8" `740 
V L "su2" 4 122 "*int8" `741 
C L "strcmp" 4 19 2 "FUNCTION"
F N "strcmp" 4 134 ""
V L "s1" 4 134 "*int8" `743 
V L "s2" 4 134 "*int8" `744 
F G "strcmp" 4 135 "sint8(*int8 s1,*int8 s2)" `742 
C L "strcoll" 4 19 2 "FUNCTION"
F N "strcoll" 4 144 ""
V L "s1" 4 144 "*int8" `746 
V L "s2" 4 144 "*int8" `747 
F G "strcoll" 4 145 "sint8(*int8 s1,*int8 s2)" `745 
C L "strncmp" 4 19 4 "FUNCTION"
F N "strncmp" 4 157 ""
V L "s1" 4 157 "*int8" `749 
V L "s2" 4 157 "*int8" `750 
V L "n" 4 157 "int16" `751 
F G "strncmp" 4 158 "sint8(*int8 s1,*int8 s2,int16 n)" `748 
C L "strxfrm" 4 19 4 "FUNCTION"
F N "strxfrm" 4 170 ""
V L "s1" 4 170 "*int8" `753 
V L "s2" 4 170 "*int8" `754 
V L "n" 4 170 "int16" `755 
F G "strxfrm" 4 171 "int16(*int8 s1,*int8 s2,int16 n)" `752 
V L "c" 4 172 "int8" `756 
V L "n1" 4 173 "int8" `757 
C L "strxfrm" 4 19 1 "FUNCTION"
F N "memchr" 4 201 ""
V L "s" 4 201 "*int8" `759 
V L "c" 4 201 "int8" `760 
V L "n" 4 201 "int16" `761 
F G "memchr" 4 202 "*int8(*int8 s,int8 c,int16 n)" `758 
V L "uc" 4 203 "int8" `762 
V L "su" 4 204 "*int8" `763 
F N "strchr" 4 215 ""
V L "s" 4 215 "*int8" `765 
V L "c" 4 215 "int8" `766 
F G "strchr" 4 216 "*int8(*int8 s,int8 c)" `764 
C L "strcspn" 4 19 4 "FUNCTION"
F N "strcspn" 4 227 ""
V L "s1" 4 227 "*int8" `768 
V L "s2" 4 227 "*int8" `769 
F G "strcspn" 4 228 "int8(*int8 s1,*int8 s2)" `767 
V L "sc1" 4 229 "*int8" `770 
V L "sc2" 4 229 "*int8" `771 
F N "strpbrk" 4 242 ""
V L "s1" 4 242 "*int8" `773 
V L "s2" 4 242 "*int8" `774 
F G "strpbrk" 4 243 "*int8(*int8 s1,*int8 s2)" `772 
V L "sc1" 4 244 "*int8" `775 
V L "sc2" 4 244 "*int8" `776 
F N "strrchr" 4 257 ""
V L "s" 4 257 "*int8" `778 
V L "c" 4 257 "int8" `779 
F G "strrchr" 4 258 "*int8(*int8 s,int8 c)" `777 
V L "p" 4 259 "*int8" `780 
C L "strspn" 4 19 2 "FUNCTION"
F N "strspn" 4 272 ""
V L "s1" 4 272 "*int8" `782 
V L "s2" 4 272 "*int8" `783 
F G "strspn" 4 273 "int8(*int8 s1,*int8 s2)" `781 
V L "sc1" 4 274 "*int8" `784 
V L "sc2" 4 274 "*int8" `785 
F N "strstr" 4 291 ""
V L "s1" 4 291 "*int8" `787 
V L "s2" 4 291 "*int8" `788 
F G "strstr" 4 292 "*int8(*int8 s1,*int8 s2)" `786 
V L "s" 4 293 "*int8" `789 
V L "t" 4 293 "*int8" `790 
C L "strlen" 4 19 2 "FUNCTION"
F N "strlen" 4 318 ""
V L "s" 4 318 "*int8" `792 
F G "strlen" 4 319 "int16(*int8 s)" `791 
V L "sc" 4 320 "*int8" `793 
F N "strtok" 4 341 ""
V L "s1" 4 341 "*int8" `795 
V L "s2" 4 341 "*int8" `796 
F G "strtok" 4 342 "*int8(*int8 s1,*int8 s2)" `794 
V L "beg" 4 343 "*int8" `797 
V L "end" 4 343 "*int8" `798 
V L "save" 4 344 "*int8" `799 
C L "stricmp" 4 19 6 "FUNCTION"
F N "stricmp" 4 392 ""
V L "s1" 4 392 "*int8" `801 
V L "s2" 4 392 "*int8" `802 
F G "stricmp" 4 393 "sint8(*int8 s1,*int8 s2)" `800 
F N "strlwr" 4 406 ""
V L "s" 4 406 "*int8" `806 
F G "strlwr" 4 407 "*int8(*int8 s)" `805 
V L "p" 4 408 "*int8" `807 
F N "strupr" 4 420 ""
V L "s" 4 420 "*int8" `809 
F G "strupr" 4 421 "*int8(*int8 s)" `808 
V L "p" 4 422 "*int8" `810 
C L "LCDWriteNibble" 3 20 5 "FUNCTION"
C L "LCDWriteNibble" 7 1 1 "*"
F N "LCDWriteNibble" 7 3 ""
V L "uc" 7 3 "int8" `812  "RS must be set/reset before calling"
F G "LCDWriteNibble" 7 4 "void(int8 uc)" `811 
C L "LCDWriteNibble" 7 1 1 "FUNCTION"
F N "LCDWriteData" 7 19 ""
V L "uc" 7 19 "int8" `814 
F G "LCDWriteData" 7 20 "void(int8 uc)" `813 
C L "LCDWriteData" 7 1 1 "FUNCTION"
C L "LCDWriteData" 7 1 1 "FUNCTION"
F N "LCDCommand" 7 29 ""
V L "uc" 7 29 "int8" `816 
F G "LCDCommand" 7 30 "void(int8 uc)" `815 
C L "LCDCommand" 7 1 1 "FUNCTION"
C L "LCDCommand" 7 1 1 "FUNCTION"
F N "LCDSetCursor" 7 38 ""
V L "ucPos" 7 38 "int8" `818 
F G "LCDSetCursor" 7 39 "void(int8 ucPos)" `817 
F N "LCDClear" 7 43 ""
F G "LCDClear" 7 44 "void()" `819 
F N "LCDinit" 7 49 ""
F G "LCDinit" 7 50 "void()" `820 
C L "LCDinit" 7 1 1 "FUNCTION"
C L "LCDinit" 7 1 1 "FUNCTION"
C L "LCDinit" 7 1 1 "FUNCTION"
C L "LCDinit" 7 1 1 "FUNCTION"
F N "LCDPutCh" 7 73 ""
V L "c" 7 73 "int8" `822 
F G "LCDPutCh" 7 74 "void(int8 c)" `821 
F N "LCDPutU16" 7 78 ""
V L "_u16" 7 78 "U32" `824 
V L "u8NumDigs" 7 78 "U8" `825 
F G "LCDPutU16" 7 79 "void(U32 _u16,U8 u8NumDigs)" `823 
V L "u16a" 7 80 "U32" `826 
V L "u16b" 7 80 "U32" `827 
F N "LCDPutU16n" 7 125 ""
V L "_u16" 7 125 "U32" `835 
V L "u8NumDigs" 7 125 "U8" `836 
F G "LCDPutU16n" 7 126 "void(U32 _u16,U8 u8NumDigs)" `834 
V L "u16a" 7 127 "U32" `837 
V L "u16b" 7 127 "U32" `838 
F N "LCDPutS16" 7 171 ""
V L "s16a" 7 171 "S16" `840 
V L "u8NumDigs" 7 171 "U8" `841 
F G "LCDPutS16" 7 172 "void(S16 s16a,U8 u8NumDigs)" `839 
V L "c" 7 173 "int8" `842 
F N "LCDPutS16n" 7 184 ""
V L "s16a" 7 184 "S16" `844 
V L "u8NumDigs" 7 184 "U8" `845 
F G "LCDPutS16n" 7 185 "void(S16 s16a,U8 u8NumDigs)" `843 
V L "c" 7 186 "int8" `846 
F N "LCDMsg" 7 197 ""
V L "c" 7 197 "int8" `848 
F G "LCDMsg" 7 198 "void(int8 c)" `847 
F N "LCDWelcome" 7 202 ""
F G "LCDWelcome" 7 202 "void()" `849 
F N "NC_LCDMsg" 7 214 ""
F G "NC_LCDMsg" 7 215 "void()" `858 
D G "TLV493D_rd_addr" 0 11 "0xbd" "i2c àäðåñ äàò÷èêà ïðè ÷òåíèè"
D G "TLV493D_wr_addr" 0 12 "0xbc" "i2c àäðåñ äàò÷èêà ïðè çàïèñè"
D G "TLV493D" 0 14 "37" "ID äàò÷èêà Bmax = 1,3 kGs"
D G "HMC5883l" 0 15 "30" "ID äàò÷èêà Bmax = 8,1 Gs"
V G "int_fl" 0 17 "int1" `863 
V G "SensErr" 0 18 "int1" `864 
V G "set_zero_fl" 0 19 "int1" `865 
V G "ConfigRegA" 0 22 "int8" `866 
V G "ConfigRegB" 0 22 "int8" `867 
V G "ModeReg" 0 22 "int8" `868 
V G "EEprom_adr" 0 22 "int8" `869 
V G "SumX" 0 23 "sint16" `870 
V G "SumY" 0 24 "sint16" `871 
V G "SumZ" 0 25 "sint16" `872 
V G "SumX0" 0 27 "sint16" `873 
V G "SumY0" 0 28 "sint16" `874 
V G "SumZ0" 0 29 "sint16" `875 
V G "average_Xg" 0 31 "sint32" `876 
V G "average_Yg" 0 32 "sint32" `877 
V G "average_Zg" 0 33 "sint32" `878 
V G "Xh" 0 35 "int16" `879 
V G "Xl" 0 36 "int8" `880 
V G "Yh" 0 37 "int16" `881 
V G "Yl" 0 38 "int8" `882 
V G "Zh" 0 39 "int16" `883 
V G "Zl" 0 40 "int8" `884 
V G "Xd" 0 42 "float" `885 
V G "Yd" 0 43 "float" `886 
V G "Zd" 0 44 "float" `887 
V G "kx" 0 45 "float" `888 
V G "ky" 0 46 "float" `889 
V G "kz" 0 47 "float" `890 
V G "crc_buf_wr" 0 49 "U8[16]" `891 
V G "crc_buf_rd" 0 50 "U8[16]" `892 
V G "crc_wr_index" 0 51 "U8" `893 
V G "crc_rd_index" 0 52 "U8" `894 
V G "coord_sys" 0 54 "U16" `895 
V G "sens_type" 0 55 "U16" `896  "òèï äàò÷èêà => 37 - TLV493D, 30 - HMC5883l"
V G "sens_num" 0 56 "U16" `897  "¹ äàò÷èêà â áàçå Äèàëòåê"
V G "ROM_Adr" 0 57 "U16" `898 
V G "rom_rd_status" 0 58 "int1" `899 
V G "CRC_Wr" 0 60 "U16" `900 
V G "CRC1" 0 61 "U16" `901 
V G "CRC2" 0 62 "U16" `902 
V G "TLV493D_frm_cnt" 0 64 "U8" `903 
V G "wr_ptr" 0 65 "U8" `904 
V G "rd_ptr" 0 65 "U8" `905 
V G "rx_buf" 0 66 "U8[16]" `906 
C L "SensWrData" 0 45 1 "FUNCTION"
C L "SensWrData" 0 68 1 "*"
F N "SensWrData" 0 69 ""
V L "Adr" 0 69 "int8" `908 
V L "data" 0 69 "int8" `909 
F G "SensWrData" 0 70 "void(int8 Adr,int8 data)" `907 
C L "SensWrData" 0 68 2 "FUNCTION"
F N "SensRdData" 0 82 ""
V L "Adr" 0 82 "int8" `911 
F G "SensRdData" 0 83 "int8(int8 Adr)" `910 
V L "data" 0 85 "int8" `912 
C L "SensRdData" 0 68 2 "FUNCTION"
C L "SensRdData" 0 68 1 "FUNCTION"
C L "SensRdData" 0 68 1 "FUNCTION"
F N "HMC5883l_Init" 0 105 ""
F G "HMC5883l_Init" 0 106 "void()" `913  "SensWrData (ConfigRegA, 0x14); // F = 30 Hz / 1"
C L "HMC5883l_Init" 0 68 1 "FUNCTION"
C L "HMC5883l_Init" 0 68 1 "FUNCTION"
C L "HMC5883l_Init" 0 68 2 "FUNCTION"
F N "SelfCal" 0 115 ""
F G "SelfCal" 0 116 "sint16()" `914 
V L "Xh" 0 118 "int16" `915 
V L "Xl" 0 119 "int8" `916 
V L "Yh" 0 120 "int16" `917 
V L "Yl" 0 121 "int8" `918 
V L "Zh" 0 122 "int16" `919 
V L "Zl" 0 123 "int8" `920 
C L "SelfCal" 0 68 2 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
C L "SelfCal" 0 68 1 "FUNCTION"
F N "SensRdAll" 0 157 ""
F G "SensRdAll" 0 158 "void()" `921 
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 4 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "SensRdAll" 0 68 1 "FUNCTION"
C L "TLV493D_reset" 0 211 2 "*"
F N "TLV493D_reset" 0 214 ""
F G "TLV493D_reset" 0 215 "void()" `943 
F N "TLV493D_init" 0 221 ""
F G "TLV493D_init" 0 222 "U8()" `944  "!      // ïîñëå âêë. ïèòàíèÿ òðåáóåòñÿ ñ÷èòàòü çíà÷åíèÿ ðåãèñòðîâ 7, 8, 9 äàò÷èêà"
C L "TLV493D_init" 0 211 1 "FUNCTION"
V L "reg7data" 0 226 "S16" `945 
C L "TLV493D_init" 0 211 1 "FUNCTION"
V L "reg8data" 0 227 "S16" `946 
V L "reg9data" 0 228 "S16" `947 
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 4 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
C L "TLV493D_init" 0 211 1 "FUNCTION"
F N "TLV493D_calc_field" 0 277 ""
V L "nibble_h" 0 277 "S16" `949 
V L "nibble_l" 0 277 "S16" `950 
F G "TLV493D_calc_field" 0 278 "float(S16 nibble_h,S16 nibble_l)" `948  "ðàñ÷åò âåëè÷èíû ìàãíèòíîãî ïîëÿ ïî îñè X äàò÷èêà"
C L "TLV493D_calc_field" 0 211 1 "FUNCTION"
V L "fi" 0 282 "S16" `951 
C L "TLV493D_calc_field" 0 211 1 "FUNCTION"
V L "fl" 0 283 "float" `952 
C L "TLV493D_calc_field" 0 211 1 "FUNCTION"
C L "TLV493D_calc_field" 0 211 2 "FUNCTION"
C L "TLV493D_calc_field" 0 211 1 "FUNCTION"
C L "TLV493D_calc_field" 0 211 1 "FUNCTION"
F N "TLV493D_rd_all" 0 296 ""
V L "coord_sys" 0 296 "U8" `956 
F G "TLV493D_rd_all" 0 297 "U8(U8 coord_sys)" `955 
V L "Xh" 0 299 "S16" `957 
V L "Yh" 0 299 "S16" `958 
V L "Zh" 0 299 "S16" `959 
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
V L "Xl" 0 300 "S16" `960 
V L "Yl" 0 300 "S16" `961 
V L "Zl" 0 300 "S16" `962 
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
V L "bz2" 0 301 "S16" `963 
V L "bx2by2" 0 301 "S16" `964 
V L "frame_ctr" 0 301 "S16" `965 
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
V L "x" 0 302 "S16" `966 
V L "y" 0 302 "S16" `967 
V L "z" 0 302 "S16" `968 
V L "coodr_buf" 0 303 "S16" `969 
V L "status" 0 305 "U8" `970  "1 - ÷òåíèå îê, 0 - îøèáêà ÷òåíèÿ, 2 - òðåáóåòñÿ èíèöèàëèçàöèÿ"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 2 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "TLV493D_rd_all" 0 211 1 "FUNCTION"
C L "CRC16" 0 211 2 "FUNCTION"
F N "CRC16" 0 408 ""
V L "data_p" 0 408 "??0 *" `984 
V L "length" 0 408 "U8" `985 
F G "CRC16" 0 409 "U16(??0 * data_p,U8 length)" `983  "ðàñ÷åò êîíòðîëüíîé ñóììû"
C L "CRC16" 0 211 1 "FUNCTION"
V L "x" 0 413 "U8" `986 
V L "crc" 0 414 "U16" `987 
F N "rom_wr_byte" 0 426 ""
V L "addr" 0 426 "U16" `989 
V L "dataByte" 0 426 "U8" `990 
F G "rom_wr_byte" 0 427 "void(U16 addr,U8 dataByte)" `988  "/ çàïèñûâàåò áàéò äàííûõ ïî 16 - áèò. àäðåñó"
V L "addr_MSB" 0 430 "U8" `991 
V L "addr_LSB" 0 431 "U8" `992 
C L "rom_wr_byte" 0 211 3 "FUNCTION"
V L "i" 0 443 "int8" `993 
C L "rom_wr_byte" 0 211 1 "FUNCTION"
F N "rom_rd_byte" 0 454 ""
V L "addr" 0 454 "U16" `995 
F G "rom_rd_byte" 0 455 "U8(U16 addr)" `994  "/ ÷òåíèå áàéòà äàííûõ ïî 16 - áèò. àäðåñó"
V L "rd_data_byte" 0 458 "U8" `996 
V L "addr_MSB" 0 459 "U8" `997 
C L "rom_rd_byte" 0 211 1 "FUNCTION"
V L "addr_LSB" 0 460 "U8" `998 
C L "rom_rd_byte" 0 211 1 "FUNCTION"
C L "rom_rd_byte" 0 211 1 "FUNCTION"
C L "rom_rd_byte" 0 211 1 "FUNCTION"
C L "rom_rd_byte" 0 211 3 "FUNCTION"
C L "rom_rd_byte" 0 211 1 "FUNCTION"
C L "rom_rd_byte" 0 211 1 "FUNCTION"
C L "rom_rd_byte" 0 211 1 "FUNCTION"
V L "i" 0 474 "U8" `999 
C L "rom_rd_byte" 0 211 1 "FUNCTION"
F N "rom_rd_float" 0 484 ""
V L "ee_addr" 0 484 "U16" `1001 
V L "float_data_ptr" 0 484 "*int8" `1002 
F G "rom_rd_float" 0 485 "void(U16 ee_addr,*int8 float_data_ptr)" `1000  "/ ÷òåíèå 4 - áàéò. ïåðåìåííîé òèïà float èç rom"
C L "rom_rd_float" 0 211 3 "FUNCTION"
V L "buf" 0 492 "U8" `1003 
V L "dataByte_ptr" 0 493 "??0 *" `1004 
C L "rom_rd_float" 0 211 2 "FUNCTION"
V L "k" 0 495 "U8" `1005 
V L "i" 0 496 "U8" `1006 
C L "rom_rd_float" 0 211 1 "FUNCTION"
C L "rom_rd_float" 0 211 1 "FUNCTION"
C L "rom_rd_float" 0 211 1 "FUNCTION"
C L "rom_rd_float" 0 211 1 "FUNCTION"
C L "rom_rd_float" 0 211 1 "FUNCTION"
C L "rom_rd_float" 0 211 9 "FUNCTION"
F N "rom_wr_float" 0 520 ""
V L "ee_addr" 0 520 "U16" `1008 
V L "float_data_ptr" 0 520 "*int8" `1009 
F G "rom_wr_float" 0 521 "void(U16 ee_addr,*int8 float_data_ptr)" `1007  "/ çàïèñü 4 - áàéò. ïåðåìåííîé òèïà float â rom"
C L "rom_wr_float" 0 211 2 "FUNCTION"
V L "dataByte_ptr" 0 527 "??0 *" `1010 
C L "rom_wr_float" 0 211 2 "FUNCTION"
V L "k" 0 529 "U8" `1011 
V L "i" 0 530 "U8" `1012 
C L "rom_wr_float" 0 211 3 "FUNCTION"
C L "rom_wr_float" 0 211 3 "FUNCTION"
C L "rom_wr_float" 0 211 1 "FUNCTION"
C L "rom_wr_float" 0 211 1 "FUNCTION"
C L "rom_wr_float" 0 211 1 "FUNCTION"
C L "rom_wr_float" 0 211 1 "FUNCTION"
C L "rom_wr_float" 0 211 3 "FUNCTION"
F N "rom_wr_CRC16" 0 550 ""
V L "ee_addr" 0 550 "int8" `1014 
V L "crc_buf" 0 550 "U8" `1015 
F G "rom_wr_CRC16" 0 551 "U16(int8 ee_addr,U8 crc_buf)" `1013 
V L "CRC_Wr" 0 552 "U16" `1016 
C L "rom_wr_CRC16" 0 211 1 "FUNCTION"
C L "rom_wr_CRC16" 0 211 1 "FUNCTION"
C L "rom_wr_CRC16" 0 211 1 "FUNCTION"
C L "rom_wr_CRC16" 0 211 1 "FUNCTION"
F N "rom_rd_CRC16" 0 563 ""
V L "ee_addr" 0 563 "int8" `1018 
F G "rom_rd_CRC16" 0 564 "U16(int8 ee_addr)" `1017 
V L "CRC_rd_MSB" 0 565 "U8" `1019  "ñò. áàéò CRC äëÿ çàïèñè"
V L "CRC_rd_LSB" 0 566 "U8" `1020  "ìë. áàéò CRC äëÿ çàïèñè"
V L "CRC_rd" 0 567 "U16" `1021  "16 - áèò. CRC"
C L "rom_rd_CRC16" 0 211 1 "FUNCTION"
C L "rom_rd_CRC16" 0 211 1 "FUNCTION"
C L "rom_rd_CRC16" 0 211 1 "FUNCTION"
C L "rom_rd_CRC16" 0 211 1 "FUNCTION"
F N "rom_rd_sens_data" 0 578 ""
F G "rom_rd_sens_data" 0 579 "int8()" `1022 
V L "_rom_rd_status" 0 580 "int1" `1023 
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
C L "rom_rd_sens_data" 0 211 1 "FUNCTION"
F N "update_rom_data" 0 608 ""
F G "update_rom_data" 0 609 "void()" `1024 
V L "ROM_Adr" 0 610 "U16" `1025 
C L "update_rom_data" 0 211 1 "FUNCTION"
V L "CRC1" 0 612 "U16" `1026 
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "update_rom_data" 0 211 1 "FUNCTION"
C L "int0" 0 211 2 "FUNCTION"
F N "int0" 0 633 ""
F G "int0" 0 634 "void()" `1027 
V L "coodr_buf" 0 635 "sint16" `1028 
C L "int0" 0 211 2 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 5 "FUNCTION"
C L "int0" 0 211 4 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 1 "FUNCTION"
C L "int0" 0 211 3 "FUNCTION"
C L "int0" 0 211 2 "FUNCTION"
F N "UART_RXd_isr" 0 716 ""
F G "UART_RXd_isr" 0 717 "void()" `1029 
C L "UART_RXd_isr" 0 211 1 "FUNCTION"
C L "UART_RXd_isr" 0 211 1 "FUNCTION"
C L "UART_RXd_isr" 0 211 1 "FUNCTION"
C L "LCDsensInfoMsg" 0 211 1 "FUNCTION"
F N "LCDsensInfoMsg" 0 728 ""
F G "LCDsensInfoMsg" 0 729 "void()" `1030 
F N "detect_sensors" 0 771 ""
F G "detect_sensors" 0 772 "U8()" `1041 
V L "status" 0 773 "U8" `1042 
C L "detect_sensors" 0 211 3 "FUNCTION"
C L "detect_sensors" 0 211 1 "FUNCTION"
F N "ch_to_int" 0 801 ""
V L "ch" 0 801 "int8" `1044 
F G "ch_to_int" 0 802 "U8(int8 ch)" `1043  "ïðåîáðàçîâàíèå ñèâìîëà â öèôðó"
V L "dg" 0 804 "U8" `1045 
F N "get_rx_ch" 0 824 ""
F G "get_rx_ch" 0 825 "int8()" `1046  "Get RX char"
V L "rch" 0 827 "int8" `1047 
C L "get_rx_ch" 0 211 1 "FUNCTION"
C L "get_rx_ch" 0 211 1 "FUNCTION"
C L "get_rx_ch" 0 211 1 "FUNCTION"
C L "get_rx_ch" 0 211 2 "FUNCTION"
C L "get_rx_ch" 0 211 1 "FUNCTION"
C L "get_rx_ch" 0 211 1 "FUNCTION"
F N "MAIN" 0 851 ""
F G "MAIN" 0 852 "void()" `1048  "ðåæèì ïðîãðàììàòîðà çàêîììåíòèðîâàí"
C L "MAIN" 0 211 110 "FUNCTION"
V L "TLV493D_status" 0 1005 "U8" `1049 
V L "rx_byte" 0 1006 "int8" `1050  "áàéò ïðèíÿòûé ñ ÏÊ"
V L "rd_state" 0 1007 "U8" `1051 
C L "MAIN" 0 211 1 "FUNCTION"
V L "coef_id" 0 1008 "int8" `1052 
C L "MAIN" 0 211 1 "FUNCTION"
V L "num_param" 0 1009 "U16" `1053 
C L "MAIN" 0 211 1 "FUNCTION"
C L "MAIN" 0 211 1 "FUNCTION"
C L "MAIN" 0 211 1 "FUNCTION"
C L "MAIN" 0 211 1 "FUNCTION"
C L "MAIN" 0 211 3 "FUNCTION"
C L "MAIN" 0 211 2 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_e" 0 0
F B "port_a_pullups" 1 0
F B "port_b_pullups" 1 0
F B "port_c_pullups" 1 0
F B "port_d_pullups" 1 0
F B "port_e_pullups" 1 0
F B "port_f_pullups" 1 0
F B "port_g_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 2
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "set_analog_pins" 1 2
F B "get_capture" 0 1
F B "set_compare_time" 1 2
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_3" 1 0
F B "set_timer3" 1 0
F B "get_timer3" 0 0
F B "setup_timer_4" 3 0
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_ccp3" 1 0
F B "set_pwm3_duty" 1 0
F B "setup_ccp4" 1 0
F B "set_pwm4_duty" 1 0
F B "setup_ccp5" 1 0
F B "set_pwm5_duty" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "i2c_read" 0 2
F B "i2c_write" 1 2
F B "i2c_start" 0 2
F B "i2c_stop" 0 1
F B "i2c_isr_state" 0 1
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
